
TaskQueueState.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008380  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08008510  08008510  00018510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008780  08008780  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08008780  08008780  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008780  08008780  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008780  08008780  00018780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008784  08008784  00018784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00001ad8  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001b58  20001b58  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024729  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052c2  00000000  00000000  000447d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ca0  00000000  00000000  00049aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a78  00000000  00000000  0004b740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024be0  00000000  00000000  0004d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027b27  00000000  00000000  00071d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccc6a  00000000  00000000  000998bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00166529  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000079fc  00000000  00000000  0016657c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084f8 	.word	0x080084f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080084f8 	.word	0x080084f8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001f4:	b480      	push	{r7}
 80001f6:	b085      	sub	sp, #20
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	4a07      	ldr	r2, [pc, #28]	; (8000220 <vApplicationGetIdleTaskMemory+0x2c>)
 8000204:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	4a06      	ldr	r2, [pc, #24]	; (8000224 <vApplicationGetIdleTaskMemory+0x30>)
 800020a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2280      	movs	r2, #128	; 0x80
 8000210:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	200000a0 	.word	0x200000a0
 8000224:	20000154 	.word	0x20000154

08000228 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	4a07      	ldr	r2, [pc, #28]	; (8000254 <vApplicationGetTimerTaskMemory+0x2c>)
 8000238:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	4a06      	ldr	r2, [pc, #24]	; (8000258 <vApplicationGetTimerTaskMemory+0x30>)
 800023e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000246:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	20000354 	.word	0x20000354
 8000258:	20000408 	.word	0x20000408

0800025c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800025c:	b5b0      	push	{r4, r5, r7, lr}
 800025e:	b088      	sub	sp, #32
 8000260:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000262:	4b0a      	ldr	r3, [pc, #40]	; (800028c <MX_FREERTOS_Init+0x30>)
 8000264:	1d3c      	adds	r4, r7, #4
 8000266:	461d      	mov	r5, r3
 8000268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2100      	movs	r1, #0
 8000278:	4618      	mov	r0, r3
 800027a:	f005 f89d 	bl	80053b8 <osThreadCreate>
 800027e:	4603      	mov	r3, r0
 8000280:	4a03      	ldr	r2, [pc, #12]	; (8000290 <MX_FREERTOS_Init+0x34>)
 8000282:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000284:	bf00      	nop
 8000286:	3720      	adds	r7, #32
 8000288:	46bd      	mov	sp, r7
 800028a:	bdb0      	pop	{r4, r5, r7, pc}
 800028c:	0800851c 	.word	0x0800851c
 8000290:	2000009c 	.word	0x2000009c

08000294 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800029c:	2001      	movs	r0, #1
 800029e:	f005 f8d7 	bl	8005450 <osDelay>
 80002a2:	e7fb      	b.n	800029c <StartDefaultTask+0x8>

080002a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b08a      	sub	sp, #40	; 0x28
 80002a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002ba:	4b37      	ldr	r3, [pc, #220]	; (8000398 <MX_GPIO_Init+0xf4>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	4a36      	ldr	r2, [pc, #216]	; (8000398 <MX_GPIO_Init+0xf4>)
 80002c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002c4:	6153      	str	r3, [r2, #20]
 80002c6:	4b34      	ldr	r3, [pc, #208]	; (8000398 <MX_GPIO_Init+0xf4>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002ce:	613b      	str	r3, [r7, #16]
 80002d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d2:	4b31      	ldr	r3, [pc, #196]	; (8000398 <MX_GPIO_Init+0xf4>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a30      	ldr	r2, [pc, #192]	; (8000398 <MX_GPIO_Init+0xf4>)
 80002d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b2e      	ldr	r3, [pc, #184]	; (8000398 <MX_GPIO_Init+0xf4>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ea:	4b2b      	ldr	r3, [pc, #172]	; (8000398 <MX_GPIO_Init+0xf4>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a2a      	ldr	r2, [pc, #168]	; (8000398 <MX_GPIO_Init+0xf4>)
 80002f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002f4:	6153      	str	r3, [r2, #20]
 80002f6:	4b28      	ldr	r3, [pc, #160]	; (8000398 <MX_GPIO_Init+0xf4>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002fe:	60bb      	str	r3, [r7, #8]
 8000300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000302:	4b25      	ldr	r3, [pc, #148]	; (8000398 <MX_GPIO_Init+0xf4>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a24      	ldr	r2, [pc, #144]	; (8000398 <MX_GPIO_Init+0xf4>)
 8000308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800030c:	6153      	str	r3, [r2, #20]
 800030e:	4b22      	ldr	r3, [pc, #136]	; (8000398 <MX_GPIO_Init+0xf4>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031a:	4b1f      	ldr	r3, [pc, #124]	; (8000398 <MX_GPIO_Init+0xf4>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	4a1e      	ldr	r2, [pc, #120]	; (8000398 <MX_GPIO_Init+0xf4>)
 8000320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000324:	6153      	str	r3, [r2, #20]
 8000326:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <MX_GPIO_Init+0xf4>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800032e:	603b      	str	r3, [r7, #0]
 8000330:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000332:	2200      	movs	r2, #0
 8000334:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000338:	4818      	ldr	r0, [pc, #96]	; (800039c <MX_GPIO_Init+0xf8>)
 800033a:	f001 fac9 	bl	80018d0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800033e:	2337      	movs	r3, #55	; 0x37
 8000340:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000342:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800034c:	f107 0314 	add.w	r3, r7, #20
 8000350:	4619      	mov	r1, r3
 8000352:	4812      	ldr	r0, [pc, #72]	; (800039c <MX_GPIO_Init+0xf8>)
 8000354:	f001 f942 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000358:	f64f 7308 	movw	r3, #65288	; 0xff08
 800035c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035e:	2301      	movs	r3, #1
 8000360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000366:	2300      	movs	r3, #0
 8000368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800036a:	f107 0314 	add.w	r3, r7, #20
 800036e:	4619      	mov	r1, r3
 8000370:	480a      	ldr	r0, [pc, #40]	; (800039c <MX_GPIO_Init+0xf8>)
 8000372:	f001 f933 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000376:	2301      	movs	r3, #1
 8000378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	4619      	mov	r1, r3
 8000388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038c:	f001 f926 	bl	80015dc <HAL_GPIO_Init>

}
 8000390:	bf00      	nop
 8000392:	3728      	adds	r7, #40	; 0x28
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40021000 	.word	0x40021000
 800039c:	48001000 	.word	0x48001000

080003a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <MX_I2C1_Init+0x74>)
 80003a6:	4a1c      	ldr	r2, [pc, #112]	; (8000418 <MX_I2C1_Init+0x78>)
 80003a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_I2C1_Init+0x74>)
 80003ac:	4a1b      	ldr	r2, [pc, #108]	; (800041c <MX_I2C1_Init+0x7c>)
 80003ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <MX_I2C1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_I2C1_Init+0x74>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MX_I2C1_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_I2C1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_I2C1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_I2C1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_I2C1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003da:	480e      	ldr	r0, [pc, #56]	; (8000414 <MX_I2C1_Init+0x74>)
 80003dc:	f001 fa90 	bl	8001900 <HAL_I2C_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003e6:	f000 fb0b 	bl	8000a00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ea:	2100      	movs	r1, #0
 80003ec:	4809      	ldr	r0, [pc, #36]	; (8000414 <MX_I2C1_Init+0x74>)
 80003ee:	f001 fb16 	bl	8001a1e <HAL_I2CEx_ConfigAnalogFilter>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003f8:	f000 fb02 	bl	8000a00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003fc:	2100      	movs	r1, #0
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_I2C1_Init+0x74>)
 8000400:	f001 fb58 	bl	8001ab4 <HAL_I2CEx_ConfigDigitalFilter>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800040a:	f000 faf9 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000808 	.word	0x20000808
 8000418:	40005400 	.word	0x40005400
 800041c:	2000090e 	.word	0x2000090e

08000420 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	; 0x28
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	f107 0314 	add.w	r3, r7, #20
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a17      	ldr	r2, [pc, #92]	; (800049c <HAL_I2C_MspInit+0x7c>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d127      	bne.n	8000492 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000442:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <HAL_I2C_MspInit+0x80>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a16      	ldr	r2, [pc, #88]	; (80004a0 <HAL_I2C_MspInit+0x80>)
 8000448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <HAL_I2C_MspInit+0x80>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800045a:	23c0      	movs	r3, #192	; 0xc0
 800045c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800045e:	2312      	movs	r3, #18
 8000460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000462:	2301      	movs	r3, #1
 8000464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000466:	2303      	movs	r3, #3
 8000468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800046a:	2304      	movs	r3, #4
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	4619      	mov	r1, r3
 8000474:	480b      	ldr	r0, [pc, #44]	; (80004a4 <HAL_I2C_MspInit+0x84>)
 8000476:	f001 f8b1 	bl	80015dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <HAL_I2C_MspInit+0x80>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <HAL_I2C_MspInit+0x80>)
 8000480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <HAL_I2C_MspInit+0x80>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000492:	bf00      	nop
 8000494:	3728      	adds	r7, #40	; 0x28
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40005400 	.word	0x40005400
 80004a0:	40021000 	.word	0x40021000
 80004a4:	48000400 	.word	0x48000400

080004a8 <led_effect_stop>:
 *      Author: selim
 */

#include "main.h"

void led_effect_stop(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af02      	add	r7, sp, #8
	for (int i = 0; i < 4; i++) {
 80004ae:	2300      	movs	r3, #0
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	e00e      	b.n	80004d2 <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 80004b4:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <led_effect_stop+0x3c>)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004bc:	f04f 33ff 	mov.w	r3, #4294967295
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	2300      	movs	r3, #0
 80004c4:	2200      	movs	r2, #0
 80004c6:	2103      	movs	r1, #3
 80004c8:	f007 f822 	bl	8007510 <xTimerGenericCommand>
	for (int i = 0; i < 4; i++) {
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3301      	adds	r3, #1
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	dded      	ble.n	80004b4 <led_effect_stop+0xc>
	}
}
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000874 	.word	0x20000874

080004e8 <led_effect>:

void led_effect(uint8_t n){
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af02      	add	r7, sp, #8
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]

	led_effect_stop();
 80004f2:	f7ff ffd9 	bl	80004a8 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	3b01      	subs	r3, #1
 80004fa:	4a09      	ldr	r2, [pc, #36]	; (8000520 <led_effect+0x38>)
 80004fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000500:	f006 f940 	bl	8006784 <xTaskGetTickCount>
 8000504:	4602      	mov	r2, r0
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2300      	movs	r3, #0
 800050e:	2101      	movs	r1, #1
 8000510:	4620      	mov	r0, r4
 8000512:	f006 fffd 	bl	8007510 <xTimerGenericCommand>
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bd90      	pop	{r4, r7, pc}
 800051e:	bf00      	nop
 8000520:	20000874 	.word	0x20000874

08000524 <turn_on_all_leds>:


void turn_on_all_leds(){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <turn_on_all_leds+0x20>)
 8000530:	f001 f9ce 	bl	80018d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800053a:	4802      	ldr	r0, [pc, #8]	; (8000544 <turn_on_all_leds+0x20>)
 800053c:	f001 f9c8 	bl	80018d0 <HAL_GPIO_WritePin>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	48001000 	.word	0x48001000

08000548 <turn_off_all_leds>:

void turn_off_all_leds(){
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <turn_off_all_leds+0x20>)
 8000554:	f001 f9bc 	bl	80018d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800055e:	4802      	ldr	r0, [pc, #8]	; (8000568 <turn_off_all_leds+0x20>)
 8000560:	f001 f9b6 	bl	80018d0 <HAL_GPIO_WritePin>
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	48001000 	.word	0x48001000

0800056c <turn_on_odd_leds>:

void turn_on_odd_leds(){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000576:	4805      	ldr	r0, [pc, #20]	; (800058c <turn_on_odd_leds+0x20>)
 8000578:	f001 f9aa 	bl	80018d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000582:	4802      	ldr	r0, [pc, #8]	; (800058c <turn_on_odd_leds+0x20>)
 8000584:	f001 f9a4 	bl	80018d0 <HAL_GPIO_WritePin>
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	48001000 	.word	0x48001000

08000590 <turn_off_odd_leds>:

void turn_off_odd_leds(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <turn_off_odd_leds+0x20>)
 800059c:	f001 f998 	bl	80018d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a6:	4802      	ldr	r0, [pc, #8]	; (80005b0 <turn_off_odd_leds+0x20>)
 80005a8:	f001 f992 	bl	80018d0 <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	48001000 	.word	0x48001000

080005b4 <LED_effect1>:



void LED_effect1()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    static int flag = 1;

    // Perform the XOR operation on the "flag" variable with 1
    // This compares each bit of the first operand (flag) to the corresponding bit of the second operand (1)
    // If the bits are the same, the corresponding result bit is set to 0. If the bits are different, the corresponding result bit is set to 1.
    flag = flag ^ 1;
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <LED_effect1+0x28>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f083 0301 	eor.w	r3, r3, #1
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <LED_effect1+0x28>)
 80005c2:	6013      	str	r3, [r2, #0]

    // Check the value of "flag" after the XOR operation
    if (flag == 1) {
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <LED_effect1+0x28>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d102      	bne.n	80005d2 <LED_effect1+0x1e>
        // If "flag" is 1, call the function to turn on all the LEDs
        turn_on_all_leds();
 80005cc:	f7ff ffaa 	bl	8000524 <turn_on_all_leds>
    } else {
        // If "flag" is 0, call the function to turn off all the LEDs
        turn_off_all_leds();
    }
}
 80005d0:	e001      	b.n	80005d6 <LED_effect1+0x22>
        turn_off_all_leds();
 80005d2:	f7ff ffb9 	bl	8000548 <turn_off_all_leds>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000

080005e0 <LED_effect2>:


void LED_effect2()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
    static int flag = 1;

    // Perform the XOR operation on the "flag" variable with 1
    // This compares each bit of the first operand (flag) to the corresponding bit of the second operand (1)
    // If the bits are the same, the corresponding result bit is set to 0. If the bits are different, the corresponding result bit is set to 1.
    flag = flag ^ 1;
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <LED_effect2+0x28>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f083 0301 	eor.w	r3, r3, #1
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <LED_effect2+0x28>)
 80005ee:	6013      	str	r3, [r2, #0]

    // Check the value of "flag" after the XOR operation
    if (flag == 1) {
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <LED_effect2+0x28>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d102      	bne.n	80005fe <LED_effect2+0x1e>
        // If "flag" is 1, call the function to turn on all the LEDs
        turn_on_odd_leds();
 80005f8:	f7ff ffb8 	bl	800056c <turn_on_odd_leds>
    } else {
        // If "flag" is 0, call the function to turn off all the LEDs
        turn_off_odd_leds();
    }
}
 80005fc:	e001      	b.n	8000602 <LED_effect2+0x22>
        turn_off_odd_leds();
 80005fe:	f7ff ffc7 	bl	8000590 <turn_off_odd_leds>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000004 	.word	0x20000004

0800060c <LED_effect3>:


void LED_effect3()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000616:	4802      	ldr	r0, [pc, #8]	; (8000620 <LED_effect3+0x14>)
 8000618:	f001 f95a 	bl	80018d0 <HAL_GPIO_WritePin>

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	48001000 	.word	0x48001000

08000624 <LED_effect4>:
void LED_effect4()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800062e:	4802      	ldr	r0, [pc, #8]	; (8000638 <LED_effect4+0x14>)
 8000630:	f001 f94e 	bl	80018d0 <HAL_GPIO_WritePin>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	48001000 	.word	0x48001000

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fe3b 	bl	80012bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f8e9 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f7ff fe2b 	bl	80002a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800064e:	f7ff fea7 	bl	80003a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000652:	f000 fa27 	bl	8000aa4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000656:	f000 fda1 	bl	800119c <MX_USB_PCD_Init>
  MX_RTC_Init();
 800065a:	f000 f9d7 	bl	8000a0c <MX_RTC_Init>
  MX_USART2_UART_Init();
 800065e:	f000 fd23 	bl	80010a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	status = xTaskCreate(menu_task, "menu_task", 100, NULL, 2, &handle_menu_task);
 8000662:	4b58      	ldr	r3, [pc, #352]	; (80007c4 <main+0x188>)
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	2264      	movs	r2, #100	; 0x64
 800066e:	4956      	ldr	r1, [pc, #344]	; (80007c8 <main+0x18c>)
 8000670:	4856      	ldr	r0, [pc, #344]	; (80007cc <main+0x190>)
 8000672:	f005 fdf3 	bl	800625c <xTaskCreate>
 8000676:	61b8      	str	r0, [r7, #24]

	configASSERT(status == pdPASS);
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d00a      	beq.n	8000694 <main+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000682:	f383 8811 	msr	BASEPRI, r3
 8000686:	f3bf 8f6f 	isb	sy
 800068a:	f3bf 8f4f 	dsb	sy
 800068e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000690:	bf00      	nop
 8000692:	e7fe      	b.n	8000692 <main+0x56>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 100, NULL, 2, &handle_cmd_task);
 8000694:	4b4e      	ldr	r3, [pc, #312]	; (80007d0 <main+0x194>)
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	2302      	movs	r3, #2
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2300      	movs	r3, #0
 800069e:	2264      	movs	r2, #100	; 0x64
 80006a0:	494c      	ldr	r1, [pc, #304]	; (80007d4 <main+0x198>)
 80006a2:	484d      	ldr	r0, [pc, #308]	; (80007d8 <main+0x19c>)
 80006a4:	f005 fdda 	bl	800625c <xTaskCreate>
 80006a8:	61b8      	str	r0, [r7, #24]

	configASSERT(status == pdPASS);
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d00a      	beq.n	80006c6 <main+0x8a>
	__asm volatile
 80006b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b4:	f383 8811 	msr	BASEPRI, r3
 80006b8:	f3bf 8f6f 	isb	sy
 80006bc:	f3bf 8f4f 	dsb	sy
 80006c0:	613b      	str	r3, [r7, #16]
}
 80006c2:	bf00      	nop
 80006c4:	e7fe      	b.n	80006c4 <main+0x88>

	status = xTaskCreate(print_task, "print_task", 100, NULL, 2, &handle_print_task);
 80006c6:	4b45      	ldr	r3, [pc, #276]	; (80007dc <main+0x1a0>)
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	2302      	movs	r3, #2
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2300      	movs	r3, #0
 80006d0:	2264      	movs	r2, #100	; 0x64
 80006d2:	4943      	ldr	r1, [pc, #268]	; (80007e0 <main+0x1a4>)
 80006d4:	4843      	ldr	r0, [pc, #268]	; (80007e4 <main+0x1a8>)
 80006d6:	f005 fdc1 	bl	800625c <xTaskCreate>
 80006da:	61b8      	str	r0, [r7, #24]

	configASSERT(status == pdPASS);
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d00a      	beq.n	80006f8 <main+0xbc>
	__asm volatile
 80006e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006e6:	f383 8811 	msr	BASEPRI, r3
 80006ea:	f3bf 8f6f 	isb	sy
 80006ee:	f3bf 8f4f 	dsb	sy
 80006f2:	60fb      	str	r3, [r7, #12]
}
 80006f4:	bf00      	nop
 80006f6:	e7fe      	b.n	80006f6 <main+0xba>

	status = xTaskCreate(led_task, "led_task", 100, NULL, 2, &handle_led_task);
 80006f8:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <main+0x1ac>)
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	2302      	movs	r3, #2
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2300      	movs	r3, #0
 8000702:	2264      	movs	r2, #100	; 0x64
 8000704:	4939      	ldr	r1, [pc, #228]	; (80007ec <main+0x1b0>)
 8000706:	483a      	ldr	r0, [pc, #232]	; (80007f0 <main+0x1b4>)
 8000708:	f005 fda8 	bl	800625c <xTaskCreate>
 800070c:	61b8      	str	r0, [r7, #24]

	configASSERT(status == pdPASS);
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d00a      	beq.n	800072a <main+0xee>
	__asm volatile
 8000714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000718:	f383 8811 	msr	BASEPRI, r3
 800071c:	f3bf 8f6f 	isb	sy
 8000720:	f3bf 8f4f 	dsb	sy
 8000724:	60bb      	str	r3, [r7, #8]
}
 8000726:	bf00      	nop
 8000728:	e7fe      	b.n	8000728 <main+0xec>

	status = xTaskCreate(rtc_task, "rtc_task", 100, NULL, 2, &handle_rtc_task);
 800072a:	4b32      	ldr	r3, [pc, #200]	; (80007f4 <main+0x1b8>)
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	2302      	movs	r3, #2
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2300      	movs	r3, #0
 8000734:	2264      	movs	r2, #100	; 0x64
 8000736:	4930      	ldr	r1, [pc, #192]	; (80007f8 <main+0x1bc>)
 8000738:	4830      	ldr	r0, [pc, #192]	; (80007fc <main+0x1c0>)
 800073a:	f005 fd8f 	bl	800625c <xTaskCreate>
 800073e:	61b8      	str	r0, [r7, #24]

	configASSERT(status == pdPASS);
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d00a      	beq.n	800075c <main+0x120>
	__asm volatile
 8000746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800074a:	f383 8811 	msr	BASEPRI, r3
 800074e:	f3bf 8f6f 	isb	sy
 8000752:	f3bf 8f4f 	dsb	sy
 8000756:	607b      	str	r3, [r7, #4]
}
 8000758:	bf00      	nop
 800075a:	e7fe      	b.n	800075a <main+0x11e>

	q_data = xQueueCreate (5, sizeof(char));
 800075c:	2200      	movs	r2, #0
 800075e:	2101      	movs	r1, #1
 8000760:	2005      	movs	r0, #5
 8000762:	f005 f81c 	bl	800579e <xQueueGenericCreate>
 8000766:	4603      	mov	r3, r0
 8000768:	4a25      	ldr	r2, [pc, #148]	; (8000800 <main+0x1c4>)
 800076a:	6013      	str	r3, [r2, #0]

//	configASSERT(q_data != NULL);

	q_print = xQueueCreate (5, sizeof(size_t));
 800076c:	2200      	movs	r2, #0
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f005 f814 	bl	800579e <xQueueGenericCreate>
 8000776:	4603      	mov	r3, r0
 8000778:	4a22      	ldr	r2, [pc, #136]	; (8000804 <main+0x1c8>)
 800077a:	6013      	str	r3, [r2, #0]

//	configASSERT(q_print != NULL);

  // create for timer for 4 led attribute

  for ( int i = 0;  i < 4; ++ i) {
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
 8000780:	e013      	b.n	80007aa <main+0x16e>
	  handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i+1), led_effect_callback);
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3301      	adds	r3, #1
 8000786:	461a      	mov	r2, r3
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <main+0x1cc>)
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	4613      	mov	r3, r2
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000794:	481d      	ldr	r0, [pc, #116]	; (800080c <main+0x1d0>)
 8000796:	f006 fe67 	bl	8007468 <xTimerCreate>
 800079a:	4602      	mov	r2, r0
 800079c:	491c      	ldr	r1, [pc, #112]	; (8000810 <main+0x1d4>)
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for ( int i = 0;  i < 4; ++ i) {
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	3301      	adds	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	dde8      	ble.n	8000782 <main+0x146>
}

  HAL_UART_Receive_IT(&huart2, &user_data, 1);
 80007b0:	2201      	movs	r2, #1
 80007b2:	4918      	ldr	r1, [pc, #96]	; (8000814 <main+0x1d8>)
 80007b4:	4818      	ldr	r0, [pc, #96]	; (8000818 <main+0x1dc>)
 80007b6:	f003 fc31 	bl	800401c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007ba:	f7ff fd4f 	bl	800025c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007be:	f004 fdf4 	bl	80053aa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <main+0x186>
 80007c4:	20000854 	.word	0x20000854
 80007c8:	08008538 	.word	0x08008538
 80007cc:	08000d61 	.word	0x08000d61
 80007d0:	20000858 	.word	0x20000858
 80007d4:	08008544 	.word	0x08008544
 80007d8:	08000fa5 	.word	0x08000fa5
 80007dc:	2000085c 	.word	0x2000085c
 80007e0:	08008550 	.word	0x08008550
 80007e4:	08000f65 	.word	0x08000f65
 80007e8:	20000860 	.word	0x20000860
 80007ec:	0800855c 	.word	0x0800855c
 80007f0:	08000e39 	.word	0x08000e39
 80007f4:	20000864 	.word	0x20000864
 80007f8:	08008568 	.word	0x08008568
 80007fc:	08000f59 	.word	0x08000f59
 8000800:	20000868 	.word	0x20000868
 8000804:	2000086c 	.word	0x2000086c
 8000808:	080008ed 	.word	0x080008ed
 800080c:	08008574 	.word	0x08008574
 8000810:	20000874 	.word	0x20000874
 8000814:	20000870 	.word	0x20000870
 8000818:	20000954 	.word	0x20000954

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b09e      	sub	sp, #120	; 0x78
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000826:	2228      	movs	r2, #40	; 0x28
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f007 fd9a 	bl	8008364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000840:	463b      	mov	r3, r7
 8000842:	223c      	movs	r2, #60	; 0x3c
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f007 fd8c 	bl	8008364 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800084c:	230b      	movs	r3, #11
 800084e:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000854:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085a:	2301      	movs	r3, #1
 800085c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085e:	2310      	movs	r3, #16
 8000860:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000862:	2301      	movs	r3, #1
 8000864:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800086e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000870:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000874:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fa44 	bl	8001d08 <HAL_RCC_OscConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000886:	f000 f8bb 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	230f      	movs	r3, #15
 800088c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2302      	movs	r3, #2
 8000890:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008a4:	2101      	movs	r1, #1
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 fa6c 	bl	8002d84 <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008b2:	f000 f8a5 	bl	8000a00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <SystemClock_Config+0xcc>)
 80008b8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80008c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008cc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 fcbf 	bl	8003254 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008dc:	f000 f890 	bl	8000a00 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3778      	adds	r7, #120	; 0x78
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	00030022 	.word	0x00030022

080008ec <led_effect_callback>:

/* USER CODE BEGIN 4 */

void led_effect_callback(xTimerHandle xTimer)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t) pvTimerGetTimerID( xTimer );
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f007 f8bb 	bl	8007a70 <pvTimerGetTimerID>
 80008fa:	4603      	mov	r3, r0
 80008fc:	60fb      	str	r3, [r7, #12]
	switch (id) {
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3b01      	subs	r3, #1
 8000902:	2b03      	cmp	r3, #3
 8000904:	d816      	bhi.n	8000934 <led_effect_callback+0x48>
 8000906:	a201      	add	r2, pc, #4	; (adr r2, 800090c <led_effect_callback+0x20>)
 8000908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090c:	0800091d 	.word	0x0800091d
 8000910:	08000923 	.word	0x08000923
 8000914:	08000929 	.word	0x08000929
 8000918:	0800092f 	.word	0x0800092f
		case 1:
			LED_effect1();
 800091c:	f7ff fe4a 	bl	80005b4 <LED_effect1>
			break;
 8000920:	e008      	b.n	8000934 <led_effect_callback+0x48>
		case 2:
			LED_effect2();
 8000922:	f7ff fe5d 	bl	80005e0 <LED_effect2>
			break;
 8000926:	e005      	b.n	8000934 <led_effect_callback+0x48>
		case 3:
			LED_effect3();
 8000928:	f7ff fe70 	bl	800060c <LED_effect3>
			break;
 800092c:	e002      	b.n	8000934 <led_effect_callback+0x48>
		case 4:
			LED_effect4();
 800092e:	f7ff fe79 	bl	8000624 <LED_effect4>
			break;
 8000932:	bf00      	nop
	}
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <HAL_UART_RxCpltCallback>:


/* This function called from UART interrupt handler , hence executes in interrupt context */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af02      	add	r7, sp, #8
 8000942:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	for(uint32_t i = 0 ; i < 4000 ; i++);
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	e002      	b.n	8000950 <HAL_UART_RxCpltCallback+0x14>
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	3301      	adds	r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000956:	d3f8      	bcc.n	800094a <HAL_UART_RxCpltCallback+0xe>

	if(! xQueueIsQueueFullFromISR(q_data))
 8000958:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <HAL_UART_RxCpltCallback+0x90>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f005 fb9f 	bl	80060a0 <xQueueIsQueueFullFromISR>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d107      	bne.n	8000978 <HAL_UART_RxCpltCallback+0x3c>
	{
		/*Enqueue data byte */
		xQueueSendFromISR(q_data , (void*)&user_data , NULL);
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <HAL_UART_RxCpltCallback+0x90>)
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	2300      	movs	r3, #0
 800096e:	2200      	movs	r2, #0
 8000970:	4917      	ldr	r1, [pc, #92]	; (80009d0 <HAL_UART_RxCpltCallback+0x94>)
 8000972:	f005 f86f 	bl	8005a54 <xQueueGenericSendFromISR>
 8000976:	e012      	b.n	800099e <HAL_UART_RxCpltCallback+0x62>
	}else{
		if(user_data == '\n')
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_UART_RxCpltCallback+0x94>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b0a      	cmp	r3, #10
 800097e:	d10e      	bne.n	800099e <HAL_UART_RxCpltCallback+0x62>
		{
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_UART_RxCpltCallback+0x90>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f107 010b 	add.w	r1, r7, #11
 8000988:	2200      	movs	r2, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f005 f9da 	bl	8005d44 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data ,(void*)&user_data , NULL);
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_UART_RxCpltCallback+0x90>)
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	2300      	movs	r3, #0
 8000996:	2200      	movs	r2, #0
 8000998:	490d      	ldr	r1, [pc, #52]	; (80009d0 <HAL_UART_RxCpltCallback+0x94>)
 800099a:	f005 f85b 	bl	8005a54 <xQueueGenericSendFromISR>
		}
	}

	/*Send notification to command handling task if user_data = '\n' */
	if( user_data == '\n' ){
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <HAL_UART_RxCpltCallback+0x94>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b0a      	cmp	r3, #10
 80009a4:	d108      	bne.n	80009b8 <HAL_UART_RxCpltCallback+0x7c>
		/*send notification to command handling task */
		xTaskNotifyFromISR (handle_cmd_task,0,eNoAction,NULL);
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <HAL_UART_RxCpltCallback+0x98>)
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	2300      	movs	r3, #0
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2300      	movs	r3, #0
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	f006 fbda 	bl	800716c <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009b8:	2201      	movs	r2, #1
 80009ba:	4905      	ldr	r1, [pc, #20]	; (80009d0 <HAL_UART_RxCpltCallback+0x94>)
 80009bc:	4806      	ldr	r0, [pc, #24]	; (80009d8 <HAL_UART_RxCpltCallback+0x9c>)
 80009be:	f003 fb2d 	bl	800401c <HAL_UART_Receive_IT>


}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000868 	.word	0x20000868
 80009d0:	20000870 	.word	0x20000870
 80009d4:	20000858 	.word	0x20000858
 80009d8:	20000954 	.word	0x20000954

080009dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a04      	ldr	r2, [pc, #16]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d101      	bne.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ee:	f000 fc7b 	bl	80012e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40001000 	.word	0x40001000

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_RTC_Init+0x44>)
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <MX_RTC_Init+0x48>)
 8000a14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_RTC_Init+0x44>)
 8000a18:	2240      	movs	r2, #64	; 0x40
 8000a1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_RTC_Init+0x44>)
 8000a1e:	227f      	movs	r2, #127	; 0x7f
 8000a20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_RTC_Init+0x44>)
 8000a24:	22ff      	movs	r2, #255	; 0xff
 8000a26:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_RTC_Init+0x44>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_RTC_Init+0x44>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_RTC_Init+0x44>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_RTC_Init+0x44>)
 8000a3c:	f002 fdba 	bl	80035b4 <HAL_RTC_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a46:	f7ff ffdb 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000884 	.word	0x20000884
 8000a54:	40002800 	.word	0x40002800

08000a58 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <HAL_RTC_MspInit+0x44>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d111      	bne.n	8000a8e <HAL_RTC_MspInit+0x36>
 8000a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a6e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	fa93 f3a3 	rbit	r3, r3
 8000a76:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a78:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a7a:	fab3 f383 	clz	r3, r3
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <HAL_RTC_MspInit+0x48>)
 8000a84:	4413      	add	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40002800 	.word	0x40002800
 8000aa0:	10908100 	.word	0x10908100

08000aa4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000abe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ac2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000ada:	2208      	movs	r2, #8
 8000adc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000af2:	2207      	movs	r2, #7
 8000af4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000afe:	2208      	movs	r2, #8
 8000b00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000b04:	f002 fe3b 	bl	800377e <HAL_SPI_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b0e:	f7ff ff77 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200008a4 	.word	0x200008a4
 8000b1c:	40013000 	.word	0x40013000

08000b20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_SPI_MspInit+0x7c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d128      	bne.n	8000b94 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_SPI_MspInit+0x80>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	4a16      	ldr	r2, [pc, #88]	; (8000ba0 <HAL_SPI_MspInit+0x80>)
 8000b48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b4c:	6193      	str	r3, [r2, #24]
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_SPI_MspInit+0x80>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_SPI_MspInit+0x80>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <HAL_SPI_MspInit+0x80>)
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	6153      	str	r3, [r2, #20]
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_SPI_MspInit+0x80>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000b72:	23e0      	movs	r3, #224	; 0xe0
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b82:	2305      	movs	r3, #5
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b90:	f000 fd24 	bl	80015dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40013000 	.word	0x40013000
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6193      	str	r3, [r2, #24]
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	210f      	movs	r1, #15
 8000bde:	f06f 0001 	mvn.w	r0, #1
 8000be2:	f000 fc59 	bl	8001498 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c04:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <HAL_InitTick+0xe0>)
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	4a32      	ldr	r2, [pc, #200]	; (8000cd4 <HAL_InitTick+0xe0>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	61d3      	str	r3, [r2, #28]
 8000c10:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <HAL_InitTick+0xe0>)
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c1c:	f107 0210 	add.w	r2, r7, #16
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f002 fae2 	bl	80031f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d103      	bne.n	8000c3e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c36:	f002 fa97 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8000c3a:	6378      	str	r0, [r7, #52]	; 0x34
 8000c3c:	e004      	b.n	8000c48 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c3e:	f002 fa93 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8000c42:	4603      	mov	r3, r0
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c4a:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <HAL_InitTick+0xe4>)
 8000c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c50:	0c9b      	lsrs	r3, r3, #18
 8000c52:	3b01      	subs	r3, #1
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <HAL_InitTick+0xe8>)
 8000c58:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <HAL_InitTick+0xec>)
 8000c5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <HAL_InitTick+0xe8>)
 8000c5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c64:	4a1d      	ldr	r2, [pc, #116]	; (8000cdc <HAL_InitTick+0xe8>)
 8000c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c68:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <HAL_InitTick+0xe8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_InitTick+0xe8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_InitTick+0xe8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c7c:	4817      	ldr	r0, [pc, #92]	; (8000cdc <HAL_InitTick+0xe8>)
 8000c7e:	f002 fe29 	bl	80038d4 <HAL_TIM_Base_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d11b      	bne.n	8000cc8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c90:	4812      	ldr	r0, [pc, #72]	; (8000cdc <HAL_InitTick+0xe8>)
 8000c92:	f002 fe81 	bl	8003998 <HAL_TIM_Base_Start_IT>
 8000c96:	4603      	mov	r3, r0
 8000c98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d111      	bne.n	8000cc8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ca4:	2036      	movs	r0, #54	; 0x36
 8000ca6:	f000 fc13 	bl	80014d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d808      	bhi.n	8000cc2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	2036      	movs	r0, #54	; 0x36
 8000cb6:	f000 fbef 	bl	8001498 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_InitTick+0xf0>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	e002      	b.n	8000cc8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3738      	adds	r7, #56	; 0x38
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	431bde83 	.word	0x431bde83
 8000cdc:	20000908 	.word	0x20000908
 8000ce0:	40001000 	.word	0x40001000
 8000ce4:	20000010 	.word	0x20000010

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <USART2_IRQHandler+0x10>)
 8000d1a:	f003 f9cd 	bl	80040b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000954 	.word	0x20000954

08000d28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <TIM6_DAC_IRQHandler+0x10>)
 8000d2e:	f002 fe9d 	bl	8003a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000908 	.word	0x20000908

08000d3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <menu_task>:
int extract_command(command_t *cmd);
void process_command(command_t *cmd);
const char *msg_inv = "////Invalid option////\n";

void menu_task(void *param)
{uint32_t cmd_addr;
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

command_t *cmd;

int option;

const char* msg_menu = "\n========================\n"
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <menu_task+0xc0>)
 8000d6a:	60bb      	str	r3, [r7, #8]
							"Date and time ----> 1\n"
							"Exit          ----> 2\n"
							"Enter your choice here : ";

while(1){
	xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <menu_task+0xc4>)
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	f107 0108 	add.w	r1, r7, #8
 8000d74:	2300      	movs	r3, #0
 8000d76:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7a:	f004 fd6d 	bl	8005858 <xQueueGenericSend>

	//wait for menu commands
	xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8000d7e:	f107 020c 	add.w	r2, r7, #12
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	2100      	movs	r1, #0
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f006 f8e5 	bl	8006f58 <xTaskNotifyWait>
	cmd = (command_t*)cmd_addr;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	617b      	str	r3, [r7, #20]

	if(cmd->len == 1)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d12f      	bne.n	8000dfa <menu_task+0x9a>
	{
		option = cmd->payload[0] - 48;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	3b30      	subs	r3, #48	; 0x30
 8000da0:	613b      	str	r3, [r7, #16]
		switch(option)
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d031      	beq.n	8000e0c <menu_task+0xac>
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	dc1c      	bgt.n	8000de8 <menu_task+0x88>
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <menu_task+0x5c>
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d00b      	beq.n	8000dd2 <menu_task+0x72>
 8000dba:	e015      	b.n	8000de8 <menu_task+0x88>
		{
			case 0:
				curr_state = sLedEffect;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <menu_task+0xc8>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_led_task,0,eNoAction);
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <menu_task+0xcc>)
 8000dc4:	6818      	ldr	r0, [r3, #0]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	f006 f924 	bl	8007018 <xTaskGenericNotify>
				break;
 8000dd0:	e01d      	b.n	8000e0e <menu_task+0xae>
			case 1:
				curr_state = sRtcMenu;
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <menu_task+0xc8>)
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_rtc_task,0,eNoAction);
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <menu_task+0xd0>)
 8000dda:	6818      	ldr	r0, [r3, #0]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	f006 f919 	bl	8007018 <xTaskGenericNotify>
				break;
 8000de6:	e012      	b.n	8000e0e <menu_task+0xae>
			case 2: /*implement exit */
				break;
			default:
				xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <menu_task+0xc4>)
 8000dea:	6818      	ldr	r0, [r3, #0]
 8000dec:	2300      	movs	r3, #0
 8000dee:	f04f 32ff 	mov.w	r2, #4294967295
 8000df2:	4910      	ldr	r1, [pc, #64]	; (8000e34 <menu_task+0xd4>)
 8000df4:	f004 fd30 	bl	8005858 <xQueueGenericSend>
				continue;
 8000df8:	e010      	b.n	8000e1c <menu_task+0xbc>
		}

	}else{
		//invalid entry
		xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <menu_task+0xc4>)
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	490b      	ldr	r1, [pc, #44]	; (8000e34 <menu_task+0xd4>)
 8000e06:	f004 fd27 	bl	8005858 <xQueueGenericSend>
		continue;
 8000e0a:	e007      	b.n	8000e1c <menu_task+0xbc>
				break;
 8000e0c:	bf00      	nop
	}


	//wait to run again when some other task notifies
	xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2000      	movs	r0, #0
 8000e18:	f006 f89e 	bl	8006f58 <xTaskNotifyWait>
	xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8000e1c:	e7a6      	b.n	8000d6c <menu_task+0xc>
 8000e1e:	bf00      	nop
 8000e20:	08008598 	.word	0x08008598
 8000e24:	2000086c 	.word	0x2000086c
 8000e28:	20000871 	.word	0x20000871
 8000e2c:	20000860 	.word	0x20000860
 8000e30:	20000864 	.word	0x20000864
 8000e34:	2000000c 	.word	0x2000000c

08000e38 <led_task>:

}//while super loop
}
void led_task(void *param)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 8000e40:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <led_task+0xf8>)
 8000e42:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1)
	{
		xTaskNotifyWait(0, 0, NULL,portMAX_DELAY);
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f006 f883 	bl	8006f58 <xTaskNotifyWait>
		//print led menu
		xQueueSend(q_print, &msg_led, portMAX_DELAY);
 8000e52:	4b38      	ldr	r3, [pc, #224]	; (8000f34 <led_task+0xfc>)
 8000e54:	6818      	ldr	r0, [r3, #0]
 8000e56:	f107 010c 	add.w	r1, r7, #12
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	f004 fcfa 	bl	8005858 <xQueueGenericSend>
		//wait for led command (notify wait)
		xTaskNotifyWait(0, 0, &cmd_addr,portMAX_DELAY);
 8000e64:	f107 0210 	add.w	r2, r7, #16
 8000e68:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f006 f872 	bl	8006f58 <xTaskNotifyWait>
		cmd = (command_t*)cmd_addr;
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	617b      	str	r3, [r7, #20]
		if(cmd->len <=4)
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	d843      	bhi.n	8000f08 <led_task+0xd0>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	492d      	ldr	r1, [pc, #180]	; (8000f38 <led_task+0x100>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff f9a3 	bl	80001d0 <strcmp>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <led_task+0x5e>
				led_effect_stop();
 8000e90:	f7ff fb0a 	bl	80004a8 <led_effect_stop>
 8000e94:	e040      	b.n	8000f18 <led_task+0xe0>
			else if (! strcmp((char*)cmd->payload,"e1"))
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	4928      	ldr	r1, [pc, #160]	; (8000f3c <led_task+0x104>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff f998 	bl	80001d0 <strcmp>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d103      	bne.n	8000eae <led_task+0x76>
				led_effect(1);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f7ff fb1e 	bl	80004e8 <led_effect>
 8000eac:	e034      	b.n	8000f18 <led_task+0xe0>
			else if (! strcmp((char*)cmd->payload,"e2"))
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	4923      	ldr	r1, [pc, #140]	; (8000f40 <led_task+0x108>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff f98c 	bl	80001d0 <strcmp>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d103      	bne.n	8000ec6 <led_task+0x8e>
				led_effect(2);
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f7ff fb12 	bl	80004e8 <led_effect>
 8000ec4:	e028      	b.n	8000f18 <led_task+0xe0>
			else if (! strcmp((char*)cmd->payload,"e3"))
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	491e      	ldr	r1, [pc, #120]	; (8000f44 <led_task+0x10c>)
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff f980 	bl	80001d0 <strcmp>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d103      	bne.n	8000ede <led_task+0xa6>
				led_effect(3);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f7ff fb06 	bl	80004e8 <led_effect>
 8000edc:	e01c      	b.n	8000f18 <led_task+0xe0>
			else if (! strcmp((char*)cmd->payload,"e4"))
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	4919      	ldr	r1, [pc, #100]	; (8000f48 <led_task+0x110>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff f974 	bl	80001d0 <strcmp>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d103      	bne.n	8000ef6 <led_task+0xbe>
				led_effect(4);
 8000eee:	2004      	movs	r0, #4
 8000ef0:	f7ff fafa 	bl	80004e8 <led_effect>
 8000ef4:	e010      	b.n	8000f18 <led_task+0xe0>
			else
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);  // print invalid command
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <led_task+0xfc>)
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	2300      	movs	r3, #0
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	4912      	ldr	r1, [pc, #72]	; (8000f4c <led_task+0x114>)
 8000f02:	f004 fca9 	bl	8005858 <xQueueGenericSend>
 8000f06:	e007      	b.n	8000f18 <led_task+0xe0>
		}else
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <led_task+0xfc>)
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f12:	490e      	ldr	r1, [pc, #56]	; (8000f4c <led_task+0x114>)
 8000f14:	f004 fca0 	bl	8005858 <xQueueGenericSend>

		//update state variable
		curr_state = sMainMenu;
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <led_task+0x118>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
		// notify task menu
		xTaskNotify(handle_menu_task, 0, eNoAction);
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <led_task+0x11c>)
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	2300      	movs	r3, #0
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	f006 f876 	bl	8007018 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL,portMAX_DELAY);
 8000f2c:	e78a      	b.n	8000e44 <led_task+0xc>
 8000f2e:	bf00      	nop
 8000f30:	08008640 	.word	0x08008640
 8000f34:	2000086c 	.word	0x2000086c
 8000f38:	080086b8 	.word	0x080086b8
 8000f3c:	080086c0 	.word	0x080086c0
 8000f40:	080086c4 	.word	0x080086c4
 8000f44:	080086c8 	.word	0x080086c8
 8000f48:	080086cc 	.word	0x080086cc
 8000f4c:	2000000c 	.word	0x2000000c
 8000f50:	20000871 	.word	0x20000871
 8000f54:	20000854 	.word	0x20000854

08000f58 <rtc_task>:

	}
}
void rtc_task(void *param)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	while(1)
 8000f60:	e7fe      	b.n	8000f60 <rtc_task+0x8>
	...

08000f64 <print_task>:
	{

	}
}
void print_task(void *param)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <print_task+0x38>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f107 010c 	add.w	r1, r7, #12
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 fe03 	bl	8005b84 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8000f7e:	68fc      	ldr	r4, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f92e 	bl	80001e4 <strlen>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f90:	4621      	mov	r1, r4
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <print_task+0x3c>)
 8000f94:	f002 ffae 	bl	8003ef4 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8000f98:	e7e8      	b.n	8000f6c <print_task+0x8>
 8000f9a:	bf00      	nop
 8000f9c:	2000086c 	.word	0x2000086c
 8000fa0:	20000954 	.word	0x20000954

08000fa4 <cmd_handler_task>:
	}
}
void cmd_handler_task(void *param)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	command_t cmd;

	while(1)
	{
		/* Implement notify wait*/
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f005 ffcf 	bl	8006f58 <xTaskNotifyWait>
 8000fba:	61f8      	str	r0, [r7, #28]
	    /* process the user data(command) stored in input data queue*/
		process_command(&cmd);
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f801 	bl	8000fc8 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000fc6:	e7f1      	b.n	8000fac <cmd_handler_task+0x8>

08000fc8 <process_command>:
	}
}

void process_command(command_t *cmd){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f82f 	bl	8001034 <extract_command>
	switch(curr_state){
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <process_command+0x5c>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b05      	cmp	r3, #5
 8000fdc:	dc1e      	bgt.n	800101c <process_command+0x54>
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	da14      	bge.n	800100c <process_command+0x44>
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <process_command+0x24>
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d008      	beq.n	8000ffc <process_command+0x34>
	case sRtcDateConfig:
	case sRtcReport:
		xTaskNotify(handle_rtc_task, (uint32_t)cmd,eSetValueWithOverwrite );
		break;
	}
}
 8000fea:	e017      	b.n	800101c <process_command+0x54>
		xTaskNotify(handle_menu_task, (uint32_t)cmd,eSetValueWithOverwrite );
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <process_command+0x60>)
 8000fee:	6818      	ldr	r0, [r3, #0]
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	f006 f80f 	bl	8007018 <xTaskGenericNotify>
		break;
 8000ffa:	e00f      	b.n	800101c <process_command+0x54>
		xTaskNotify(handle_led_task, (uint32_t)cmd,eSetValueWithOverwrite );
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <process_command+0x64>)
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	2300      	movs	r3, #0
 8001004:	2203      	movs	r2, #3
 8001006:	f006 f807 	bl	8007018 <xTaskGenericNotify>
		break;
 800100a:	e007      	b.n	800101c <process_command+0x54>
		xTaskNotify(handle_rtc_task, (uint32_t)cmd,eSetValueWithOverwrite );
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <process_command+0x68>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	2300      	movs	r3, #0
 8001014:	2203      	movs	r2, #3
 8001016:	f005 ffff 	bl	8007018 <xTaskGenericNotify>
		break;
 800101a:	bf00      	nop
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000871 	.word	0x20000871
 8001028:	20000854 	.word	0x20000854
 800102c:	20000860 	.word	0x20000860
 8001030:	20000864 	.word	0x20000864

08001034 <extract_command>:

int extract_command(command_t *cmd)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <extract_command+0x70>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f004 feff 	bl	8005e44 <uxQueueMessagesWaiting>
 8001046:	4603      	mov	r3, r0
 8001048:	613b      	str	r3, [r7, #16]
	if (!status)  return -1;
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <extract_command+0x22>
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	e022      	b.n	800109c <extract_command+0x68>
	uint8_t i = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	75fb      	strb	r3, [r7, #23]

	do {
		status = xQueueReceive(q_data,&item, 0);
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <extract_command+0x70>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f107 010f 	add.w	r1, r7, #15
 8001062:	2200      	movs	r2, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f004 fd8d 	bl	8005b84 <xQueueReceive>
 800106a:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d106      	bne.n	8001080 <extract_command+0x4c>
		{
			cmd->payload[i++] = item;
 8001072:	7dfb      	ldrb	r3, [r7, #23]
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	75fa      	strb	r2, [r7, #23]
 8001078:	461a      	mov	r2, r3
 800107a:	7bf9      	ldrb	r1, [r7, #15]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	5499      	strb	r1, [r3, r2]
		}
		} while (item != '\n');
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2b0a      	cmp	r3, #10
 8001084:	d1e9      	bne.n	800105a <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	3b01      	subs	r3, #1
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	2100      	movs	r1, #0
 800108e:	54d1      	strb	r1, [r2, r3]
	cmd->len = i - 1;
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	3b01      	subs	r3, #1
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60da      	str	r2, [r3, #12]
	return 0;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000868 	.word	0x20000868

080010a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_USART2_UART_Init+0x58>)
 80010ae:	4a15      	ldr	r2, [pc, #84]	; (8001104 <MX_USART2_UART_Init+0x5c>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <MX_USART2_UART_Init+0x58>)
 80010b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_USART2_UART_Init+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_USART2_UART_Init+0x58>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_USART2_UART_Init+0x58>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_USART2_UART_Init+0x58>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_USART2_UART_Init+0x58>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_USART2_UART_Init+0x58>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_USART2_UART_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_USART2_UART_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_USART2_UART_Init+0x58>)
 80010ec:	f002 feb4 	bl	8003e58 <HAL_UART_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010f6:	f7ff fc83 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000954 	.word	0x20000954
 8001104:	40004400 	.word	0x40004400

08001108 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <HAL_UART_MspInit+0x8c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d130      	bne.n	800118c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_UART_MspInit+0x90>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <HAL_UART_MspInit+0x90>)
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_UART_MspInit+0x90>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_UART_MspInit+0x90>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	4a14      	ldr	r2, [pc, #80]	; (8001198 <HAL_UART_MspInit+0x90>)
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	6153      	str	r3, [r2, #20]
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_UART_MspInit+0x90>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800115a:	230c      	movs	r3, #12
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800116a:	2307      	movs	r3, #7
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f000 fa30 	bl	80015dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2106      	movs	r1, #6
 8001180:	2026      	movs	r0, #38	; 0x26
 8001182:	f000 f989 	bl	8001498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001186:	2026      	movs	r0, #38	; 0x26
 8001188:	f000 f9a2 	bl	80014d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800118c:	bf00      	nop
 800118e:	3728      	adds	r7, #40	; 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40004400 	.word	0x40004400
 8001198:	40021000 	.word	0x40021000

0800119c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <MX_USB_PCD_Init+0x3c>)
 80011a2:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <MX_USB_PCD_Init+0x40>)
 80011a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_USB_PCD_Init+0x3c>)
 80011a8:	2208      	movs	r2, #8
 80011aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <MX_USB_PCD_Init+0x3c>)
 80011ae:	2202      	movs	r2, #2
 80011b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_USB_PCD_Init+0x3c>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <MX_USB_PCD_Init+0x3c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_USB_PCD_Init+0x3c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_USB_PCD_Init+0x3c>)
 80011c6:	f000 fcc1 	bl	8001b4c <HAL_PCD_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80011d0:	f7ff fc16 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200009d8 	.word	0x200009d8
 80011dc:	40005c00 	.word	0x40005c00

080011e0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a18      	ldr	r2, [pc, #96]	; (8001260 <HAL_PCD_MspInit+0x80>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d129      	bne.n	8001256 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_PCD_MspInit+0x84>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_PCD_MspInit+0x84>)
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	6153      	str	r3, [r2, #20]
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_PCD_MspInit+0x84>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800121a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800122c:	230e      	movs	r3, #14
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123a:	f000 f9cf 	bl	80015dc <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_PCD_MspInit+0x84>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_PCD_MspInit+0x84>)
 8001244:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001248:	61d3      	str	r3, [r2, #28]
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_PCD_MspInit+0x84>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40005c00 	.word	0x40005c00
 8001264:	40021000 	.word	0x40021000

08001268 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800126e:	490e      	ldr	r1, [pc, #56]	; (80012a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001270:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <LoopForever+0xe>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001284:	4c0b      	ldr	r4, [pc, #44]	; (80012b4 <LoopForever+0x16>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001292:	f7ff fd53 	bl	8000d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001296:	f007 f831 	bl	80082fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800129a:	f7ff f9cf 	bl	800063c <main>

0800129e <LoopForever>:

LoopForever:
    b LoopForever
 800129e:	e7fe      	b.n	800129e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012a0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80012ac:	08008788 	.word	0x08008788
  ldr r2, =_sbss
 80012b0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80012b4:	20001b58 	.word	0x20001b58

080012b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC1_2_IRQHandler>
	...

080012bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_Init+0x28>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_Init+0x28>)
 80012c6:	f043 0310 	orr.w	r3, r3, #16
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 f8d8 	bl	8001482 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d2:	200f      	movs	r0, #15
 80012d4:	f7ff fc8e 	bl	8000bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d8:	f7ff fc64 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40022000 	.word	0x40022000

080012e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x20>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_IncTick+0x24>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <HAL_IncTick+0x24>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000014 	.word	0x20000014
 800130c:	20000cc4 	.word	0x20000cc4

08001310 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;  
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_GetTick+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000cc4 	.word	0x20000cc4

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db0b      	blt.n	80013b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	4907      	ldr	r1, [pc, #28]	; (80013c4 <__NVIC_EnableIRQ+0x38>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db0a      	blt.n	80013f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	490c      	ldr	r1, [pc, #48]	; (8001414 <__NVIC_SetPriority+0x4c>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f0:	e00a      	b.n	8001408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4908      	ldr	r1, [pc, #32]	; (8001418 <__NVIC_SetPriority+0x50>)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	3b04      	subs	r3, #4
 8001400:	0112      	lsls	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	440b      	add	r3, r1
 8001406:	761a      	strb	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f1c3 0307 	rsb	r3, r3, #7
 8001436:	2b04      	cmp	r3, #4
 8001438:	bf28      	it	cs
 800143a:	2304      	movcs	r3, #4
 800143c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3304      	adds	r3, #4
 8001442:	2b06      	cmp	r3, #6
 8001444:	d902      	bls.n	800144c <NVIC_EncodePriority+0x30>
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3b03      	subs	r3, #3
 800144a:	e000      	b.n	800144e <NVIC_EncodePriority+0x32>
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43d9      	mvns	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	4313      	orrs	r3, r2
         );
}
 8001476:	4618      	mov	r0, r3
 8001478:	3724      	adds	r7, #36	; 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ff4c 	bl	8001328 <__NVIC_SetPriorityGrouping>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014aa:	f7ff ff61 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80014ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	6978      	ldr	r0, [r7, #20]
 80014b6:	f7ff ffb1 	bl	800141c <NVIC_EncodePriority>
 80014ba:	4602      	mov	r2, r0
 80014bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff80 	bl	80013c8 <__NVIC_SetPriority>
}
 80014c8:	bf00      	nop
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff54 	bl	800138c <__NVIC_EnableIRQ>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d008      	beq.n	8001510 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2204      	movs	r2, #4
 8001502:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e020      	b.n	8001552 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 020e 	bic.w	r2, r2, #14
 800151e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0201 	bic.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001538:	2101      	movs	r1, #1
 800153a:	fa01 f202 	lsl.w	r2, r1, r2
 800153e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800155e:	b580      	push	{r7, lr}
 8001560:	b084      	sub	sp, #16
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001570:	2b02      	cmp	r3, #2
 8001572:	d005      	beq.n	8001580 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2204      	movs	r2, #4
 8001578:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
 800157e:	e027      	b.n	80015d0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 020e 	bic.w	r2, r2, #14
 800158e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a8:	2101      	movs	r1, #1
 80015aa:	fa01 f202 	lsl.w	r2, r1, r2
 80015ae:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	4798      	blx	r3
    } 
  }
  return status;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ea:	e154      	b.n	8001896 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8146 	beq.w	8001890 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d005      	beq.n	800161c <HAL_GPIO_Init+0x40>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d130      	bne.n	800167e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001652:	2201      	movs	r2, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	f003 0201 	and.w	r2, r3, #1
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b03      	cmp	r3, #3
 8001688:	d017      	beq.n	80016ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d123      	bne.n	800170e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	08da      	lsrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3208      	adds	r2, #8
 8001708:	6939      	ldr	r1, [r7, #16]
 800170a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0203 	and.w	r2, r3, #3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80a0 	beq.w	8001890 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001750:	4b58      	ldr	r3, [pc, #352]	; (80018b4 <HAL_GPIO_Init+0x2d8>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a57      	ldr	r2, [pc, #348]	; (80018b4 <HAL_GPIO_Init+0x2d8>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b55      	ldr	r3, [pc, #340]	; (80018b4 <HAL_GPIO_Init+0x2d8>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001768:	4a53      	ldr	r2, [pc, #332]	; (80018b8 <HAL_GPIO_Init+0x2dc>)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	3302      	adds	r3, #2
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001792:	d019      	beq.n	80017c8 <HAL_GPIO_Init+0x1ec>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a49      	ldr	r2, [pc, #292]	; (80018bc <HAL_GPIO_Init+0x2e0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d013      	beq.n	80017c4 <HAL_GPIO_Init+0x1e8>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a48      	ldr	r2, [pc, #288]	; (80018c0 <HAL_GPIO_Init+0x2e4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d00d      	beq.n	80017c0 <HAL_GPIO_Init+0x1e4>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a47      	ldr	r2, [pc, #284]	; (80018c4 <HAL_GPIO_Init+0x2e8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d007      	beq.n	80017bc <HAL_GPIO_Init+0x1e0>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a46      	ldr	r2, [pc, #280]	; (80018c8 <HAL_GPIO_Init+0x2ec>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d101      	bne.n	80017b8 <HAL_GPIO_Init+0x1dc>
 80017b4:	2304      	movs	r3, #4
 80017b6:	e008      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017b8:	2305      	movs	r3, #5
 80017ba:	e006      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017bc:	2303      	movs	r3, #3
 80017be:	e004      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e002      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017c8:	2300      	movs	r3, #0
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	f002 0203 	and.w	r2, r2, #3
 80017d0:	0092      	lsls	r2, r2, #2
 80017d2:	4093      	lsls	r3, r2
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017da:	4937      	ldr	r1, [pc, #220]	; (80018b8 <HAL_GPIO_Init+0x2dc>)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3302      	adds	r3, #2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e8:	4b38      	ldr	r3, [pc, #224]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800180c:	4a2f      	ldr	r2, [pc, #188]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001812:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001836:	4a25      	ldr	r2, [pc, #148]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	43db      	mvns	r3, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001860:	4a1a      	ldr	r2, [pc, #104]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3301      	adds	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f47f aea3 	bne.w	80015ec <HAL_GPIO_Init+0x10>
  }
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40010000 	.word	0x40010000
 80018bc:	48000400 	.word	0x48000400
 80018c0:	48000800 	.word	0x48000800
 80018c4:	48000c00 	.word	0x48000c00
 80018c8:	48001000 	.word	0x48001000
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018ec:	e002      	b.n	80018f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e081      	b.n	8001a16 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d106      	bne.n	800192c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7fe fd7a 	bl	8000420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2224      	movs	r2, #36	; 0x24
 8001930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001950:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001960:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	e006      	b.n	8001988 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001986:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d104      	bne.n	800199a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001998:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69d9      	ldr	r1, [r3, #28]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1a      	ldr	r2, [r3, #32]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2220      	movs	r2, #32
 8001a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b20      	cmp	r3, #32
 8001a32:	d138      	bne.n	8001aa6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e032      	b.n	8001aa8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2224      	movs	r2, #36	; 0x24
 8001a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a70:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6819      	ldr	r1, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0201 	orr.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001aa6:	2302      	movs	r3, #2
  }
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	d139      	bne.n	8001b3e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e033      	b.n	8001b40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2224      	movs	r2, #36	; 0x24
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b06:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e000      	b.n	8001b40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b3e:	2302      	movs	r3, #2
  }
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4e:	b08b      	sub	sp, #44	; 0x2c
 8001b50:	af06      	add	r7, sp, #24
 8001b52:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0d0      	b.n	8001d00 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff fb34 	bl	80011e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f003 fbbc 	bl	8005302 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
 8001b8e:	e04c      	b.n	8001c2a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	7bfa      	ldrb	r2, [r7, #15]
 8001bb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	b298      	uxth	r0, r3
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	3336      	adds	r3, #54	; 0x36
 8001bce:	4602      	mov	r2, r0
 8001bd0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	3303      	adds	r3, #3
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3338      	adds	r3, #56	; 0x38
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	440b      	add	r3, r1
 8001c0a:	333c      	adds	r3, #60	; 0x3c
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	3340      	adds	r3, #64	; 0x40
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	3301      	adds	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d3ad      	bcc.n	8001b90 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e044      	b.n	8001cc4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d3b5      	bcc.n	8001c3a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	687e      	ldr	r6, [r7, #4]
 8001cd6:	466d      	mov	r5, sp
 8001cd8:	f106 0410 	add.w	r4, r6, #16
 8001cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	602b      	str	r3, [r5, #0]
 8001ce4:	1d33      	adds	r3, r6, #4
 8001ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ce8:	6838      	ldr	r0, [r7, #0]
 8001cea:	f003 fb25 	bl	8005338 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d18:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	f001 b823 	b.w	8002d74 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 817d 	beq.w	800203e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d44:	4bbc      	ldr	r3, [pc, #752]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d00c      	beq.n	8001d6a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d50:	4bb9      	ldr	r3, [pc, #740]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d15c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x10e>
 8001d5c:	4bb6      	ldr	r3, [pc, #728]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d68:	d155      	bne.n	8001e16 <HAL_RCC_OscConfig+0x10e>
 8001d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d6e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8001d7e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d102      	bne.n	8001d9c <HAL_RCC_OscConfig+0x94>
 8001d96:	4ba8      	ldr	r3, [pc, #672]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	e015      	b.n	8001dc8 <HAL_RCC_OscConfig+0xc0>
 8001d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001db8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001dc4:	4b9c      	ldr	r3, [pc, #624]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dcc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001dd0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001dd4:	fa92 f2a2 	rbit	r2, r2
 8001dd8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001ddc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001de0:	fab2 f282 	clz	r2, r2
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	f042 0220 	orr.w	r2, r2, #32
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	f002 021f 	and.w	r2, r2, #31
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f202 	lsl.w	r2, r1, r2
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 811f 	beq.w	800203c <HAL_RCC_OscConfig+0x334>
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 8116 	bne.w	800203c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	f000 bfaf 	b.w	8002d74 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x12e>
 8001e28:	4b83      	ldr	r3, [pc, #524]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a82      	ldr	r2, [pc, #520]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e036      	b.n	8001ea4 <HAL_RCC_OscConfig+0x19c>
 8001e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x158>
 8001e46:	4b7c      	ldr	r3, [pc, #496]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a7b      	ldr	r2, [pc, #492]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b79      	ldr	r3, [pc, #484]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a78      	ldr	r2, [pc, #480]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e021      	b.n	8001ea4 <HAL_RCC_OscConfig+0x19c>
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x184>
 8001e72:	4b71      	ldr	r3, [pc, #452]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a70      	ldr	r2, [pc, #448]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b6e      	ldr	r3, [pc, #440]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a6d      	ldr	r2, [pc, #436]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x19c>
 8001e8c:	4b6a      	ldr	r3, [pc, #424]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a69      	ldr	r2, [pc, #420]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b67      	ldr	r3, [pc, #412]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a66      	ldr	r2, [pc, #408]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ea4:	4b64      	ldr	r3, [pc, #400]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	f023 020f 	bic.w	r2, r3, #15
 8001eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	495f      	ldr	r1, [pc, #380]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d059      	beq.n	8001f82 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff fa1f 	bl	8001310 <HAL_GetTick>
 8001ed2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7ff fa1a 	bl	8001310 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b64      	cmp	r3, #100	; 0x64
 8001ee6:	d902      	bls.n	8001eee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	f000 bf43 	b.w	8002d74 <HAL_RCC_OscConfig+0x106c>
 8001eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f02:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	095b      	lsrs	r3, r3, #5
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d102      	bne.n	8001f20 <HAL_RCC_OscConfig+0x218>
 8001f1a:	4b47      	ldr	r3, [pc, #284]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	e015      	b.n	8001f4c <HAL_RCC_OscConfig+0x244>
 8001f20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f24:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f38:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f3c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f48:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f50:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f54:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f58:	fa92 f2a2 	rbit	r2, r2
 8001f5c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f60:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f64:	fab2 f282 	clz	r2, r2
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f042 0220 	orr.w	r2, r2, #32
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	f002 021f 	and.w	r2, r2, #31
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ab      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x1d0>
 8001f80:	e05d      	b.n	800203e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7ff f9c5 	bl	8001310 <HAL_GetTick>
 8001f86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff f9c0 	bl	8001310 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	; 0x64
 8001f9a:	d902      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	f000 bee9 	b.w	8002d74 <HAL_RCC_OscConfig+0x106c>
 8001fa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001fb6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	095b      	lsrs	r3, r3, #5
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d102      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x2cc>
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	e015      	b.n	8002000 <HAL_RCC_OscConfig+0x2f8>
 8001fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ff0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002004:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002008:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800200c:	fa92 f2a2 	rbit	r2, r2
 8002010:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002014:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002018:	fab2 f282 	clz	r2, r2
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	f042 0220 	orr.w	r2, r2, #32
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f002 021f 	and.w	r2, r2, #31
 8002028:	2101      	movs	r1, #1
 800202a:	fa01 f202 	lsl.w	r2, r1, r2
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1ab      	bne.n	8001f8c <HAL_RCC_OscConfig+0x284>
 8002034:	e003      	b.n	800203e <HAL_RCC_OscConfig+0x336>
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 817d 	beq.w	800234e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002054:	4ba6      	ldr	r3, [pc, #664]	; (80022f0 <HAL_RCC_OscConfig+0x5e8>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00b      	beq.n	8002078 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002060:	4ba3      	ldr	r3, [pc, #652]	; (80022f0 <HAL_RCC_OscConfig+0x5e8>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b08      	cmp	r3, #8
 800206a:	d172      	bne.n	8002152 <HAL_RCC_OscConfig+0x44a>
 800206c:	4ba0      	ldr	r3, [pc, #640]	; (80022f0 <HAL_RCC_OscConfig+0x5e8>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d16c      	bne.n	8002152 <HAL_RCC_OscConfig+0x44a>
 8002078:	2302      	movs	r3, #2
 800207a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800208a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <HAL_RCC_OscConfig+0x3a0>
 80020a2:	4b93      	ldr	r3, [pc, #588]	; (80022f0 <HAL_RCC_OscConfig+0x5e8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	e013      	b.n	80020d0 <HAL_RCC_OscConfig+0x3c8>
 80020a8:	2302      	movs	r3, #2
 80020aa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80020ba:	2302      	movs	r3, #2
 80020bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80020cc:	4b88      	ldr	r3, [pc, #544]	; (80022f0 <HAL_RCC_OscConfig+0x5e8>)
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	2202      	movs	r2, #2
 80020d2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80020d6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020da:	fa92 f2a2 	rbit	r2, r2
 80020de:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80020e2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80020e6:	fab2 f282 	clz	r2, r2
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	f042 0220 	orr.w	r2, r2, #32
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	f002 021f 	and.w	r2, r2, #31
 80020f6:	2101      	movs	r1, #1
 80020f8:	fa01 f202 	lsl.w	r2, r1, r2
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_RCC_OscConfig+0x410>
 8002102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d002      	beq.n	8002118 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	f000 be2e 	b.w	8002d74 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002118:	4b75      	ldr	r3, [pc, #468]	; (80022f0 <HAL_RCC_OscConfig+0x5e8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002124:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	21f8      	movs	r1, #248	; 0xf8
 800212e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002136:	fa91 f1a1 	rbit	r1, r1
 800213a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800213e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002142:	fab1 f181 	clz	r1, r1
 8002146:	b2c9      	uxtb	r1, r1
 8002148:	408b      	lsls	r3, r1
 800214a:	4969      	ldr	r1, [pc, #420]	; (80022f0 <HAL_RCC_OscConfig+0x5e8>)
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002150:	e0fd      	b.n	800234e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8088 	beq.w	8002274 <HAL_RCC_OscConfig+0x56c>
 8002164:	2301      	movs	r3, #1
 8002166:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002176:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002184:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	461a      	mov	r2, r3
 800218c:	2301      	movs	r3, #1
 800218e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7ff f8be 	bl	8001310 <HAL_GetTick>
 8002194:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002198:	e00a      	b.n	80021b0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219a:	f7ff f8b9 	bl	8001310 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d902      	bls.n	80021b0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	f000 bde2 	b.w	8002d74 <HAL_RCC_OscConfig+0x106c>
 80021b0:	2302      	movs	r3, #2
 80021b2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80021c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d102      	bne.n	80021e0 <HAL_RCC_OscConfig+0x4d8>
 80021da:	4b45      	ldr	r3, [pc, #276]	; (80022f0 <HAL_RCC_OscConfig+0x5e8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	e013      	b.n	8002208 <HAL_RCC_OscConfig+0x500>
 80021e0:	2302      	movs	r3, #2
 80021e2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021f2:	2302      	movs	r3, #2
 80021f4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002204:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <HAL_RCC_OscConfig+0x5e8>)
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	2202      	movs	r2, #2
 800220a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800220e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002212:	fa92 f2a2 	rbit	r2, r2
 8002216:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800221a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800221e:	fab2 f282 	clz	r2, r2
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	f042 0220 	orr.w	r2, r2, #32
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	f002 021f 	and.w	r2, r2, #31
 800222e:	2101      	movs	r1, #1
 8002230:	fa01 f202 	lsl.w	r2, r1, r2
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0af      	beq.n	800219a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223a:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <HAL_RCC_OscConfig+0x5e8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002246:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	21f8      	movs	r1, #248	; 0xf8
 8002250:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002258:	fa91 f1a1 	rbit	r1, r1
 800225c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002260:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002264:	fab1 f181 	clz	r1, r1
 8002268:	b2c9      	uxtb	r1, r1
 800226a:	408b      	lsls	r3, r1
 800226c:	4920      	ldr	r1, [pc, #128]	; (80022f0 <HAL_RCC_OscConfig+0x5e8>)
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
 8002272:	e06c      	b.n	800234e <HAL_RCC_OscConfig+0x646>
 8002274:	2301      	movs	r3, #1
 8002276:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002286:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002294:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	461a      	mov	r2, r3
 800229c:	2300      	movs	r3, #0
 800229e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff f836 	bl	8001310 <HAL_GetTick>
 80022a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a8:	e00a      	b.n	80022c0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022aa:	f7ff f831 	bl	8001310 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d902      	bls.n	80022c0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	f000 bd5a 	b.w	8002d74 <HAL_RCC_OscConfig+0x106c>
 80022c0:	2302      	movs	r3, #2
 80022c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80022d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	095b      	lsrs	r3, r3, #5
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d104      	bne.n	80022f4 <HAL_RCC_OscConfig+0x5ec>
 80022ea:	4b01      	ldr	r3, [pc, #4]	; (80022f0 <HAL_RCC_OscConfig+0x5e8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	e015      	b.n	800231c <HAL_RCC_OscConfig+0x614>
 80022f0:	40021000 	.word	0x40021000
 80022f4:	2302      	movs	r3, #2
 80022f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002306:	2302      	movs	r3, #2
 8002308:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800230c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002318:	4bc8      	ldr	r3, [pc, #800]	; (800263c <HAL_RCC_OscConfig+0x934>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	2202      	movs	r2, #2
 800231e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002322:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002326:	fa92 f2a2 	rbit	r2, r2
 800232a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800232e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002332:	fab2 f282 	clz	r2, r2
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	f042 0220 	orr.w	r2, r2, #32
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	f002 021f 	and.w	r2, r2, #31
 8002342:	2101      	movs	r1, #1
 8002344:	fa01 f202 	lsl.w	r2, r1, r2
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ad      	bne.n	80022aa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002352:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8110 	beq.w	8002584 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002368:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d079      	beq.n	8002468 <HAL_RCC_OscConfig+0x760>
 8002374:	2301      	movs	r3, #1
 8002376:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	4bab      	ldr	r3, [pc, #684]	; (8002640 <HAL_RCC_OscConfig+0x938>)
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	461a      	mov	r2, r3
 800239a:	2301      	movs	r3, #1
 800239c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239e:	f7fe ffb7 	bl	8001310 <HAL_GetTick>
 80023a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	e00a      	b.n	80023be <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a8:	f7fe ffb2 	bl	8001310 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d902      	bls.n	80023be <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	f000 bcdb 	b.w	8002d74 <HAL_RCC_OscConfig+0x106c>
 80023be:	2302      	movs	r3, #2
 80023c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023d8:	2202      	movs	r2, #2
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fa93 f2a3 	rbit	r2, r3
 80023ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023fc:	2202      	movs	r2, #2
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	fa93 f2a3 	rbit	r2, r3
 800240e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002412:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002416:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002418:	4b88      	ldr	r3, [pc, #544]	; (800263c <HAL_RCC_OscConfig+0x934>)
 800241a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800241c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002420:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002424:	2102      	movs	r1, #2
 8002426:	6019      	str	r1, [r3, #0]
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	fa93 f1a3 	rbit	r1, r3
 8002436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800243e:	6019      	str	r1, [r3, #0]
  return result;
 8002440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002444:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	2101      	movs	r1, #1
 800245c:	fa01 f303 	lsl.w	r3, r1, r3
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0a0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x6a0>
 8002466:	e08d      	b.n	8002584 <HAL_RCC_OscConfig+0x87c>
 8002468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002470:	2201      	movs	r2, #1
 8002472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002478:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	fa93 f2a3 	rbit	r2, r3
 8002482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002486:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800248a:	601a      	str	r2, [r3, #0]
  return result;
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002494:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	4b68      	ldr	r3, [pc, #416]	; (8002640 <HAL_RCC_OscConfig+0x938>)
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	461a      	mov	r2, r3
 80024a6:	2300      	movs	r3, #0
 80024a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7fe ff31 	bl	8001310 <HAL_GetTick>
 80024ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b4:	f7fe ff2c 	bl	8001310 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d902      	bls.n	80024ca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	f000 bc55 	b.w	8002d74 <HAL_RCC_OscConfig+0x106c>
 80024ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024d2:	2202      	movs	r2, #2
 80024d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	fa93 f2a3 	rbit	r2, r3
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024f6:	2202      	movs	r2, #2
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fa93 f2a3 	rbit	r2, r3
 8002508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800251a:	2202      	movs	r2, #2
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002530:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002534:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <HAL_RCC_OscConfig+0x934>)
 8002538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002542:	2102      	movs	r1, #2
 8002544:	6019      	str	r1, [r3, #0]
 8002546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f1a3 	rbit	r1, r3
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800255c:	6019      	str	r1, [r3, #0]
  return result;
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	2101      	movs	r1, #1
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d197      	bne.n	80024b4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002588:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 81a1 	beq.w	80028dc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a0:	4b26      	ldr	r3, [pc, #152]	; (800263c <HAL_RCC_OscConfig+0x934>)
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d116      	bne.n	80025da <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ac:	4b23      	ldr	r3, [pc, #140]	; (800263c <HAL_RCC_OscConfig+0x934>)
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	4a22      	ldr	r2, [pc, #136]	; (800263c <HAL_RCC_OscConfig+0x934>)
 80025b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b6:	61d3      	str	r3, [r2, #28]
 80025b8:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_RCC_OscConfig+0x934>)
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025d2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <HAL_RCC_OscConfig+0x93c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d11a      	bne.n	800261c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e6:	4b17      	ldr	r3, [pc, #92]	; (8002644 <HAL_RCC_OscConfig+0x93c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a16      	ldr	r2, [pc, #88]	; (8002644 <HAL_RCC_OscConfig+0x93c>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f2:	f7fe fe8d 	bl	8001310 <HAL_GetTick>
 80025f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	e009      	b.n	8002610 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fc:	f7fe fe88 	bl	8001310 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b64      	cmp	r3, #100	; 0x64
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e3b1      	b.n	8002d74 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <HAL_RCC_OscConfig+0x93c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ef      	beq.n	80025fc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800261c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002620:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d10d      	bne.n	8002648 <HAL_RCC_OscConfig+0x940>
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <HAL_RCC_OscConfig+0x934>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4a02      	ldr	r2, [pc, #8]	; (800263c <HAL_RCC_OscConfig+0x934>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6213      	str	r3, [r2, #32]
 8002638:	e03c      	b.n	80026b4 <HAL_RCC_OscConfig+0x9ac>
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	10908120 	.word	0x10908120
 8002644:	40007000 	.word	0x40007000
 8002648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10c      	bne.n	8002672 <HAL_RCC_OscConfig+0x96a>
 8002658:	4bc1      	ldr	r3, [pc, #772]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4ac0      	ldr	r2, [pc, #768]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	4bbe      	ldr	r3, [pc, #760]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4abd      	ldr	r2, [pc, #756]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 800266a:	f023 0304 	bic.w	r3, r3, #4
 800266e:	6213      	str	r3, [r2, #32]
 8002670:	e020      	b.n	80026b4 <HAL_RCC_OscConfig+0x9ac>
 8002672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002676:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2b05      	cmp	r3, #5
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0x994>
 8002682:	4bb7      	ldr	r3, [pc, #732]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	4ab6      	ldr	r2, [pc, #728]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 8002688:	f043 0304 	orr.w	r3, r3, #4
 800268c:	6213      	str	r3, [r2, #32]
 800268e:	4bb4      	ldr	r3, [pc, #720]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	4ab3      	ldr	r2, [pc, #716]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6213      	str	r3, [r2, #32]
 800269a:	e00b      	b.n	80026b4 <HAL_RCC_OscConfig+0x9ac>
 800269c:	4bb0      	ldr	r3, [pc, #704]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4aaf      	ldr	r2, [pc, #700]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	6213      	str	r3, [r2, #32]
 80026a8:	4bad      	ldr	r3, [pc, #692]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4aac      	ldr	r2, [pc, #688]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 80026ae:	f023 0304 	bic.w	r3, r3, #4
 80026b2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8081 	beq.w	80027c8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c6:	f7fe fe23 	bl	8001310 <HAL_GetTick>
 80026ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ce:	e00b      	b.n	80026e8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7fe fe1e 	bl	8001310 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e345      	b.n	8002d74 <HAL_RCC_OscConfig+0x106c>
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026f0:	2202      	movs	r2, #2
 80026f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	fa93 f2a3 	rbit	r2, r3
 8002702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002706:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002714:	2202      	movs	r2, #2
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	fa93 f2a3 	rbit	r2, r3
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800272e:	601a      	str	r2, [r3, #0]
  return result;
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002738:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d102      	bne.n	8002754 <HAL_RCC_OscConfig+0xa4c>
 800274e:	4b84      	ldr	r3, [pc, #528]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	e013      	b.n	800277c <HAL_RCC_OscConfig+0xa74>
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800275c:	2202      	movs	r2, #2
 800275e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002764:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	fa93 f2a3 	rbit	r2, r3
 800276e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002772:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	4b79      	ldr	r3, [pc, #484]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002780:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002784:	2102      	movs	r1, #2
 8002786:	6011      	str	r1, [r2, #0]
 8002788:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800278c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	fa92 f1a2 	rbit	r1, r2
 8002796:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800279a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800279e:	6011      	str	r1, [r2, #0]
  return result;
 80027a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027a4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	fab2 f282 	clz	r2, r2
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	f002 021f 	and.w	r2, r2, #31
 80027ba:	2101      	movs	r1, #1
 80027bc:	fa01 f202 	lsl.w	r2, r1, r2
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d084      	beq.n	80026d0 <HAL_RCC_OscConfig+0x9c8>
 80027c6:	e07f      	b.n	80028c8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c8:	f7fe fda2 	bl	8001310 <HAL_GetTick>
 80027cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d0:	e00b      	b.n	80027ea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fe fd9d 	bl	8001310 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e2c4      	b.n	8002d74 <HAL_RCC_OscConfig+0x106c>
 80027ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027f2:	2202      	movs	r2, #2
 80027f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	fa93 f2a3 	rbit	r2, r3
 8002804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002808:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002816:	2202      	movs	r2, #2
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	fa93 f2a3 	rbit	r2, r3
 8002828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002830:	601a      	str	r2, [r3, #0]
  return result;
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800283a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283c:	fab3 f383 	clz	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	b2db      	uxtb	r3, r3
 8002846:	f043 0302 	orr.w	r3, r3, #2
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d102      	bne.n	8002856 <HAL_RCC_OscConfig+0xb4e>
 8002850:	4b43      	ldr	r3, [pc, #268]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	e013      	b.n	800287e <HAL_RCC_OscConfig+0xb76>
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800285e:	2202      	movs	r2, #2
 8002860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002866:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	fa93 f2a3 	rbit	r2, r3
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	4b39      	ldr	r3, [pc, #228]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002882:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002886:	2102      	movs	r1, #2
 8002888:	6011      	str	r1, [r2, #0]
 800288a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800288e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	fa92 f1a2 	rbit	r1, r2
 8002898:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800289c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028a0:	6011      	str	r1, [r2, #0]
  return result;
 80028a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028a6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	fab2 f282 	clz	r2, r2
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	f002 021f 	and.w	r2, r2, #31
 80028bc:	2101      	movs	r1, #1
 80028be:	fa01 f202 	lsl.w	r2, r1, r2
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d184      	bne.n	80027d2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d105      	bne.n	80028dc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d0:	4b23      	ldr	r3, [pc, #140]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	4a22      	ldr	r2, [pc, #136]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 80028d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8242 	beq.w	8002d72 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <HAL_RCC_OscConfig+0xc58>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	f000 8213 	beq.w	8002d22 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	2b02      	cmp	r3, #2
 800290a:	f040 8162 	bne.w	8002bd2 <HAL_RCC_OscConfig+0xeca>
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002916:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800291a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002920:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	fa93 f2a3 	rbit	r2, r3
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002932:	601a      	str	r2, [r3, #0]
  return result;
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800293c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002948:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	461a      	mov	r2, r3
 8002950:	2300      	movs	r3, #0
 8002952:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe fcdc 	bl	8001310 <HAL_GetTick>
 8002958:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295c:	e00c      	b.n	8002978 <HAL_RCC_OscConfig+0xc70>
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002964:	f7fe fcd4 	bl	8001310 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e1fd      	b.n	8002d74 <HAL_RCC_OscConfig+0x106c>
 8002978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	fa93 f2a3 	rbit	r2, r3
 8002994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002998:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800299c:	601a      	str	r2, [r3, #0]
  return result;
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d102      	bne.n	80029c2 <HAL_RCC_OscConfig+0xcba>
 80029bc:	4bb0      	ldr	r3, [pc, #704]	; (8002c80 <HAL_RCC_OscConfig+0xf78>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	e027      	b.n	8002a12 <HAL_RCC_OscConfig+0xd0a>
 80029c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	fa93 f2a3 	rbit	r2, r3
 80029de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	fa93 f2a3 	rbit	r2, r3
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	4b9c      	ldr	r3, [pc, #624]	; (8002c80 <HAL_RCC_OscConfig+0xf78>)
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a16:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a1a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a1e:	6011      	str	r1, [r2, #0]
 8002a20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a24:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	fa92 f1a2 	rbit	r1, r2
 8002a2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a32:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a36:	6011      	str	r1, [r2, #0]
  return result;
 8002a38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a3c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	fab2 f282 	clz	r2, r2
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	f042 0220 	orr.w	r2, r2, #32
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	f002 021f 	and.w	r2, r2, #31
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f202 	lsl.w	r2, r1, r2
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d182      	bne.n	8002964 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a5e:	4b88      	ldr	r3, [pc, #544]	; (8002c80 <HAL_RCC_OscConfig+0xf78>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	497f      	ldr	r1, [pc, #508]	; (8002c80 <HAL_RCC_OscConfig+0xf78>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
 8002a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	fa93 f2a3 	rbit	r2, r3
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002aaa:	601a      	str	r2, [r3, #0]
  return result;
 8002aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ab4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ac0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2301      	movs	r3, #1
 8002aca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fe fc20 	bl	8001310 <HAL_GetTick>
 8002ad0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad4:	e009      	b.n	8002aea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad6:	f7fe fc1b 	bl	8001310 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e144      	b.n	8002d74 <HAL_RCC_OscConfig+0x106c>
 8002aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002af2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	fa93 f2a3 	rbit	r2, r3
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b0e:	601a      	str	r2, [r3, #0]
  return result;
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d102      	bne.n	8002b34 <HAL_RCC_OscConfig+0xe2c>
 8002b2e:	4b54      	ldr	r3, [pc, #336]	; (8002c80 <HAL_RCC_OscConfig+0xf78>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	e027      	b.n	8002b84 <HAL_RCC_OscConfig+0xe7c>
 8002b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b38:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b46:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	fa93 f2a3 	rbit	r2, r3
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	fa93 f2a3 	rbit	r2, r3
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <HAL_RCC_OscConfig+0xf78>)
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b88:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b90:	6011      	str	r1, [r2, #0]
 8002b92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b96:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	fa92 f1a2 	rbit	r1, r2
 8002ba0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ba4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ba8:	6011      	str	r1, [r2, #0]
  return result;
 8002baa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	fab2 f282 	clz	r2, r2
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	f042 0220 	orr.w	r2, r2, #32
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	f002 021f 	and.w	r2, r2, #31
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d082      	beq.n	8002ad6 <HAL_RCC_OscConfig+0xdce>
 8002bd0:	e0cf      	b.n	8002d72 <HAL_RCC_OscConfig+0x106a>
 8002bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002bda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	fa93 f2a3 	rbit	r2, r3
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002bf6:	601a      	str	r2, [r3, #0]
  return result;
 8002bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c00:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	461a      	mov	r2, r3
 8002c14:	2300      	movs	r3, #0
 8002c16:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7fe fb7a 	bl	8001310 <HAL_GetTick>
 8002c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c20:	e009      	b.n	8002c36 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c22:	f7fe fb75 	bl	8001310 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e09e      	b.n	8002d74 <HAL_RCC_OscConfig+0x106c>
 8002c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c48:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	fa93 f2a3 	rbit	r2, r3
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c5a:	601a      	str	r2, [r3, #0]
  return result;
 8002c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c60:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d104      	bne.n	8002c84 <HAL_RCC_OscConfig+0xf7c>
 8002c7a:	4b01      	ldr	r3, [pc, #4]	; (8002c80 <HAL_RCC_OscConfig+0xf78>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	e029      	b.n	8002cd4 <HAL_RCC_OscConfig+0xfcc>
 8002c80:	40021000 	.word	0x40021000
 8002c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c88:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c96:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	fa93 f2a3 	rbit	r2, r3
 8002ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	fa93 f2a3 	rbit	r2, r3
 8002cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	4b2b      	ldr	r3, [pc, #172]	; (8002d80 <HAL_RCC_OscConfig+0x1078>)
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cd8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002cdc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ce0:	6011      	str	r1, [r2, #0]
 8002ce2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ce6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	fa92 f1a2 	rbit	r1, r2
 8002cf0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cf4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002cf8:	6011      	str	r1, [r2, #0]
  return result;
 8002cfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cfe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	fab2 f282 	clz	r2, r2
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	f042 0220 	orr.w	r2, r2, #32
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	f002 021f 	and.w	r2, r2, #31
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d180      	bne.n	8002c22 <HAL_RCC_OscConfig+0xf1a>
 8002d20:	e027      	b.n	8002d72 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e01e      	b.n	8002d74 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d36:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <HAL_RCC_OscConfig+0x1078>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d42:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d10b      	bne.n	8002d6e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000

08002d84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b09e      	sub	sp, #120	; 0x78
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e162      	b.n	8003062 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b90      	ldr	r3, [pc, #576]	; (8002fe0 <HAL_RCC_ClockConfig+0x25c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d910      	bls.n	8002dcc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b8d      	ldr	r3, [pc, #564]	; (8002fe0 <HAL_RCC_ClockConfig+0x25c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 0207 	bic.w	r2, r3, #7
 8002db2:	498b      	ldr	r1, [pc, #556]	; (8002fe0 <HAL_RCC_ClockConfig+0x25c>)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b89      	ldr	r3, [pc, #548]	; (8002fe0 <HAL_RCC_ClockConfig+0x25c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e14a      	b.n	8003062 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd8:	4b82      	ldr	r3, [pc, #520]	; (8002fe4 <HAL_RCC_ClockConfig+0x260>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	497f      	ldr	r1, [pc, #508]	; (8002fe4 <HAL_RCC_ClockConfig+0x260>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80dc 	beq.w	8002fb0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d13c      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xf6>
 8002e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e04:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d102      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xa6>
 8002e24:	4b6f      	ldr	r3, [pc, #444]	; (8002fe4 <HAL_RCC_ClockConfig+0x260>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	e00f      	b.n	8002e4a <HAL_RCC_ClockConfig+0xc6>
 8002e2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	667b      	str	r3, [r7, #100]	; 0x64
 8002e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8002e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e46:	4b67      	ldr	r3, [pc, #412]	; (8002fe4 <HAL_RCC_ClockConfig+0x260>)
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e52:	fa92 f2a2 	rbit	r2, r2
 8002e56:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e5a:	fab2 f282 	clz	r2, r2
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	f042 0220 	orr.w	r2, r2, #32
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	f002 021f 	and.w	r2, r2, #31
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d17b      	bne.n	8002f6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0f3      	b.n	8003062 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d13c      	bne.n	8002efc <HAL_RCC_ClockConfig+0x178>
 8002e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d102      	bne.n	8002eac <HAL_RCC_ClockConfig+0x128>
 8002ea6:	4b4f      	ldr	r3, [pc, #316]	; (8002fe4 <HAL_RCC_ClockConfig+0x260>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	e00f      	b.n	8002ecc <HAL_RCC_ClockConfig+0x148>
 8002eac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eb0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8002eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8002ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec8:	4b46      	ldr	r3, [pc, #280]	; (8002fe4 <HAL_RCC_ClockConfig+0x260>)
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ed0:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ed4:	fa92 f2a2 	rbit	r2, r2
 8002ed8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002eda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002edc:	fab2 f282 	clz	r2, r2
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	f042 0220 	orr.w	r2, r2, #32
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	f002 021f 	and.w	r2, r2, #31
 8002eec:	2101      	movs	r1, #1
 8002eee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d13a      	bne.n	8002f6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0b2      	b.n	8003062 <HAL_RCC_ClockConfig+0x2de>
 8002efc:	2302      	movs	r3, #2
 8002efe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d102      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x1a0>
 8002f1e:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <HAL_RCC_ClockConfig+0x260>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	e00d      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1bc>
 8002f24:	2302      	movs	r3, #2
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f30:	2302      	movs	r3, #2
 8002f32:	623b      	str	r3, [r7, #32]
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <HAL_RCC_ClockConfig+0x260>)
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	2202      	movs	r2, #2
 8002f42:	61ba      	str	r2, [r7, #24]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	fa92 f2a2 	rbit	r2, r2
 8002f4a:	617a      	str	r2, [r7, #20]
  return result;
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	fab2 f282 	clz	r2, r2
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	f042 0220 	orr.w	r2, r2, #32
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	f002 021f 	and.w	r2, r2, #31
 8002f5e:	2101      	movs	r1, #1
 8002f60:	fa01 f202 	lsl.w	r2, r1, r2
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e079      	b.n	8003062 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <HAL_RCC_ClockConfig+0x260>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f023 0203 	bic.w	r2, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	491a      	ldr	r1, [pc, #104]	; (8002fe4 <HAL_RCC_ClockConfig+0x260>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f80:	f7fe f9c6 	bl	8001310 <HAL_GetTick>
 8002f84:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f88:	f7fe f9c2 	bl	8001310 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e061      	b.n	8003062 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_RCC_ClockConfig+0x260>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 020c 	and.w	r2, r3, #12
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d1eb      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_RCC_ClockConfig+0x25c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d214      	bcs.n	8002fe8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <HAL_RCC_ClockConfig+0x25c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 0207 	bic.w	r2, r3, #7
 8002fc6:	4906      	ldr	r1, [pc, #24]	; (8002fe0 <HAL_RCC_ClockConfig+0x25c>)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <HAL_RCC_ClockConfig+0x25c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e040      	b.n	8003062 <HAL_RCC_ClockConfig+0x2de>
 8002fe0:	40022000 	.word	0x40022000
 8002fe4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_RCC_ClockConfig+0x2e8>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	491a      	ldr	r1, [pc, #104]	; (800306c <HAL_RCC_ClockConfig+0x2e8>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003012:	4b16      	ldr	r3, [pc, #88]	; (800306c <HAL_RCC_ClockConfig+0x2e8>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4912      	ldr	r1, [pc, #72]	; (800306c <HAL_RCC_ClockConfig+0x2e8>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003026:	f000 f829 	bl	800307c <HAL_RCC_GetSysClockFreq>
 800302a:	4601      	mov	r1, r0
 800302c:	4b0f      	ldr	r3, [pc, #60]	; (800306c <HAL_RCC_ClockConfig+0x2e8>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003034:	22f0      	movs	r2, #240	; 0xf0
 8003036:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	fa92 f2a2 	rbit	r2, r2
 800303e:	60fa      	str	r2, [r7, #12]
  return result;
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	fab2 f282 	clz	r2, r2
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	40d3      	lsrs	r3, r2
 800304a:	4a09      	ldr	r2, [pc, #36]	; (8003070 <HAL_RCC_ClockConfig+0x2ec>)
 800304c:	5cd3      	ldrb	r3, [r2, r3]
 800304e:	fa21 f303 	lsr.w	r3, r1, r3
 8003052:	4a08      	ldr	r2, [pc, #32]	; (8003074 <HAL_RCC_ClockConfig+0x2f0>)
 8003054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_RCC_ClockConfig+0x2f4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fdca 	bl	8000bf4 <HAL_InitTick>
  
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3778      	adds	r7, #120	; 0x78
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	080086e8 	.word	0x080086e8
 8003074:	20000008 	.word	0x20000008
 8003078:	20000010 	.word	0x20000010

0800307c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	b08b      	sub	sp, #44	; 0x2c
 8003080:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	2300      	movs	r3, #0
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003096:	4b29      	ldr	r3, [pc, #164]	; (800313c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d002      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x30>
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d003      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x36>
 80030aa:	e03c      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030ac:	4b24      	ldr	r3, [pc, #144]	; (8003140 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030ae:	623b      	str	r3, [r7, #32]
      break;
 80030b0:	e03c      	b.n	800312c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80030b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80030bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	fa92 f2a2 	rbit	r2, r2
 80030c4:	607a      	str	r2, [r7, #4]
  return result;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	fab2 f282 	clz	r2, r2
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	40d3      	lsrs	r3, r2
 80030d0:	4a1c      	ldr	r2, [pc, #112]	; (8003144 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80030d6:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_RCC_GetSysClockFreq+0xc0>)
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	220f      	movs	r2, #15
 80030e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	fa92 f2a2 	rbit	r2, r2
 80030e8:	60fa      	str	r2, [r7, #12]
  return result;
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	fab2 f282 	clz	r2, r2
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	40d3      	lsrs	r3, r2
 80030f4:	4a14      	ldr	r2, [pc, #80]	; (8003148 <HAL_RCC_GetSysClockFreq+0xcc>)
 80030f6:	5cd3      	ldrb	r3, [r2, r3]
 80030f8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003104:	4a0e      	ldr	r2, [pc, #56]	; (8003140 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	fbb2 f2f3 	udiv	r2, r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
 8003114:	e004      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	4a0c      	ldr	r2, [pc, #48]	; (800314c <HAL_RCC_GetSysClockFreq+0xd0>)
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	623b      	str	r3, [r7, #32]
      break;
 8003124:	e002      	b.n	800312c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003128:	623b      	str	r3, [r7, #32]
      break;
 800312a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800312c:	6a3b      	ldr	r3, [r7, #32]
}
 800312e:	4618      	mov	r0, r3
 8003130:	372c      	adds	r7, #44	; 0x2c
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
 8003140:	007a1200 	.word	0x007a1200
 8003144:	08008700 	.word	0x08008700
 8003148:	08008710 	.word	0x08008710
 800314c:	003d0900 	.word	0x003d0900

08003150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <HAL_RCC_GetHCLKFreq+0x14>)
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000008 	.word	0x20000008

08003168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800316e:	f7ff ffef 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8003172:	4601      	mov	r1, r0
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800317c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003180:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	fa92 f2a2 	rbit	r2, r2
 8003188:	603a      	str	r2, [r7, #0]
  return result;
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	fab2 f282 	clz	r2, r2
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	40d3      	lsrs	r3, r2
 8003194:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003196:	5cd3      	ldrb	r3, [r2, r3]
 8003198:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000
 80031a8:	080086f8 	.word	0x080086f8

080031ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80031b2:	f7ff ffcd 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 80031b6:	4601      	mov	r1, r0
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80031c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80031c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	fa92 f2a2 	rbit	r2, r2
 80031cc:	603a      	str	r2, [r7, #0]
  return result;
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	fab2 f282 	clz	r2, r2
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	40d3      	lsrs	r3, r2
 80031d8:	4a04      	ldr	r2, [pc, #16]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x40>)
 80031da:	5cd3      	ldrb	r3, [r2, r3]
 80031dc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	080086f8 	.word	0x080086f8

080031f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	220f      	movs	r2, #15
 80031fe:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003200:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_RCC_GetClockConfig+0x5c>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0203 	and.w	r2, r3, #3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <HAL_RCC_GetClockConfig+0x5c>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <HAL_RCC_GetClockConfig+0x5c>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003224:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_RCC_GetClockConfig+0x5c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	08db      	lsrs	r3, r3, #3
 800322a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003232:	4b07      	ldr	r3, [pc, #28]	; (8003250 <HAL_RCC_GetClockConfig+0x60>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0207 	and.w	r2, r3, #7
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	601a      	str	r2, [r3, #0]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
 8003250:	40022000 	.word	0x40022000

08003254 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b092      	sub	sp, #72	; 0x48
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003264:	2300      	movs	r3, #0
 8003266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80d4 	beq.w	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003278:	4b4e      	ldr	r3, [pc, #312]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10e      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003284:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	4a4a      	ldr	r2, [pc, #296]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328e:	61d3      	str	r3, [r2, #28]
 8003290:	4b48      	ldr	r3, [pc, #288]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b45      	ldr	r3, [pc, #276]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ae:	4b42      	ldr	r3, [pc, #264]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a41      	ldr	r2, [pc, #260]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fe f829 	bl	8001310 <HAL_GetTick>
 80032be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7fe f825 	bl	8001310 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b64      	cmp	r3, #100	; 0x64
 80032ce:	d901      	bls.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e169      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	4b38      	ldr	r3, [pc, #224]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032e0:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8084 	beq.w	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d07c      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003300:	4b2c      	ldr	r3, [pc, #176]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800330a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	4b26      	ldr	r3, [pc, #152]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	461a      	mov	r2, r3
 800332a:	2301      	movs	r3, #1
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003332:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800333c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	461a      	mov	r2, r3
 800334e:	2300      	movs	r3, #0
 8003350:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003352:	4a18      	ldr	r2, [pc, #96]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003356:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d04b      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fd ffd5 	bl	8001310 <HAL_GetTick>
 8003366:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003368:	e00a      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336a:	f7fd ffd1 	bl	8001310 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f241 3288 	movw	r2, #5000	; 0x1388
 8003378:	4293      	cmp	r3, r2
 800337a:	d901      	bls.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e113      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003380:	2302      	movs	r3, #2
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
 800338c:	2302      	movs	r3, #2
 800338e:	623b      	str	r3, [r7, #32]
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	61fb      	str	r3, [r7, #28]
  return result;
 8003398:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d108      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80033ae:	4b01      	ldr	r3, [pc, #4]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	e00d      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40007000 	.word	0x40007000
 80033bc:	10908100 	.word	0x10908100
 80033c0:	2302      	movs	r3, #2
 80033c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	4b78      	ldr	r3, [pc, #480]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2202      	movs	r2, #2
 80033d2:	613a      	str	r2, [r7, #16]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	fa92 f2a2 	rbit	r2, r2
 80033da:	60fa      	str	r2, [r7, #12]
  return result;
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	fab2 f282 	clz	r2, r2
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	f002 021f 	and.w	r2, r2, #31
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f202 	lsl.w	r2, r1, r2
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0b7      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033fa:	4b6d      	ldr	r3, [pc, #436]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	496a      	ldr	r1, [pc, #424]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003408:	4313      	orrs	r3, r2
 800340a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800340c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003414:	4b66      	ldr	r3, [pc, #408]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	4a65      	ldr	r2, [pc, #404]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800341a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800342c:	4b60      	ldr	r3, [pc, #384]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	f023 0203 	bic.w	r2, r3, #3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	495d      	ldr	r1, [pc, #372]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800343a:	4313      	orrs	r3, r2
 800343c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800344a:	4b59      	ldr	r3, [pc, #356]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4956      	ldr	r1, [pc, #344]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003458:	4313      	orrs	r3, r2
 800345a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003468:	4b51      	ldr	r3, [pc, #324]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	494e      	ldr	r1, [pc, #312]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003476:	4313      	orrs	r3, r2
 8003478:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003486:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f023 0210 	bic.w	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	4947      	ldr	r1, [pc, #284]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003494:	4313      	orrs	r3, r2
 8003496:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80034a4:	4b42      	ldr	r3, [pc, #264]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	493f      	ldr	r1, [pc, #252]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d008      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034c2:	4b3b      	ldr	r3, [pc, #236]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f023 0220 	bic.w	r2, r3, #32
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4938      	ldr	r1, [pc, #224]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034e0:	4b33      	ldr	r3, [pc, #204]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	4930      	ldr	r1, [pc, #192]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034fe:	4b2c      	ldr	r3, [pc, #176]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	4929      	ldr	r1, [pc, #164]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800350c:	4313      	orrs	r3, r2
 800350e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800351c:	4b24      	ldr	r3, [pc, #144]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	4921      	ldr	r1, [pc, #132]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800352a:	4313      	orrs	r3, r2
 800352c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d008      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800353a:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	491a      	ldr	r1, [pc, #104]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003548:	4313      	orrs	r3, r2
 800354a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003558:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	4912      	ldr	r1, [pc, #72]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003566:	4313      	orrs	r3, r2
 8003568:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003576:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	490b      	ldr	r1, [pc, #44]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003584:	4313      	orrs	r3, r2
 8003586:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a0:	4903      	ldr	r1, [pc, #12]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3748      	adds	r7, #72	; 0x48
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40021000 	.word	0x40021000

080035b4 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e083      	b.n	80036ce <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7f5b      	ldrb	r3, [r3, #29]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd fa3e 	bl	8000a58 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	22ca      	movs	r2, #202	; 0xca
 80035e8:	625a      	str	r2, [r3, #36]	; 0x24
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2253      	movs	r2, #83	; 0x53
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f897 	bl	8003726 <RTC_EnterInitMode>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d008      	beq.n	8003610 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	22ff      	movs	r2, #255	; 0xff
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2204      	movs	r2, #4
 800360a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e05e      	b.n	80036ce <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800361e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003622:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6899      	ldr	r1, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68d2      	ldr	r2, [r2, #12]
 800364a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6919      	ldr	r1, [r3, #16]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	041a      	lsls	r2, r3, #16
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800366e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10e      	bne.n	800369c <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f829 	bl	80036d6 <HAL_RTC_WaitForSynchro>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d008      	beq.n	800369c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	22ff      	movs	r2, #255	; 0xff
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2204      	movs	r2, #4
 8003696:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e018      	b.n	80036ce <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	22ff      	movs	r2, #255	; 0xff
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80036cc:	2300      	movs	r3, #0
  }
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036f0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80036f2:	f7fd fe0d 	bl	8001310 <HAL_GetTick>
 80036f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80036f8:	e009      	b.n	800370e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036fa:	f7fd fe09 	bl	8001310 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003708:	d901      	bls.n	800370e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e007      	b.n	800371e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0ee      	beq.n	80036fa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d119      	bne.n	8003774 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f04f 32ff 	mov.w	r2, #4294967295
 8003748:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800374a:	f7fd fde1 	bl	8001310 <HAL_GetTick>
 800374e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003750:	e009      	b.n	8003766 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003752:	f7fd fddd 	bl	8001310 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003760:	d901      	bls.n	8003766 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e007      	b.n	8003776 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ee      	beq.n	8003752 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e09d      	b.n	80038cc <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d108      	bne.n	80037aa <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a0:	d009      	beq.n	80037b6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	61da      	str	r2, [r3, #28]
 80037a8:	e005      	b.n	80037b6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d106      	bne.n	80037d6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7fd f9a5 	bl	8000b20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2202      	movs	r2, #2
 80037da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ec:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037f6:	d902      	bls.n	80037fe <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e002      	b.n	8003804 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003802:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800380c:	d007      	beq.n	800381e <HAL_SPI_Init+0xa0>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003816:	d002      	beq.n	800381e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003860:	ea42 0103 	orr.w	r1, r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	0c1b      	lsrs	r3, r3, #16
 800387a:	f003 0204 	and.w	r2, r3, #4
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800389a:	ea42 0103 	orr.w	r1, r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e049      	b.n	800397a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f841 	bl	8003982 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	4619      	mov	r1, r3
 8003912:	4610      	mov	r0, r2
 8003914:	f000 f9f2 	bl	8003cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d001      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e04a      	b.n	8003a46 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a21      	ldr	r2, [pc, #132]	; (8003a54 <HAL_TIM_Base_Start_IT+0xbc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d018      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0x6c>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039da:	d013      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0x6c>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1d      	ldr	r2, [pc, #116]	; (8003a58 <HAL_TIM_Base_Start_IT+0xc0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00e      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0x6c>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1c      	ldr	r2, [pc, #112]	; (8003a5c <HAL_TIM_Base_Start_IT+0xc4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0x6c>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1a      	ldr	r2, [pc, #104]	; (8003a60 <HAL_TIM_Base_Start_IT+0xc8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d004      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0x6c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a19      	ldr	r2, [pc, #100]	; (8003a64 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d115      	bne.n	8003a30 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d015      	beq.n	8003a42 <HAL_TIM_Base_Start_IT+0xaa>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1c:	d011      	beq.n	8003a42 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2e:	e008      	b.n	8003a42 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e000      	b.n	8003a44 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40000800 	.word	0x40000800
 8003a60:	40013400 	.word	0x40013400
 8003a64:	40014000 	.word	0x40014000
 8003a68:	00010007 	.word	0x00010007

08003a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d122      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d11b      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0202 	mvn.w	r2, #2
 8003a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f905 	bl	8003cbe <HAL_TIM_IC_CaptureCallback>
 8003ab4:	e005      	b.n	8003ac2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f8f7 	bl	8003caa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f908 	bl	8003cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d122      	bne.n	8003b1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d11b      	bne.n	8003b1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0204 	mvn.w	r2, #4
 8003aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f8db 	bl	8003cbe <HAL_TIM_IC_CaptureCallback>
 8003b08:	e005      	b.n	8003b16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f8cd 	bl	8003caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f8de 	bl	8003cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d122      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d11b      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0208 	mvn.w	r2, #8
 8003b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2204      	movs	r2, #4
 8003b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f8b1 	bl	8003cbe <HAL_TIM_IC_CaptureCallback>
 8003b5c:	e005      	b.n	8003b6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f8a3 	bl	8003caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f8b4 	bl	8003cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d122      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0210 	mvn.w	r2, #16
 8003b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2208      	movs	r2, #8
 8003b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f887 	bl	8003cbe <HAL_TIM_IC_CaptureCallback>
 8003bb0:	e005      	b.n	8003bbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f879 	bl	8003caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f88a 	bl	8003cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d107      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0201 	mvn.w	r2, #1
 8003be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fc fef6 	bl	80009dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfa:	2b80      	cmp	r3, #128	; 0x80
 8003bfc:	d10e      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c08:	2b80      	cmp	r3, #128	; 0x80
 8003c0a:	d107      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f90a 	bl	8003e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2a:	d10e      	bne.n	8003c4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	2b80      	cmp	r3, #128	; 0x80
 8003c38:	d107      	bne.n	8003c4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f8fd 	bl	8003e44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c54:	2b40      	cmp	r3, #64	; 0x40
 8003c56:	d10e      	bne.n	8003c76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d107      	bne.n	8003c76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f838 	bl	8003ce6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d10e      	bne.n	8003ca2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d107      	bne.n	8003ca2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f06f 0220 	mvn.w	r2, #32
 8003c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f8bd 	bl	8003e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a3c      	ldr	r2, [pc, #240]	; (8003e00 <TIM_Base_SetConfig+0x104>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00f      	beq.n	8003d34 <TIM_Base_SetConfig+0x38>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1a:	d00b      	beq.n	8003d34 <TIM_Base_SetConfig+0x38>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a39      	ldr	r2, [pc, #228]	; (8003e04 <TIM_Base_SetConfig+0x108>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d007      	beq.n	8003d34 <TIM_Base_SetConfig+0x38>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a38      	ldr	r2, [pc, #224]	; (8003e08 <TIM_Base_SetConfig+0x10c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_Base_SetConfig+0x38>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a37      	ldr	r2, [pc, #220]	; (8003e0c <TIM_Base_SetConfig+0x110>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d108      	bne.n	8003d46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a2d      	ldr	r2, [pc, #180]	; (8003e00 <TIM_Base_SetConfig+0x104>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01b      	beq.n	8003d86 <TIM_Base_SetConfig+0x8a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d54:	d017      	beq.n	8003d86 <TIM_Base_SetConfig+0x8a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2a      	ldr	r2, [pc, #168]	; (8003e04 <TIM_Base_SetConfig+0x108>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d013      	beq.n	8003d86 <TIM_Base_SetConfig+0x8a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a29      	ldr	r2, [pc, #164]	; (8003e08 <TIM_Base_SetConfig+0x10c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00f      	beq.n	8003d86 <TIM_Base_SetConfig+0x8a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a28      	ldr	r2, [pc, #160]	; (8003e0c <TIM_Base_SetConfig+0x110>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00b      	beq.n	8003d86 <TIM_Base_SetConfig+0x8a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a27      	ldr	r2, [pc, #156]	; (8003e10 <TIM_Base_SetConfig+0x114>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d007      	beq.n	8003d86 <TIM_Base_SetConfig+0x8a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <TIM_Base_SetConfig+0x118>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <TIM_Base_SetConfig+0x8a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a25      	ldr	r2, [pc, #148]	; (8003e18 <TIM_Base_SetConfig+0x11c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d108      	bne.n	8003d98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a10      	ldr	r2, [pc, #64]	; (8003e00 <TIM_Base_SetConfig+0x104>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00f      	beq.n	8003de4 <TIM_Base_SetConfig+0xe8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a11      	ldr	r2, [pc, #68]	; (8003e0c <TIM_Base_SetConfig+0x110>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00b      	beq.n	8003de4 <TIM_Base_SetConfig+0xe8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a10      	ldr	r2, [pc, #64]	; (8003e10 <TIM_Base_SetConfig+0x114>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d007      	beq.n	8003de4 <TIM_Base_SetConfig+0xe8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a0f      	ldr	r2, [pc, #60]	; (8003e14 <TIM_Base_SetConfig+0x118>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d003      	beq.n	8003de4 <TIM_Base_SetConfig+0xe8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a0e      	ldr	r2, [pc, #56]	; (8003e18 <TIM_Base_SetConfig+0x11c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d103      	bne.n	8003dec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	615a      	str	r2, [r3, #20]
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000800 	.word	0x40000800
 8003e0c:	40013400 	.word	0x40013400
 8003e10:	40014000 	.word	0x40014000
 8003e14:	40014400 	.word	0x40014400
 8003e18:	40014800 	.word	0x40014800

08003e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e040      	b.n	8003eec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fd f944 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2224      	movs	r2, #36	; 0x24
 8003e84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0201 	bic.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fc0c 	bl	80046b4 <UART_SetConfig>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e022      	b.n	8003eec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fdd6 	bl	8004a60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ed2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 fe5d 	bl	8004ba4 <UART_CheckIdleState>
 8003eea:	4603      	mov	r3, r0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	; 0x28
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	f040 8082 	bne.w	8004012 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_UART_Transmit+0x26>
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e07a      	b.n	8004014 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_UART_Transmit+0x38>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e073      	b.n	8004014 <HAL_UART_Transmit+0x120>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2221      	movs	r2, #33	; 0x21
 8003f40:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f42:	f7fd f9e5 	bl	8001310 <HAL_GetTick>
 8003f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	88fa      	ldrh	r2, [r7, #6]
 8003f4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	88fa      	ldrh	r2, [r7, #6]
 8003f54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f60:	d108      	bne.n	8003f74 <HAL_UART_Transmit+0x80>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d104      	bne.n	8003f74 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	e003      	b.n	8003f7c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f84:	e02d      	b.n	8003fe2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2180      	movs	r1, #128	; 0x80
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 fe50 	bl	8004c36 <UART_WaitOnFlagUntilTimeout>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e039      	b.n	8004014 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10b      	bne.n	8003fbe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	881a      	ldrh	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb2:	b292      	uxth	r2, r2
 8003fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	3302      	adds	r3, #2
 8003fba:	61bb      	str	r3, [r7, #24]
 8003fbc:	e008      	b.n	8003fd0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	b292      	uxth	r2, r2
 8003fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1cb      	bne.n	8003f86 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2140      	movs	r1, #64	; 0x40
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 fe1c 	bl	8004c36 <UART_WaitOnFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e005      	b.n	8004014 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	e000      	b.n	8004014 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004012:	2302      	movs	r3, #2
  }
}
 8004014:	4618      	mov	r0, r3
 8004016:	3720      	adds	r7, #32
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	; 0x28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	4613      	mov	r3, r2
 8004028:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800402e:	2b20      	cmp	r3, #32
 8004030:	d13d      	bne.n	80040ae <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_UART_Receive_IT+0x22>
 8004038:	88fb      	ldrh	r3, [r7, #6]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e036      	b.n	80040b0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_UART_Receive_IT+0x34>
 800404c:	2302      	movs	r3, #2
 800404e:	e02f      	b.n	80040b0 <HAL_UART_Receive_IT+0x94>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d018      	beq.n	800409e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	613b      	str	r3, [r7, #16]
   return(result);
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	623b      	str	r3, [r7, #32]
 800408c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	69f9      	ldr	r1, [r7, #28]
 8004090:	6a3a      	ldr	r2, [r7, #32]
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	61bb      	str	r3, [r7, #24]
   return(result);
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e6      	bne.n	800406c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	461a      	mov	r2, r3
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fe8b 	bl	8004dc0 <UART_Start_Receive_IT>
 80040aa:	4603      	mov	r3, r0
 80040ac:	e000      	b.n	80040b0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3728      	adds	r7, #40	; 0x28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b0ba      	sub	sp, #232	; 0xe8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80040e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80040e6:	4013      	ands	r3, r2
 80040e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80040ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d115      	bne.n	8004120 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00f      	beq.n	8004120 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 82a3 	beq.w	800465c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	4798      	blx	r3
      }
      return;
 800411e:	e29d      	b.n	800465c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8117 	beq.w	8004358 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800412a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004136:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800413a:	4b85      	ldr	r3, [pc, #532]	; (8004350 <HAL_UART_IRQHandler+0x298>)
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 810a 	beq.w	8004358 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d011      	beq.n	8004174 <HAL_UART_IRQHandler+0xbc>
 8004150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00b      	beq.n	8004174 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2201      	movs	r2, #1
 8004162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800416a:	f043 0201 	orr.w	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d011      	beq.n	80041a4 <HAL_UART_IRQHandler+0xec>
 8004180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00b      	beq.n	80041a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2202      	movs	r2, #2
 8004192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800419a:	f043 0204 	orr.w	r2, r3, #4
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d011      	beq.n	80041d4 <HAL_UART_IRQHandler+0x11c>
 80041b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00b      	beq.n	80041d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2204      	movs	r2, #4
 80041c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ca:	f043 0202 	orr.w	r2, r3, #2
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d017      	beq.n	8004210 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d105      	bne.n	80041f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00b      	beq.n	8004210 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2208      	movs	r2, #8
 80041fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004206:	f043 0208 	orr.w	r2, r3, #8
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004218:	2b00      	cmp	r3, #0
 800421a:	d012      	beq.n	8004242 <HAL_UART_IRQHandler+0x18a>
 800421c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004220:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00c      	beq.n	8004242 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004230:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004238:	f043 0220 	orr.w	r2, r3, #32
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 8209 	beq.w	8004660 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00d      	beq.n	8004276 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800425a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	d005      	beq.n	800429a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800428e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004292:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004296:	2b00      	cmp	r3, #0
 8004298:	d04f      	beq.n	800433a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fe28 	bl	8004ef0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d141      	bne.n	8004332 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3308      	adds	r3, #8
 80042b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3308      	adds	r3, #8
 80042d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1d9      	bne.n	80042ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d013      	beq.n	800432a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	4a13      	ldr	r2, [pc, #76]	; (8004354 <HAL_UART_IRQHandler+0x29c>)
 8004308:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	4618      	mov	r0, r3
 8004310:	f7fd f925 	bl	800155e <HAL_DMA_Abort_IT>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d017      	beq.n	800434a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004324:	4610      	mov	r0, r2
 8004326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004328:	e00f      	b.n	800434a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f9ac 	bl	8004688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004330:	e00b      	b.n	800434a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f9a8 	bl	8004688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	e007      	b.n	800434a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f9a4 	bl	8004688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004348:	e18a      	b.n	8004660 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434a:	bf00      	nop
    return;
 800434c:	e188      	b.n	8004660 <HAL_UART_IRQHandler+0x5a8>
 800434e:	bf00      	nop
 8004350:	04000120 	.word	0x04000120
 8004354:	08004fb7 	.word	0x08004fb7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435c:	2b01      	cmp	r3, #1
 800435e:	f040 8143 	bne.w	80045e8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 813c 	beq.w	80045e8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8135 	beq.w	80045e8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2210      	movs	r2, #16
 8004384:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	f040 80b1 	bne.w	80044f8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 815c 	beq.w	8004664 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043b6:	429a      	cmp	r2, r3
 80043b8:	f080 8154 	bcs.w	8004664 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	f000 8085 	beq.w	80044dc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004400:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004408:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004414:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1da      	bne.n	80043d2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3308      	adds	r3, #8
 8004422:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800442c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800442e:	f023 0301 	bic.w	r3, r3, #1
 8004432:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3308      	adds	r3, #8
 800443c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004440:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004444:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004448:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e1      	bne.n	800441c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3308      	adds	r3, #8
 800445e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800446a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800446e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3308      	adds	r3, #8
 8004478:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800447c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800447e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004482:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800448a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e3      	bne.n	8004458 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ac:	f023 0310 	bic.w	r3, r3, #16
 80044b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044be:	65bb      	str	r3, [r7, #88]	; 0x58
 80044c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e4      	bne.n	800449c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fd f808 	bl	80014ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	4619      	mov	r1, r3
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f8d3 	bl	800469c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044f6:	e0b5      	b.n	8004664 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004504:	b29b      	uxth	r3, r3
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80a7 	beq.w	8004668 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800451a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80a2 	beq.w	8004668 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004534:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004538:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004546:	647b      	str	r3, [r7, #68]	; 0x44
 8004548:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800454c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e4      	bne.n	8004524 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3308      	adds	r3, #8
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	623b      	str	r3, [r7, #32]
   return(result);
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3308      	adds	r3, #8
 800457a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800457e:	633a      	str	r2, [r7, #48]	; 0x30
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e3      	bne.n	800455a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f023 0310 	bic.w	r3, r3, #16
 80045b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ca:	69b9      	ldr	r1, [r7, #24]
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	617b      	str	r3, [r7, #20]
   return(result);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e4      	bne.n	80045a4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f85b 	bl	800469c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045e6:	e03f      	b.n	8004668 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00e      	beq.n	8004612 <HAL_UART_IRQHandler+0x55a>
 80045f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004608:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fe6f 	bl	80052ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004610:	e02d      	b.n	800466e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00e      	beq.n	800463c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800461e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01c      	beq.n	800466c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	4798      	blx	r3
    }
    return;
 800463a:	e017      	b.n	800466c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800463c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d012      	beq.n	800466e <HAL_UART_IRQHandler+0x5b6>
 8004648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00c      	beq.n	800466e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fcc4 	bl	8004fe2 <UART_EndTransmit_IT>
    return;
 800465a:	e008      	b.n	800466e <HAL_UART_IRQHandler+0x5b6>
      return;
 800465c:	bf00      	nop
 800465e:	e006      	b.n	800466e <HAL_UART_IRQHandler+0x5b6>
    return;
 8004660:	bf00      	nop
 8004662:	e004      	b.n	800466e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004664:	bf00      	nop
 8004666:	e002      	b.n	800466e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004668:	bf00      	nop
 800466a:	e000      	b.n	800466e <HAL_UART_IRQHandler+0x5b6>
    return;
 800466c:	bf00      	nop
  }

}
 800466e:	37e8      	adds	r7, #232	; 0xe8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80046e2:	f023 030c 	bic.w	r3, r3, #12
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6812      	ldr	r2, [r2, #0]
 80046ea:	6979      	ldr	r1, [r7, #20]
 80046ec:	430b      	orrs	r3, r1
 80046ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	430a      	orrs	r2, r1
 8004728:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4aa8      	ldr	r2, [pc, #672]	; (80049d0 <UART_SetConfig+0x31c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d120      	bne.n	8004776 <UART_SetConfig+0xc2>
 8004734:	4ba7      	ldr	r3, [pc, #668]	; (80049d4 <UART_SetConfig+0x320>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	2b03      	cmp	r3, #3
 800473e:	d817      	bhi.n	8004770 <UART_SetConfig+0xbc>
 8004740:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <UART_SetConfig+0x94>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	08004759 	.word	0x08004759
 800474c:	08004765 	.word	0x08004765
 8004750:	0800476b 	.word	0x0800476b
 8004754:	0800475f 	.word	0x0800475f
 8004758:	2301      	movs	r3, #1
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e0b5      	b.n	80048ca <UART_SetConfig+0x216>
 800475e:	2302      	movs	r3, #2
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	e0b2      	b.n	80048ca <UART_SetConfig+0x216>
 8004764:	2304      	movs	r3, #4
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e0af      	b.n	80048ca <UART_SetConfig+0x216>
 800476a:	2308      	movs	r3, #8
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e0ac      	b.n	80048ca <UART_SetConfig+0x216>
 8004770:	2310      	movs	r3, #16
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e0a9      	b.n	80048ca <UART_SetConfig+0x216>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a97      	ldr	r2, [pc, #604]	; (80049d8 <UART_SetConfig+0x324>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d124      	bne.n	80047ca <UART_SetConfig+0x116>
 8004780:	4b94      	ldr	r3, [pc, #592]	; (80049d4 <UART_SetConfig+0x320>)
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004788:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800478c:	d011      	beq.n	80047b2 <UART_SetConfig+0xfe>
 800478e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004792:	d817      	bhi.n	80047c4 <UART_SetConfig+0x110>
 8004794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004798:	d011      	beq.n	80047be <UART_SetConfig+0x10a>
 800479a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800479e:	d811      	bhi.n	80047c4 <UART_SetConfig+0x110>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <UART_SetConfig+0xf8>
 80047a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a8:	d006      	beq.n	80047b8 <UART_SetConfig+0x104>
 80047aa:	e00b      	b.n	80047c4 <UART_SetConfig+0x110>
 80047ac:	2300      	movs	r3, #0
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e08b      	b.n	80048ca <UART_SetConfig+0x216>
 80047b2:	2302      	movs	r3, #2
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e088      	b.n	80048ca <UART_SetConfig+0x216>
 80047b8:	2304      	movs	r3, #4
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e085      	b.n	80048ca <UART_SetConfig+0x216>
 80047be:	2308      	movs	r3, #8
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e082      	b.n	80048ca <UART_SetConfig+0x216>
 80047c4:	2310      	movs	r3, #16
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e07f      	b.n	80048ca <UART_SetConfig+0x216>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a83      	ldr	r2, [pc, #524]	; (80049dc <UART_SetConfig+0x328>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d124      	bne.n	800481e <UART_SetConfig+0x16a>
 80047d4:	4b7f      	ldr	r3, [pc, #508]	; (80049d4 <UART_SetConfig+0x320>)
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80047dc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047e0:	d011      	beq.n	8004806 <UART_SetConfig+0x152>
 80047e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047e6:	d817      	bhi.n	8004818 <UART_SetConfig+0x164>
 80047e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047ec:	d011      	beq.n	8004812 <UART_SetConfig+0x15e>
 80047ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047f2:	d811      	bhi.n	8004818 <UART_SetConfig+0x164>
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <UART_SetConfig+0x14c>
 80047f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047fc:	d006      	beq.n	800480c <UART_SetConfig+0x158>
 80047fe:	e00b      	b.n	8004818 <UART_SetConfig+0x164>
 8004800:	2300      	movs	r3, #0
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e061      	b.n	80048ca <UART_SetConfig+0x216>
 8004806:	2302      	movs	r3, #2
 8004808:	77fb      	strb	r3, [r7, #31]
 800480a:	e05e      	b.n	80048ca <UART_SetConfig+0x216>
 800480c:	2304      	movs	r3, #4
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e05b      	b.n	80048ca <UART_SetConfig+0x216>
 8004812:	2308      	movs	r3, #8
 8004814:	77fb      	strb	r3, [r7, #31]
 8004816:	e058      	b.n	80048ca <UART_SetConfig+0x216>
 8004818:	2310      	movs	r3, #16
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e055      	b.n	80048ca <UART_SetConfig+0x216>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a6f      	ldr	r2, [pc, #444]	; (80049e0 <UART_SetConfig+0x32c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d124      	bne.n	8004872 <UART_SetConfig+0x1be>
 8004828:	4b6a      	ldr	r3, [pc, #424]	; (80049d4 <UART_SetConfig+0x320>)
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004830:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004834:	d011      	beq.n	800485a <UART_SetConfig+0x1a6>
 8004836:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800483a:	d817      	bhi.n	800486c <UART_SetConfig+0x1b8>
 800483c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004840:	d011      	beq.n	8004866 <UART_SetConfig+0x1b2>
 8004842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004846:	d811      	bhi.n	800486c <UART_SetConfig+0x1b8>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <UART_SetConfig+0x1a0>
 800484c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004850:	d006      	beq.n	8004860 <UART_SetConfig+0x1ac>
 8004852:	e00b      	b.n	800486c <UART_SetConfig+0x1b8>
 8004854:	2300      	movs	r3, #0
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e037      	b.n	80048ca <UART_SetConfig+0x216>
 800485a:	2302      	movs	r3, #2
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	e034      	b.n	80048ca <UART_SetConfig+0x216>
 8004860:	2304      	movs	r3, #4
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e031      	b.n	80048ca <UART_SetConfig+0x216>
 8004866:	2308      	movs	r3, #8
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e02e      	b.n	80048ca <UART_SetConfig+0x216>
 800486c:	2310      	movs	r3, #16
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e02b      	b.n	80048ca <UART_SetConfig+0x216>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a5b      	ldr	r2, [pc, #364]	; (80049e4 <UART_SetConfig+0x330>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d124      	bne.n	80048c6 <UART_SetConfig+0x212>
 800487c:	4b55      	ldr	r3, [pc, #340]	; (80049d4 <UART_SetConfig+0x320>)
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004884:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004888:	d011      	beq.n	80048ae <UART_SetConfig+0x1fa>
 800488a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800488e:	d817      	bhi.n	80048c0 <UART_SetConfig+0x20c>
 8004890:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004894:	d011      	beq.n	80048ba <UART_SetConfig+0x206>
 8004896:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800489a:	d811      	bhi.n	80048c0 <UART_SetConfig+0x20c>
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <UART_SetConfig+0x1f4>
 80048a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a4:	d006      	beq.n	80048b4 <UART_SetConfig+0x200>
 80048a6:	e00b      	b.n	80048c0 <UART_SetConfig+0x20c>
 80048a8:	2300      	movs	r3, #0
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e00d      	b.n	80048ca <UART_SetConfig+0x216>
 80048ae:	2302      	movs	r3, #2
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e00a      	b.n	80048ca <UART_SetConfig+0x216>
 80048b4:	2304      	movs	r3, #4
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e007      	b.n	80048ca <UART_SetConfig+0x216>
 80048ba:	2308      	movs	r3, #8
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e004      	b.n	80048ca <UART_SetConfig+0x216>
 80048c0:	2310      	movs	r3, #16
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e001      	b.n	80048ca <UART_SetConfig+0x216>
 80048c6:	2310      	movs	r3, #16
 80048c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d2:	d15c      	bne.n	800498e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80048d4:	7ffb      	ldrb	r3, [r7, #31]
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d827      	bhi.n	800492a <UART_SetConfig+0x276>
 80048da:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <UART_SetConfig+0x22c>)
 80048dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e0:	08004905 	.word	0x08004905
 80048e4:	0800490d 	.word	0x0800490d
 80048e8:	08004915 	.word	0x08004915
 80048ec:	0800492b 	.word	0x0800492b
 80048f0:	0800491b 	.word	0x0800491b
 80048f4:	0800492b 	.word	0x0800492b
 80048f8:	0800492b 	.word	0x0800492b
 80048fc:	0800492b 	.word	0x0800492b
 8004900:	08004923 	.word	0x08004923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004904:	f7fe fc30 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8004908:	61b8      	str	r0, [r7, #24]
        break;
 800490a:	e013      	b.n	8004934 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800490c:	f7fe fc4e 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
 8004910:	61b8      	str	r0, [r7, #24]
        break;
 8004912:	e00f      	b.n	8004934 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004914:	4b34      	ldr	r3, [pc, #208]	; (80049e8 <UART_SetConfig+0x334>)
 8004916:	61bb      	str	r3, [r7, #24]
        break;
 8004918:	e00c      	b.n	8004934 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491a:	f7fe fbaf 	bl	800307c <HAL_RCC_GetSysClockFreq>
 800491e:	61b8      	str	r0, [r7, #24]
        break;
 8004920:	e008      	b.n	8004934 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004926:	61bb      	str	r3, [r7, #24]
        break;
 8004928:	e004      	b.n	8004934 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	77bb      	strb	r3, [r7, #30]
        break;
 8004932:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8084 	beq.w	8004a44 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	005a      	lsls	r2, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	441a      	add	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004950:	b29b      	uxth	r3, r3
 8004952:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b0f      	cmp	r3, #15
 8004958:	d916      	bls.n	8004988 <UART_SetConfig+0x2d4>
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004960:	d212      	bcs.n	8004988 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f023 030f 	bic.w	r3, r3, #15
 800496a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	085b      	lsrs	r3, r3, #1
 8004970:	b29b      	uxth	r3, r3
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	b29a      	uxth	r2, r3
 8004978:	89fb      	ldrh	r3, [r7, #14]
 800497a:	4313      	orrs	r3, r2
 800497c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	89fa      	ldrh	r2, [r7, #14]
 8004984:	60da      	str	r2, [r3, #12]
 8004986:	e05d      	b.n	8004a44 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	77bb      	strb	r3, [r7, #30]
 800498c:	e05a      	b.n	8004a44 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800498e:	7ffb      	ldrb	r3, [r7, #31]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d836      	bhi.n	8004a02 <UART_SetConfig+0x34e>
 8004994:	a201      	add	r2, pc, #4	; (adr r2, 800499c <UART_SetConfig+0x2e8>)
 8004996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499a:	bf00      	nop
 800499c:	080049c1 	.word	0x080049c1
 80049a0:	080049c9 	.word	0x080049c9
 80049a4:	080049ed 	.word	0x080049ed
 80049a8:	08004a03 	.word	0x08004a03
 80049ac:	080049f3 	.word	0x080049f3
 80049b0:	08004a03 	.word	0x08004a03
 80049b4:	08004a03 	.word	0x08004a03
 80049b8:	08004a03 	.word	0x08004a03
 80049bc:	080049fb 	.word	0x080049fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c0:	f7fe fbd2 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 80049c4:	61b8      	str	r0, [r7, #24]
        break;
 80049c6:	e021      	b.n	8004a0c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c8:	f7fe fbf0 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
 80049cc:	61b8      	str	r0, [r7, #24]
        break;
 80049ce:	e01d      	b.n	8004a0c <UART_SetConfig+0x358>
 80049d0:	40013800 	.word	0x40013800
 80049d4:	40021000 	.word	0x40021000
 80049d8:	40004400 	.word	0x40004400
 80049dc:	40004800 	.word	0x40004800
 80049e0:	40004c00 	.word	0x40004c00
 80049e4:	40005000 	.word	0x40005000
 80049e8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ec:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <UART_SetConfig+0x3a8>)
 80049ee:	61bb      	str	r3, [r7, #24]
        break;
 80049f0:	e00c      	b.n	8004a0c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049f2:	f7fe fb43 	bl	800307c <HAL_RCC_GetSysClockFreq>
 80049f6:	61b8      	str	r0, [r7, #24]
        break;
 80049f8:	e008      	b.n	8004a0c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049fe:	61bb      	str	r3, [r7, #24]
        break;
 8004a00:	e004      	b.n	8004a0c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	77bb      	strb	r3, [r7, #30]
        break;
 8004a0a:	bf00      	nop
    }

    if (pclk != 0U)
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d018      	beq.n	8004a44 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	085a      	lsrs	r2, r3, #1
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	441a      	add	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2b0f      	cmp	r3, #15
 8004a2c:	d908      	bls.n	8004a40 <UART_SetConfig+0x38c>
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a34:	d204      	bcs.n	8004a40 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	60da      	str	r2, [r3, #12]
 8004a3e:	e001      	b.n	8004a44 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a50:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3720      	adds	r7, #32
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	007a1200 	.word	0x007a1200

08004a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	f003 0310 	and.w	r3, r3, #16
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01a      	beq.n	8004b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b5e:	d10a      	bne.n	8004b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	605a      	str	r2, [r3, #4]
  }
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bb4:	f7fc fbac 	bl	8001310 <HAL_GetTick>
 8004bb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d10e      	bne.n	8004be6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f82d 	bl	8004c36 <UART_WaitOnFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e023      	b.n	8004c2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d10e      	bne.n	8004c12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f817 	bl	8004c36 <UART_WaitOnFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e00d      	b.n	8004c2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b09c      	sub	sp, #112	; 0x70
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	603b      	str	r3, [r7, #0]
 8004c42:	4613      	mov	r3, r2
 8004c44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c46:	e0a5      	b.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	f000 80a1 	beq.w	8004d94 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c52:	f7fc fb5d 	bl	8001310 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d302      	bcc.n	8004c68 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d13e      	bne.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c88:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e6      	bne.n	8004c68 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	f023 0301 	bic.w	r3, r3, #1
 8004cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cba:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e5      	bne.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e067      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d04f      	beq.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d02:	d147      	bne.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e6      	bne.n	8004d0e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3308      	adds	r3, #8
 8004d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d60:	623a      	str	r2, [r7, #32]
 8004d62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	69f9      	ldr	r1, [r7, #28]
 8004d66:	6a3a      	ldr	r2, [r7, #32]
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e5      	bne.n	8004d40 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e010      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69da      	ldr	r2, [r3, #28]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	f43f af4a 	beq.w	8004c48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3770      	adds	r7, #112	; 0x70
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b091      	sub	sp, #68	; 0x44
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	88fa      	ldrh	r2, [r7, #6]
 8004dd8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df2:	d10e      	bne.n	8004e12 <UART_Start_Receive_IT+0x52>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d105      	bne.n	8004e08 <UART_Start_Receive_IT+0x48>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e06:	e01a      	b.n	8004e3e <UART_Start_Receive_IT+0x7e>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	22ff      	movs	r2, #255	; 0xff
 8004e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e10:	e015      	b.n	8004e3e <UART_Start_Receive_IT+0x7e>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <UART_Start_Receive_IT+0x76>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d104      	bne.n	8004e2c <UART_Start_Receive_IT+0x6c>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	22ff      	movs	r2, #255	; 0xff
 8004e26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e2a:	e008      	b.n	8004e3e <UART_Start_Receive_IT+0x7e>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	227f      	movs	r2, #127	; 0x7f
 8004e30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e34:	e003      	b.n	8004e3e <UART_Start_Receive_IT+0x7e>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2222      	movs	r2, #34	; 0x22
 8004e4a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3308      	adds	r3, #8
 8004e52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3308      	adds	r3, #8
 8004e6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e6c:	637a      	str	r2, [r7, #52]	; 0x34
 8004e6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e5      	bne.n	8004e4c <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e88:	d107      	bne.n	8004e9a <UART_Start_Receive_IT+0xda>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d103      	bne.n	8004e9a <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <UART_Start_Receive_IT+0x128>)
 8004e96:	665a      	str	r2, [r3, #100]	; 0x64
 8004e98:	e002      	b.n	8004ea0 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a13      	ldr	r2, [pc, #76]	; (8004eec <UART_Start_Receive_IT+0x12c>)
 8004e9e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004ebc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec6:	623b      	str	r3, [r7, #32]
 8004ec8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	69f9      	ldr	r1, [r7, #28]
 8004ecc:	6a3a      	ldr	r2, [r7, #32]
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e6      	bne.n	8004ea8 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3744      	adds	r7, #68	; 0x44
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	08005193 	.word	0x08005193
 8004eec:	08005037 	.word	0x08005037

08004ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b095      	sub	sp, #84	; 0x54
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f16:	643b      	str	r3, [r7, #64]	; 0x40
 8004f18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e6      	bne.n	8004ef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3308      	adds	r3, #8
 8004f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	f023 0301 	bic.w	r3, r3, #1
 8004f40:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3308      	adds	r3, #8
 8004f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e5      	bne.n	8004f2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d118      	bne.n	8004f98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f023 0310 	bic.w	r3, r3, #16
 8004f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f84:	61bb      	str	r3, [r7, #24]
 8004f86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	6979      	ldr	r1, [r7, #20]
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	613b      	str	r3, [r7, #16]
   return(result);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e6      	bne.n	8004f66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004faa:	bf00      	nop
 8004fac:	3754      	adds	r7, #84	; 0x54
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7ff fb57 	bl	8004688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b088      	sub	sp, #32
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	6979      	ldr	r1, [r7, #20]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	613b      	str	r3, [r7, #16]
   return(result);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e6      	bne.n	8004fea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2220      	movs	r2, #32
 8005020:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff fb23 	bl	8004674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800502e:	bf00      	nop
 8005030:	3720      	adds	r7, #32
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b096      	sub	sp, #88	; 0x58
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005044:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504c:	2b22      	cmp	r3, #34	; 0x22
 800504e:	f040 8094 	bne.w	800517a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005058:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800505c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005060:	b2d9      	uxtb	r1, r3
 8005062:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005066:	b2da      	uxtb	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506c:	400a      	ands	r2, r1
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d177      	bne.n	800518a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ae:	653b      	str	r3, [r7, #80]	; 0x50
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b8:	647b      	str	r3, [r7, #68]	; 0x44
 80050ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e6      	bne.n	800509a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3308      	adds	r3, #8
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	623b      	str	r3, [r7, #32]
   return(result);
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050ec:	633a      	str	r2, [r7, #48]	; 0x30
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005110:	2b01      	cmp	r3, #1
 8005112:	d12e      	bne.n	8005172 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	60fb      	str	r3, [r7, #12]
   return(result);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0310 	bic.w	r3, r3, #16
 800512e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	69b9      	ldr	r1, [r7, #24]
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	617b      	str	r3, [r7, #20]
   return(result);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e6      	bne.n	800511a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f003 0310 	and.w	r3, r3, #16
 8005156:	2b10      	cmp	r3, #16
 8005158:	d103      	bne.n	8005162 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2210      	movs	r2, #16
 8005160:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005168:	4619      	mov	r1, r3
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff fa96 	bl	800469c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005170:	e00b      	b.n	800518a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fb fbe2 	bl	800093c <HAL_UART_RxCpltCallback>
}
 8005178:	e007      	b.n	800518a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	699a      	ldr	r2, [r3, #24]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0208 	orr.w	r2, r2, #8
 8005188:	619a      	str	r2, [r3, #24]
}
 800518a:	bf00      	nop
 800518c:	3758      	adds	r7, #88	; 0x58
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b096      	sub	sp, #88	; 0x58
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051a8:	2b22      	cmp	r3, #34	; 0x22
 80051aa:	f040 8094 	bne.w	80052d6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051b4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051bc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80051be:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80051c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051c6:	4013      	ands	r3, r2
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d2:	1c9a      	adds	r2, r3, #2
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d177      	bne.n	80052e6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fe:	e853 3f00 	ldrex	r3, [r3]
 8005202:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800520a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	461a      	mov	r2, r3
 8005212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005214:	643b      	str	r3, [r7, #64]	; 0x40
 8005216:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800521a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e6      	bne.n	80051f6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3308      	adds	r3, #8
 800522e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	e853 3f00 	ldrex	r3, [r3]
 8005236:	61fb      	str	r3, [r7, #28]
   return(result);
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f023 0301 	bic.w	r3, r3, #1
 800523e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3308      	adds	r3, #8
 8005246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005248:	62fa      	str	r2, [r7, #44]	; 0x2c
 800524a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800524e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e5      	bne.n	8005228 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526c:	2b01      	cmp	r3, #1
 800526e:	d12e      	bne.n	80052ce <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	60bb      	str	r3, [r7, #8]
   return(result);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f023 0310 	bic.w	r3, r3, #16
 800528a:	647b      	str	r3, [r7, #68]	; 0x44
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005298:	6979      	ldr	r1, [r7, #20]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	e841 2300 	strex	r3, r2, [r1]
 80052a0:	613b      	str	r3, [r7, #16]
   return(result);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e6      	bne.n	8005276 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f003 0310 	and.w	r3, r3, #16
 80052b2:	2b10      	cmp	r3, #16
 80052b4:	d103      	bne.n	80052be <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2210      	movs	r2, #16
 80052bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff f9e8 	bl	800469c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052cc:	e00b      	b.n	80052e6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fb fb34 	bl	800093c <HAL_UART_RxCpltCallback>
}
 80052d4:	e007      	b.n	80052e6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699a      	ldr	r2, [r3, #24]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0208 	orr.w	r2, r2, #8
 80052e4:	619a      	str	r2, [r3, #24]
}
 80052e6:	bf00      	nop
 80052e8:	3758      	adds	r7, #88	; 0x58
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800530a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800530e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	b29b      	uxth	r3, r3
 800531c:	43db      	mvns	r3, r3
 800531e:	b29b      	uxth	r3, r3
 8005320:	4013      	ands	r3, r2
 8005322:	b29a      	uxth	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005338:	b084      	sub	sp, #16
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	f107 0014 	add.w	r0, r7, #20
 8005346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	b004      	add	sp, #16
 8005378:	4770      	bx	lr

0800537a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	4603      	mov	r3, r0
 8005382:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800538c:	2b84      	cmp	r3, #132	; 0x84
 800538e:	d005      	beq.n	800539c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005390:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	3303      	adds	r3, #3
 800539a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800539c:	68fb      	ldr	r3, [r7, #12]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80053ae:	f001 f8cf 	bl	8006550 <vTaskStartScheduler>
  
  return osOK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80053b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ba:	b089      	sub	sp, #36	; 0x24
 80053bc:	af04      	add	r7, sp, #16
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d020      	beq.n	800540c <osThreadCreate+0x54>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d01c      	beq.n	800540c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685c      	ldr	r4, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681d      	ldr	r5, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691e      	ldr	r6, [r3, #16]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff ffc8 	bl	800537a <makeFreeRtosPriority>
 80053ea:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053f4:	9202      	str	r2, [sp, #8]
 80053f6:	9301      	str	r3, [sp, #4]
 80053f8:	9100      	str	r1, [sp, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	4632      	mov	r2, r6
 80053fe:	4629      	mov	r1, r5
 8005400:	4620      	mov	r0, r4
 8005402:	f000 fecf 	bl	80061a4 <xTaskCreateStatic>
 8005406:	4603      	mov	r3, r0
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	e01c      	b.n	8005446 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685c      	ldr	r4, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005418:	b29e      	uxth	r6, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff ffaa 	bl	800537a <makeFreeRtosPriority>
 8005426:	4602      	mov	r2, r0
 8005428:	f107 030c 	add.w	r3, r7, #12
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	9200      	str	r2, [sp, #0]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	4632      	mov	r2, r6
 8005434:	4629      	mov	r1, r5
 8005436:	4620      	mov	r0, r4
 8005438:	f000 ff10 	bl	800625c <xTaskCreate>
 800543c:	4603      	mov	r3, r0
 800543e:	2b01      	cmp	r3, #1
 8005440:	d001      	beq.n	8005446 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005442:	2300      	movs	r3, #0
 8005444:	e000      	b.n	8005448 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005446:	68fb      	ldr	r3, [r7, #12]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005450 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <osDelay+0x16>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	e000      	b.n	8005468 <osDelay+0x18>
 8005466:	2301      	movs	r3, #1
 8005468:	4618      	mov	r0, r3
 800546a:	f001 f83d 	bl	80064e8 <vTaskDelay>
  
  return osOK;
 800546e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f103 0208 	add.w	r2, r3, #8
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f04f 32ff 	mov.w	r2, #4294967295
 8005490:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f103 0208 	add.w	r2, r3, #8
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f103 0208 	add.w	r2, r3, #8
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054d2:	b480      	push	{r7}
 80054d4:	b085      	sub	sp, #20
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	601a      	str	r2, [r3, #0]
}
 800550e:	bf00      	nop
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800551a:	b480      	push	{r7}
 800551c:	b085      	sub	sp, #20
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d103      	bne.n	800553a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	e00c      	b.n	8005554 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3308      	adds	r3, #8
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	e002      	b.n	8005548 <vListInsert+0x2e>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	429a      	cmp	r2, r3
 8005552:	d2f6      	bcs.n	8005542 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	601a      	str	r2, [r3, #0]
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6892      	ldr	r2, [r2, #8]
 80055a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6852      	ldr	r2, [r2, #4]
 80055ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d103      	bne.n	80055c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	1e5a      	subs	r2, r3, #1
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <xQueueGenericReset+0x2a>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	60bb      	str	r3, [r7, #8]
}
 8005606:	bf00      	nop
 8005608:	e7fe      	b.n	8005608 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800560a:	f002 fb7b 	bl	8007d04 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800561a:	fb01 f303 	mul.w	r3, r1, r3
 800561e:	441a      	add	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563a:	3b01      	subs	r3, #1
 800563c:	68f9      	ldr	r1, [r7, #12]
 800563e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	441a      	add	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	22ff      	movs	r2, #255	; 0xff
 800564e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	22ff      	movs	r2, #255	; 0xff
 8005656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d114      	bne.n	800568a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01a      	beq.n	800569e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3310      	adds	r3, #16
 800566c:	4618      	mov	r0, r3
 800566e:	f001 fa09 	bl	8006a84 <xTaskRemoveFromEventList>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d012      	beq.n	800569e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005678:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <xQueueGenericReset+0xcc>)
 800567a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	e009      	b.n	800569e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3310      	adds	r3, #16
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff fef2 	bl	8005478 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3324      	adds	r3, #36	; 0x24
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff feed 	bl	8005478 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800569e:	f002 fb61 	bl	8007d64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80056a2:	2301      	movs	r3, #1
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	e000ed04 	.word	0xe000ed04

080056b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08e      	sub	sp, #56	; 0x38
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056d6:	bf00      	nop
 80056d8:	e7fe      	b.n	80056d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10a      	bne.n	80056f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <xQueueGenericCreateStatic+0x52>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <xQueueGenericCreateStatic+0x56>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <xQueueGenericCreateStatic+0x58>
 8005706:	2300      	movs	r3, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	623b      	str	r3, [r7, #32]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <xQueueGenericCreateStatic+0x7e>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <xQueueGenericCreateStatic+0x82>
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <xQueueGenericCreateStatic+0x84>
 8005732:	2300      	movs	r3, #0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10a      	bne.n	800574e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	61fb      	str	r3, [r7, #28]
}
 800574a:	bf00      	nop
 800574c:	e7fe      	b.n	800574c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800574e:	2348      	movs	r3, #72	; 0x48
 8005750:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b48      	cmp	r3, #72	; 0x48
 8005756:	d00a      	beq.n	800576e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	61bb      	str	r3, [r7, #24]
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00d      	beq.n	8005794 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005780:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f843 	bl	800581a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005796:	4618      	mov	r0, r3
 8005798:	3730      	adds	r7, #48	; 0x30
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b08a      	sub	sp, #40	; 0x28
 80057a2:	af02      	add	r7, sp, #8
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	4613      	mov	r3, r2
 80057aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10a      	bne.n	80057c8 <xQueueGenericCreate+0x2a>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	613b      	str	r3, [r7, #16]
}
 80057c4:	bf00      	nop
 80057c6:	e7fe      	b.n	80057c6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d102      	bne.n	80057d4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	61fb      	str	r3, [r7, #28]
 80057d2:	e004      	b.n	80057de <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	fb02 f303 	mul.w	r3, r2, r3
 80057dc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	3348      	adds	r3, #72	; 0x48
 80057e2:	4618      	mov	r0, r3
 80057e4:	f002 fbb0 	bl	8007f48 <pvPortMalloc>
 80057e8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00f      	beq.n	8005810 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	3348      	adds	r3, #72	; 0x48
 80057f4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057fe:	79fa      	ldrb	r2, [r7, #7]
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	4613      	mov	r3, r2
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	68b9      	ldr	r1, [r7, #8]
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 f805 	bl	800581a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005810:	69bb      	ldr	r3, [r7, #24]
	}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
 8005826:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d103      	bne.n	8005836 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	e002      	b.n	800583c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005848:	2101      	movs	r1, #1
 800584a:	69b8      	ldr	r0, [r7, #24]
 800584c:	f7ff fec8 	bl	80055e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08e      	sub	sp, #56	; 0x38
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005866:	2300      	movs	r3, #0
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <xQueueGenericSend+0x32>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d103      	bne.n	8005898 <xQueueGenericSend+0x40>
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <xQueueGenericSend+0x44>
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <xQueueGenericSend+0x46>
 800589c:	2300      	movs	r3, #0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <xQueueGenericSend+0x60>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058b4:	bf00      	nop
 80058b6:	e7fe      	b.n	80058b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d103      	bne.n	80058c6 <xQueueGenericSend+0x6e>
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <xQueueGenericSend+0x72>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <xQueueGenericSend+0x74>
 80058ca:	2300      	movs	r3, #0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	623b      	str	r3, [r7, #32]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058e6:	f001 fa93 	bl	8006e10 <xTaskGetSchedulerState>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <xQueueGenericSend+0x9e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <xQueueGenericSend+0xa2>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <xQueueGenericSend+0xa4>
 80058fa:	2300      	movs	r3, #0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10a      	bne.n	8005916 <xQueueGenericSend+0xbe>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	61fb      	str	r3, [r7, #28]
}
 8005912:	bf00      	nop
 8005914:	e7fe      	b.n	8005914 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005916:	f002 f9f5 	bl	8007d04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005922:	429a      	cmp	r2, r3
 8005924:	d302      	bcc.n	800592c <xQueueGenericSend+0xd4>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d129      	bne.n	8005980 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005932:	f000 faa5 	bl	8005e80 <prvCopyDataToQueue>
 8005936:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	2b00      	cmp	r3, #0
 800593e:	d010      	beq.n	8005962 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	3324      	adds	r3, #36	; 0x24
 8005944:	4618      	mov	r0, r3
 8005946:	f001 f89d 	bl	8006a84 <xTaskRemoveFromEventList>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d013      	beq.n	8005978 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005950:	4b3f      	ldr	r3, [pc, #252]	; (8005a50 <xQueueGenericSend+0x1f8>)
 8005952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	e00a      	b.n	8005978 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005964:	2b00      	cmp	r3, #0
 8005966:	d007      	beq.n	8005978 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005968:	4b39      	ldr	r3, [pc, #228]	; (8005a50 <xQueueGenericSend+0x1f8>)
 800596a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005978:	f002 f9f4 	bl	8007d64 <vPortExitCritical>
				return pdPASS;
 800597c:	2301      	movs	r3, #1
 800597e:	e063      	b.n	8005a48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d103      	bne.n	800598e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005986:	f002 f9ed 	bl	8007d64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800598a:	2300      	movs	r3, #0
 800598c:	e05c      	b.n	8005a48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800598e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005994:	f107 0314 	add.w	r3, r7, #20
 8005998:	4618      	mov	r0, r3
 800599a:	f001 f8d5 	bl	8006b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800599e:	2301      	movs	r3, #1
 80059a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059a2:	f002 f9df 	bl	8007d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059a6:	f000 fe43 	bl	8006630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059aa:	f002 f9ab 	bl	8007d04 <vPortEnterCritical>
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059b4:	b25b      	sxtb	r3, r3
 80059b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ba:	d103      	bne.n	80059c4 <xQueueGenericSend+0x16c>
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059ca:	b25b      	sxtb	r3, r3
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d103      	bne.n	80059da <xQueueGenericSend+0x182>
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059da:	f002 f9c3 	bl	8007d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059de:	1d3a      	adds	r2, r7, #4
 80059e0:	f107 0314 	add.w	r3, r7, #20
 80059e4:	4611      	mov	r1, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f001 f8c4 	bl	8006b74 <xTaskCheckForTimeOut>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d124      	bne.n	8005a3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059f4:	f000 fb3c 	bl	8006070 <prvIsQueueFull>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d018      	beq.n	8005a30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	3310      	adds	r3, #16
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	4611      	mov	r1, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 ffec 	bl	80069e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a0e:	f000 fac7 	bl	8005fa0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a12:	f000 fe1b 	bl	800664c <xTaskResumeAll>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f47f af7c 	bne.w	8005916 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005a1e:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <xQueueGenericSend+0x1f8>)
 8005a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	e772      	b.n	8005916 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a32:	f000 fab5 	bl	8005fa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a36:	f000 fe09 	bl	800664c <xTaskResumeAll>
 8005a3a:	e76c      	b.n	8005916 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a3e:	f000 faaf 	bl	8005fa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a42:	f000 fe03 	bl	800664c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a46:	2300      	movs	r3, #0
		}
	}
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3738      	adds	r7, #56	; 0x38
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	e000ed04 	.word	0xe000ed04

08005a54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08e      	sub	sp, #56	; 0x38
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a7e:	bf00      	nop
 8005a80:	e7fe      	b.n	8005a80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d103      	bne.n	8005a90 <xQueueGenericSendFromISR+0x3c>
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <xQueueGenericSendFromISR+0x40>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <xQueueGenericSendFromISR+0x42>
 8005a94:	2300      	movs	r3, #0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	623b      	str	r3, [r7, #32]
}
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d103      	bne.n	8005abe <xQueueGenericSendFromISR+0x6a>
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <xQueueGenericSendFromISR+0x6e>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <xQueueGenericSendFromISR+0x70>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10a      	bne.n	8005ade <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	61fb      	str	r3, [r7, #28]
}
 8005ada:	bf00      	nop
 8005adc:	e7fe      	b.n	8005adc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ade:	f002 f9f3 	bl	8007ec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ae2:	f3ef 8211 	mrs	r2, BASEPRI
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	61ba      	str	r2, [r7, #24]
 8005af8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005afa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d302      	bcc.n	8005b10 <xQueueGenericSendFromISR+0xbc>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d12c      	bne.n	8005b6a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	68b9      	ldr	r1, [r7, #8]
 8005b1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b20:	f000 f9ae 	bl	8005e80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b24:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d112      	bne.n	8005b54 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d016      	beq.n	8005b64 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	3324      	adds	r3, #36	; 0x24
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 ffa2 	bl	8006a84 <xTaskRemoveFromEventList>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00e      	beq.n	8005b64 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00b      	beq.n	8005b64 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e007      	b.n	8005b64 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b58:	3301      	adds	r3, #1
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	b25a      	sxtb	r2, r3
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b64:	2301      	movs	r3, #1
 8005b66:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005b68:	e001      	b.n	8005b6e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3738      	adds	r7, #56	; 0x38
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08c      	sub	sp, #48	; 0x30
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b90:	2300      	movs	r3, #0
 8005b92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <xQueueReceive+0x30>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	623b      	str	r3, [r7, #32]
}
 8005bb0:	bf00      	nop
 8005bb2:	e7fe      	b.n	8005bb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d103      	bne.n	8005bc2 <xQueueReceive+0x3e>
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <xQueueReceive+0x42>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <xQueueReceive+0x44>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <xQueueReceive+0x5e>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	61fb      	str	r3, [r7, #28]
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005be2:	f001 f915 	bl	8006e10 <xTaskGetSchedulerState>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d102      	bne.n	8005bf2 <xQueueReceive+0x6e>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <xQueueReceive+0x72>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <xQueueReceive+0x74>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <xQueueReceive+0x8e>
	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	61bb      	str	r3, [r7, #24]
}
 8005c0e:	bf00      	nop
 8005c10:	e7fe      	b.n	8005c10 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c12:	f002 f877 	bl	8007d04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d01f      	beq.n	8005c62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c26:	f000 f995 	bl	8005f54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	1e5a      	subs	r2, r3, #1
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00f      	beq.n	8005c5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	3310      	adds	r3, #16
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 ff20 	bl	8006a84 <xTaskRemoveFromEventList>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c4a:	4b3d      	ldr	r3, [pc, #244]	; (8005d40 <xQueueReceive+0x1bc>)
 8005c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c5a:	f002 f883 	bl	8007d64 <vPortExitCritical>
				return pdPASS;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e069      	b.n	8005d36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d103      	bne.n	8005c70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c68:	f002 f87c 	bl	8007d64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e062      	b.n	8005d36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c76:	f107 0310 	add.w	r3, r7, #16
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 ff64 	bl	8006b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c80:	2301      	movs	r3, #1
 8005c82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c84:	f002 f86e 	bl	8007d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c88:	f000 fcd2 	bl	8006630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c8c:	f002 f83a 	bl	8007d04 <vPortEnterCritical>
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c96:	b25b      	sxtb	r3, r3
 8005c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9c:	d103      	bne.n	8005ca6 <xQueueReceive+0x122>
 8005c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cac:	b25b      	sxtb	r3, r3
 8005cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb2:	d103      	bne.n	8005cbc <xQueueReceive+0x138>
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cbc:	f002 f852 	bl	8007d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cc0:	1d3a      	adds	r2, r7, #4
 8005cc2:	f107 0310 	add.w	r3, r7, #16
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 ff53 	bl	8006b74 <xTaskCheckForTimeOut>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d123      	bne.n	8005d1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd6:	f000 f9b5 	bl	8006044 <prvIsQueueEmpty>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d017      	beq.n	8005d10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	3324      	adds	r3, #36	; 0x24
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 fe7b 	bl	80069e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cf0:	f000 f956 	bl	8005fa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cf4:	f000 fcaa 	bl	800664c <xTaskResumeAll>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d189      	bne.n	8005c12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005cfe:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <xQueueReceive+0x1bc>)
 8005d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	e780      	b.n	8005c12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d12:	f000 f945 	bl	8005fa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d16:	f000 fc99 	bl	800664c <xTaskResumeAll>
 8005d1a:	e77a      	b.n	8005c12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d1e:	f000 f93f 	bl	8005fa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d22:	f000 fc93 	bl	800664c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d28:	f000 f98c 	bl	8006044 <prvIsQueueEmpty>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f43f af6f 	beq.w	8005c12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3730      	adds	r7, #48	; 0x30
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	e000ed04 	.word	0xe000ed04

08005d44 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08e      	sub	sp, #56	; 0x38
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	623b      	str	r3, [r7, #32]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d103      	bne.n	8005d7e <xQueueReceiveFromISR+0x3a>
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <xQueueReceiveFromISR+0x3e>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <xQueueReceiveFromISR+0x40>
 8005d82:	2300      	movs	r3, #0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10a      	bne.n	8005d9e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	61fb      	str	r3, [r7, #28]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d9e:	f002 f893 	bl	8007ec8 <vPortValidateInterruptPriority>
	__asm volatile
 8005da2:	f3ef 8211 	mrs	r2, BASEPRI
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	61ba      	str	r2, [r7, #24]
 8005db8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005dba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d02f      	beq.n	8005e2a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dd8:	f000 f8bc 	bl	8005f54 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	1e5a      	subs	r2, r3, #1
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005de4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dec:	d112      	bne.n	8005e14 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d016      	beq.n	8005e24 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	3310      	adds	r3, #16
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fe42 	bl	8006a84 <xTaskRemoveFromEventList>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00e      	beq.n	8005e24 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00b      	beq.n	8005e24 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	e007      	b.n	8005e24 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e18:	3301      	adds	r3, #1
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	b25a      	sxtb	r2, r3
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005e24:	2301      	movs	r3, #1
 8005e26:	637b      	str	r3, [r7, #52]	; 0x34
 8005e28:	e001      	b.n	8005e2e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f383 8811 	msr	BASEPRI, r3
}
 8005e38:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3738      	adds	r7, #56	; 0x38
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10a      	bne.n	8005e68 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	60bb      	str	r3, [r7, #8]
}
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005e68:	f001 ff4c 	bl	8007d04 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005e72:	f001 ff77 	bl	8007d64 <vPortExitCritical>

	return uxReturn;
 8005e76:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10d      	bne.n	8005eba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d14d      	bne.n	8005f42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 ffce 	bl	8006e4c <xTaskPriorityDisinherit>
 8005eb0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	605a      	str	r2, [r3, #4]
 8005eb8:	e043      	b.n	8005f42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d119      	bne.n	8005ef4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6898      	ldr	r0, [r3, #8]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	461a      	mov	r2, r3
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	f002 fa3c 	bl	8008348 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	441a      	add	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d32b      	bcc.n	8005f42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	609a      	str	r2, [r3, #8]
 8005ef2:	e026      	b.n	8005f42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	68d8      	ldr	r0, [r3, #12]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	461a      	mov	r2, r3
 8005efe:	68b9      	ldr	r1, [r7, #8]
 8005f00:	f002 fa22 	bl	8008348 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	425b      	negs	r3, r3
 8005f0e:	441a      	add	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d207      	bcs.n	8005f30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	425b      	negs	r3, r3
 8005f2a:	441a      	add	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d105      	bne.n	8005f42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f4a:	697b      	ldr	r3, [r7, #20]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d018      	beq.n	8005f98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	441a      	add	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d303      	bcc.n	8005f88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68d9      	ldr	r1, [r3, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	461a      	mov	r2, r3
 8005f92:	6838      	ldr	r0, [r7, #0]
 8005f94:	f002 f9d8 	bl	8008348 <memcpy>
	}
}
 8005f98:	bf00      	nop
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fa8:	f001 feac 	bl	8007d04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fb4:	e011      	b.n	8005fda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d012      	beq.n	8005fe4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3324      	adds	r3, #36	; 0x24
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fd5e 	bl	8006a84 <xTaskRemoveFromEventList>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fce:	f000 fe33 	bl	8006c38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	dce9      	bgt.n	8005fb6 <prvUnlockQueue+0x16>
 8005fe2:	e000      	b.n	8005fe6 <prvUnlockQueue+0x46>
					break;
 8005fe4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	22ff      	movs	r2, #255	; 0xff
 8005fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fee:	f001 feb9 	bl	8007d64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ff2:	f001 fe87 	bl	8007d04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ffc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ffe:	e011      	b.n	8006024 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d012      	beq.n	800602e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3310      	adds	r3, #16
 800600c:	4618      	mov	r0, r3
 800600e:	f000 fd39 	bl	8006a84 <xTaskRemoveFromEventList>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006018:	f000 fe0e 	bl	8006c38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800601c:	7bbb      	ldrb	r3, [r7, #14]
 800601e:	3b01      	subs	r3, #1
 8006020:	b2db      	uxtb	r3, r3
 8006022:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006024:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006028:	2b00      	cmp	r3, #0
 800602a:	dce9      	bgt.n	8006000 <prvUnlockQueue+0x60>
 800602c:	e000      	b.n	8006030 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800602e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	22ff      	movs	r2, #255	; 0xff
 8006034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006038:	f001 fe94 	bl	8007d64 <vPortExitCritical>
}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800604c:	f001 fe5a 	bl	8007d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	2b00      	cmp	r3, #0
 8006056:	d102      	bne.n	800605e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006058:	2301      	movs	r3, #1
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	e001      	b.n	8006062 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800605e:	2300      	movs	r3, #0
 8006060:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006062:	f001 fe7f 	bl	8007d64 <vPortExitCritical>

	return xReturn;
 8006066:	68fb      	ldr	r3, [r7, #12]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006078:	f001 fe44 	bl	8007d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006084:	429a      	cmp	r2, r3
 8006086:	d102      	bne.n	800608e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006088:	2301      	movs	r3, #1
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	e001      	b.n	8006092 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006092:	f001 fe67 	bl	8007d64 <vPortExitCritical>

	return xReturn;
 8006096:	68fb      	ldr	r3, [r7, #12]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <xQueueIsQueueFullFromISR+0x24>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	60bb      	str	r3, [r7, #8]
}
 80060c0:	bf00      	nop
 80060c2:	e7fe      	b.n	80060c2 <xQueueIsQueueFullFromISR+0x22>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d102      	bne.n	80060d6 <xQueueIsQueueFullFromISR+0x36>
	{
		xReturn = pdTRUE;
 80060d0:	2301      	movs	r3, #1
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e001      	b.n	80060da <xQueueIsQueueFullFromISR+0x3a>
	}
	else
	{
		xReturn = pdFALSE;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80060da:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	e014      	b.n	8006122 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060f8:	4a0f      	ldr	r2, [pc, #60]	; (8006138 <vQueueAddToRegistry+0x50>)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10b      	bne.n	800611c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006104:	490c      	ldr	r1, [pc, #48]	; (8006138 <vQueueAddToRegistry+0x50>)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800610e:	4a0a      	ldr	r2, [pc, #40]	; (8006138 <vQueueAddToRegistry+0x50>)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	4413      	add	r3, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800611a:	e006      	b.n	800612a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	3301      	adds	r3, #1
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b07      	cmp	r3, #7
 8006126:	d9e7      	bls.n	80060f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	20000cc8 	.word	0x20000cc8

0800613c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800614c:	f001 fdda 	bl	8007d04 <vPortEnterCritical>
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006156:	b25b      	sxtb	r3, r3
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615c:	d103      	bne.n	8006166 <vQueueWaitForMessageRestricted+0x2a>
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800616c:	b25b      	sxtb	r3, r3
 800616e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006172:	d103      	bne.n	800617c <vQueueWaitForMessageRestricted+0x40>
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800617c:	f001 fdf2 	bl	8007d64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	2b00      	cmp	r3, #0
 8006186:	d106      	bne.n	8006196 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	3324      	adds	r3, #36	; 0x24
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fc4b 	bl	8006a2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006196:	6978      	ldr	r0, [r7, #20]
 8006198:	f7ff ff02 	bl	8005fa0 <prvUnlockQueue>
	}
 800619c:	bf00      	nop
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08e      	sub	sp, #56	; 0x38
 80061a8:	af04      	add	r7, sp, #16
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	623b      	str	r3, [r7, #32]
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <xTaskCreateStatic+0x46>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	61fb      	str	r3, [r7, #28]
}
 80061e6:	bf00      	nop
 80061e8:	e7fe      	b.n	80061e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061ea:	23b4      	movs	r3, #180	; 0xb4
 80061ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	2bb4      	cmp	r3, #180	; 0xb4
 80061f2:	d00a      	beq.n	800620a <xTaskCreateStatic+0x66>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	61bb      	str	r3, [r7, #24]
}
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01e      	beq.n	800624e <xTaskCreateStatic+0xaa>
 8006210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006212:	2b00      	cmp	r3, #0
 8006214:	d01b      	beq.n	800624e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800621e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	2202      	movs	r2, #2
 8006224:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006228:	2300      	movs	r3, #0
 800622a:	9303      	str	r3, [sp, #12]
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	9302      	str	r3, [sp, #8]
 8006230:	f107 0314 	add.w	r3, r7, #20
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 f851 	bl	80062e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006248:	f000 f8e4 	bl	8006414 <prvAddNewTaskToReadyList>
 800624c:	e001      	b.n	8006252 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006252:	697b      	ldr	r3, [r7, #20]
	}
 8006254:	4618      	mov	r0, r3
 8006256:	3728      	adds	r7, #40	; 0x28
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08c      	sub	sp, #48	; 0x30
 8006260:	af04      	add	r7, sp, #16
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	4613      	mov	r3, r2
 800626a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800626c:	88fb      	ldrh	r3, [r7, #6]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4618      	mov	r0, r3
 8006272:	f001 fe69 	bl	8007f48 <pvPortMalloc>
 8006276:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00e      	beq.n	800629c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800627e:	20b4      	movs	r0, #180	; 0xb4
 8006280:	f001 fe62 	bl	8007f48 <pvPortMalloc>
 8006284:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
 8006292:	e005      	b.n	80062a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006294:	6978      	ldr	r0, [r7, #20]
 8006296:	f001 ff1b 	bl	80080d0 <vPortFree>
 800629a:	e001      	b.n	80062a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800629c:	2300      	movs	r3, #0
 800629e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d017      	beq.n	80062d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062ae:	88fa      	ldrh	r2, [r7, #6]
 80062b0:	2300      	movs	r3, #0
 80062b2:	9303      	str	r3, [sp, #12]
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	9302      	str	r3, [sp, #8]
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	9301      	str	r3, [sp, #4]
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	68b9      	ldr	r1, [r7, #8]
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 f80f 	bl	80062e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062ca:	69f8      	ldr	r0, [r7, #28]
 80062cc:	f000 f8a2 	bl	8006414 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062d0:	2301      	movs	r3, #1
 80062d2:	61bb      	str	r3, [r7, #24]
 80062d4:	e002      	b.n	80062dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062d6:	f04f 33ff 	mov.w	r3, #4294967295
 80062da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062dc:	69bb      	ldr	r3, [r7, #24]
	}
 80062de:	4618      	mov	r0, r3
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006300:	3b01      	subs	r3, #1
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	f023 0307 	bic.w	r3, r3, #7
 800630e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	f003 0307 	and.w	r3, r3, #7
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <prvInitialiseNewTask+0x48>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	617b      	str	r3, [r7, #20]
}
 800632c:	bf00      	nop
 800632e:	e7fe      	b.n	800632e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006330:	2300      	movs	r3, #0
 8006332:	61fb      	str	r3, [r7, #28]
 8006334:	e012      	b.n	800635c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	7819      	ldrb	r1, [r3, #0]
 800633e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	4413      	add	r3, r2
 8006344:	3334      	adds	r3, #52	; 0x34
 8006346:	460a      	mov	r2, r1
 8006348:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	4413      	add	r3, r2
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d006      	beq.n	8006364 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	3301      	adds	r3, #1
 800635a:	61fb      	str	r3, [r7, #28]
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	2b0f      	cmp	r3, #15
 8006360:	d9e9      	bls.n	8006336 <prvInitialiseNewTask+0x4e>
 8006362:	e000      	b.n	8006366 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006364:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	2b06      	cmp	r3, #6
 8006372:	d901      	bls.n	8006378 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006374:	2306      	movs	r3, #6
 8006376:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800637c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006382:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	2200      	movs	r2, #0
 8006388:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	3304      	adds	r3, #4
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff f892 	bl	80054b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	3318      	adds	r3, #24
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff f88d 	bl	80054b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	f1c3 0207 	rsb	r2, r3, #7
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c6:	334c      	adds	r3, #76	; 0x4c
 80063c8:	2260      	movs	r2, #96	; 0x60
 80063ca:	2100      	movs	r1, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 ffc9 	bl	8008364 <memset>
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	4a0c      	ldr	r2, [pc, #48]	; (8006408 <prvInitialiseNewTask+0x120>)
 80063d6:	651a      	str	r2, [r3, #80]	; 0x50
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	4a0c      	ldr	r2, [pc, #48]	; (800640c <prvInitialiseNewTask+0x124>)
 80063dc:	655a      	str	r2, [r3, #84]	; 0x54
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	4a0b      	ldr	r2, [pc, #44]	; (8006410 <prvInitialiseNewTask+0x128>)
 80063e2:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	68f9      	ldr	r1, [r7, #12]
 80063e8:	69b8      	ldr	r0, [r7, #24]
 80063ea:	f001 fb61 	bl	8007ab0 <pxPortInitialiseStack>
 80063ee:	4602      	mov	r2, r0
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80063f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006400:	bf00      	nop
 8006402:	3720      	adds	r7, #32
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	08008740 	.word	0x08008740
 800640c:	08008760 	.word	0x08008760
 8006410:	08008720 	.word	0x08008720

08006414 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800641c:	f001 fc72 	bl	8007d04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006420:	4b2a      	ldr	r3, [pc, #168]	; (80064cc <prvAddNewTaskToReadyList+0xb8>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3301      	adds	r3, #1
 8006426:	4a29      	ldr	r2, [pc, #164]	; (80064cc <prvAddNewTaskToReadyList+0xb8>)
 8006428:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800642a:	4b29      	ldr	r3, [pc, #164]	; (80064d0 <prvAddNewTaskToReadyList+0xbc>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006432:	4a27      	ldr	r2, [pc, #156]	; (80064d0 <prvAddNewTaskToReadyList+0xbc>)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006438:	4b24      	ldr	r3, [pc, #144]	; (80064cc <prvAddNewTaskToReadyList+0xb8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d110      	bne.n	8006462 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006440:	f000 fc1e 	bl	8006c80 <prvInitialiseTaskLists>
 8006444:	e00d      	b.n	8006462 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006446:	4b23      	ldr	r3, [pc, #140]	; (80064d4 <prvAddNewTaskToReadyList+0xc0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d109      	bne.n	8006462 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800644e:	4b20      	ldr	r3, [pc, #128]	; (80064d0 <prvAddNewTaskToReadyList+0xbc>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	429a      	cmp	r2, r3
 800645a:	d802      	bhi.n	8006462 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800645c:	4a1c      	ldr	r2, [pc, #112]	; (80064d0 <prvAddNewTaskToReadyList+0xbc>)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006462:	4b1d      	ldr	r3, [pc, #116]	; (80064d8 <prvAddNewTaskToReadyList+0xc4>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3301      	adds	r3, #1
 8006468:	4a1b      	ldr	r2, [pc, #108]	; (80064d8 <prvAddNewTaskToReadyList+0xc4>)
 800646a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	2201      	movs	r2, #1
 8006472:	409a      	lsls	r2, r3
 8006474:	4b19      	ldr	r3, [pc, #100]	; (80064dc <prvAddNewTaskToReadyList+0xc8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4313      	orrs	r3, r2
 800647a:	4a18      	ldr	r2, [pc, #96]	; (80064dc <prvAddNewTaskToReadyList+0xc8>)
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4a15      	ldr	r2, [pc, #84]	; (80064e0 <prvAddNewTaskToReadyList+0xcc>)
 800648c:	441a      	add	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3304      	adds	r3, #4
 8006492:	4619      	mov	r1, r3
 8006494:	4610      	mov	r0, r2
 8006496:	f7ff f81c 	bl	80054d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800649a:	f001 fc63 	bl	8007d64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800649e:	4b0d      	ldr	r3, [pc, #52]	; (80064d4 <prvAddNewTaskToReadyList+0xc0>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00e      	beq.n	80064c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064a6:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <prvAddNewTaskToReadyList+0xbc>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d207      	bcs.n	80064c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064b4:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <prvAddNewTaskToReadyList+0xd0>)
 80064b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20000e08 	.word	0x20000e08
 80064d0:	20000d08 	.word	0x20000d08
 80064d4:	20000e14 	.word	0x20000e14
 80064d8:	20000e24 	.word	0x20000e24
 80064dc:	20000e10 	.word	0x20000e10
 80064e0:	20000d0c 	.word	0x20000d0c
 80064e4:	e000ed04 	.word	0xe000ed04

080064e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d017      	beq.n	800652a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064fa:	4b13      	ldr	r3, [pc, #76]	; (8006548 <vTaskDelay+0x60>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <vTaskDelay+0x30>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	60bb      	str	r3, [r7, #8]
}
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006518:	f000 f88a 	bl	8006630 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800651c:	2100      	movs	r1, #0
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fef4 	bl	800730c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006524:	f000 f892 	bl	800664c <xTaskResumeAll>
 8006528:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d107      	bne.n	8006540 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006530:	4b06      	ldr	r3, [pc, #24]	; (800654c <vTaskDelay+0x64>)
 8006532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006540:	bf00      	nop
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20000e30 	.word	0x20000e30
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	; 0x28
 8006554:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006556:	2300      	movs	r3, #0
 8006558:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800655a:	2300      	movs	r3, #0
 800655c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800655e:	463a      	mov	r2, r7
 8006560:	1d39      	adds	r1, r7, #4
 8006562:	f107 0308 	add.w	r3, r7, #8
 8006566:	4618      	mov	r0, r3
 8006568:	f7f9 fe44 	bl	80001f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	9202      	str	r2, [sp, #8]
 8006574:	9301      	str	r3, [sp, #4]
 8006576:	2300      	movs	r3, #0
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	2300      	movs	r3, #0
 800657c:	460a      	mov	r2, r1
 800657e:	4924      	ldr	r1, [pc, #144]	; (8006610 <vTaskStartScheduler+0xc0>)
 8006580:	4824      	ldr	r0, [pc, #144]	; (8006614 <vTaskStartScheduler+0xc4>)
 8006582:	f7ff fe0f 	bl	80061a4 <xTaskCreateStatic>
 8006586:	4603      	mov	r3, r0
 8006588:	4a23      	ldr	r2, [pc, #140]	; (8006618 <vTaskStartScheduler+0xc8>)
 800658a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800658c:	4b22      	ldr	r3, [pc, #136]	; (8006618 <vTaskStartScheduler+0xc8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006594:	2301      	movs	r3, #1
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e001      	b.n	800659e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d102      	bne.n	80065aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80065a4:	f000 ff18 	bl	80073d8 <xTimerCreateTimerTask>
 80065a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d11b      	bne.n	80065e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	613b      	str	r3, [r7, #16]
}
 80065c2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065c4:	4b15      	ldr	r3, [pc, #84]	; (800661c <vTaskStartScheduler+0xcc>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	334c      	adds	r3, #76	; 0x4c
 80065ca:	4a15      	ldr	r2, [pc, #84]	; (8006620 <vTaskStartScheduler+0xd0>)
 80065cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065ce:	4b15      	ldr	r3, [pc, #84]	; (8006624 <vTaskStartScheduler+0xd4>)
 80065d0:	f04f 32ff 	mov.w	r2, #4294967295
 80065d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <vTaskStartScheduler+0xd8>)
 80065d8:	2201      	movs	r2, #1
 80065da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80065dc:	4b13      	ldr	r3, [pc, #76]	; (800662c <vTaskStartScheduler+0xdc>)
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065e2:	f001 faed 	bl	8007bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065e6:	e00e      	b.n	8006606 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ee:	d10a      	bne.n	8006606 <vTaskStartScheduler+0xb6>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	60fb      	str	r3, [r7, #12]
}
 8006602:	bf00      	nop
 8006604:	e7fe      	b.n	8006604 <vTaskStartScheduler+0xb4>
}
 8006606:	bf00      	nop
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	080086d0 	.word	0x080086d0
 8006614:	08006c51 	.word	0x08006c51
 8006618:	20000e2c 	.word	0x20000e2c
 800661c:	20000d08 	.word	0x20000d08
 8006620:	2000001c 	.word	0x2000001c
 8006624:	20000e28 	.word	0x20000e28
 8006628:	20000e14 	.word	0x20000e14
 800662c:	20000e0c 	.word	0x20000e0c

08006630 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006634:	4b04      	ldr	r3, [pc, #16]	; (8006648 <vTaskSuspendAll+0x18>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3301      	adds	r3, #1
 800663a:	4a03      	ldr	r2, [pc, #12]	; (8006648 <vTaskSuspendAll+0x18>)
 800663c:	6013      	str	r3, [r2, #0]
}
 800663e:	bf00      	nop
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	20000e30 	.word	0x20000e30

0800664c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006656:	2300      	movs	r3, #0
 8006658:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800665a:	4b41      	ldr	r3, [pc, #260]	; (8006760 <xTaskResumeAll+0x114>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <xTaskResumeAll+0x2c>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	603b      	str	r3, [r7, #0]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006678:	f001 fb44 	bl	8007d04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800667c:	4b38      	ldr	r3, [pc, #224]	; (8006760 <xTaskResumeAll+0x114>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3b01      	subs	r3, #1
 8006682:	4a37      	ldr	r2, [pc, #220]	; (8006760 <xTaskResumeAll+0x114>)
 8006684:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006686:	4b36      	ldr	r3, [pc, #216]	; (8006760 <xTaskResumeAll+0x114>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d161      	bne.n	8006752 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800668e:	4b35      	ldr	r3, [pc, #212]	; (8006764 <xTaskResumeAll+0x118>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d05d      	beq.n	8006752 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006696:	e02e      	b.n	80066f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006698:	4b33      	ldr	r3, [pc, #204]	; (8006768 <xTaskResumeAll+0x11c>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3318      	adds	r3, #24
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fe ff71 	bl	800558c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3304      	adds	r3, #4
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe ff6c 	bl	800558c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	2201      	movs	r2, #1
 80066ba:	409a      	lsls	r2, r3
 80066bc:	4b2b      	ldr	r3, [pc, #172]	; (800676c <xTaskResumeAll+0x120>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	4a2a      	ldr	r2, [pc, #168]	; (800676c <xTaskResumeAll+0x120>)
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4a27      	ldr	r2, [pc, #156]	; (8006770 <xTaskResumeAll+0x124>)
 80066d4:	441a      	add	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3304      	adds	r3, #4
 80066da:	4619      	mov	r1, r3
 80066dc:	4610      	mov	r0, r2
 80066de:	f7fe fef8 	bl	80054d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e6:	4b23      	ldr	r3, [pc, #140]	; (8006774 <xTaskResumeAll+0x128>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d302      	bcc.n	80066f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80066f0:	4b21      	ldr	r3, [pc, #132]	; (8006778 <xTaskResumeAll+0x12c>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066f6:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <xTaskResumeAll+0x11c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1cc      	bne.n	8006698 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006704:	f000 fb5e 	bl	8006dc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006708:	4b1c      	ldr	r3, [pc, #112]	; (800677c <xTaskResumeAll+0x130>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d010      	beq.n	8006736 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006714:	f000 f846 	bl	80067a4 <xTaskIncrementTick>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800671e:	4b16      	ldr	r3, [pc, #88]	; (8006778 <xTaskResumeAll+0x12c>)
 8006720:	2201      	movs	r2, #1
 8006722:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3b01      	subs	r3, #1
 8006728:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1f1      	bne.n	8006714 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006730:	4b12      	ldr	r3, [pc, #72]	; (800677c <xTaskResumeAll+0x130>)
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006736:	4b10      	ldr	r3, [pc, #64]	; (8006778 <xTaskResumeAll+0x12c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d009      	beq.n	8006752 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800673e:	2301      	movs	r3, #1
 8006740:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006742:	4b0f      	ldr	r3, [pc, #60]	; (8006780 <xTaskResumeAll+0x134>)
 8006744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006752:	f001 fb07 	bl	8007d64 <vPortExitCritical>

	return xAlreadyYielded;
 8006756:	68bb      	ldr	r3, [r7, #8]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20000e30 	.word	0x20000e30
 8006764:	20000e08 	.word	0x20000e08
 8006768:	20000dc8 	.word	0x20000dc8
 800676c:	20000e10 	.word	0x20000e10
 8006770:	20000d0c 	.word	0x20000d0c
 8006774:	20000d08 	.word	0x20000d08
 8006778:	20000e1c 	.word	0x20000e1c
 800677c:	20000e18 	.word	0x20000e18
 8006780:	e000ed04 	.word	0xe000ed04

08006784 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800678a:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <xTaskGetTickCount+0x1c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006790:	687b      	ldr	r3, [r7, #4]
}
 8006792:	4618      	mov	r0, r3
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	20000e0c 	.word	0x20000e0c

080067a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067aa:	2300      	movs	r3, #0
 80067ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067ae:	4b51      	ldr	r3, [pc, #324]	; (80068f4 <xTaskIncrementTick+0x150>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f040 808d 	bne.w	80068d2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067b8:	4b4f      	ldr	r3, [pc, #316]	; (80068f8 <xTaskIncrementTick+0x154>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3301      	adds	r3, #1
 80067be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067c0:	4a4d      	ldr	r2, [pc, #308]	; (80068f8 <xTaskIncrementTick+0x154>)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d120      	bne.n	800680e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80067cc:	4b4b      	ldr	r3, [pc, #300]	; (80068fc <xTaskIncrementTick+0x158>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <xTaskIncrementTick+0x48>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	603b      	str	r3, [r7, #0]
}
 80067e8:	bf00      	nop
 80067ea:	e7fe      	b.n	80067ea <xTaskIncrementTick+0x46>
 80067ec:	4b43      	ldr	r3, [pc, #268]	; (80068fc <xTaskIncrementTick+0x158>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	4b43      	ldr	r3, [pc, #268]	; (8006900 <xTaskIncrementTick+0x15c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a41      	ldr	r2, [pc, #260]	; (80068fc <xTaskIncrementTick+0x158>)
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	4a41      	ldr	r2, [pc, #260]	; (8006900 <xTaskIncrementTick+0x15c>)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	4b40      	ldr	r3, [pc, #256]	; (8006904 <xTaskIncrementTick+0x160>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3301      	adds	r3, #1
 8006806:	4a3f      	ldr	r2, [pc, #252]	; (8006904 <xTaskIncrementTick+0x160>)
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	f000 fadb 	bl	8006dc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800680e:	4b3e      	ldr	r3, [pc, #248]	; (8006908 <xTaskIncrementTick+0x164>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	429a      	cmp	r2, r3
 8006816:	d34d      	bcc.n	80068b4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006818:	4b38      	ldr	r3, [pc, #224]	; (80068fc <xTaskIncrementTick+0x158>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <xTaskIncrementTick+0x82>
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <xTaskIncrementTick+0x84>
 8006826:	2300      	movs	r3, #0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800682c:	4b36      	ldr	r3, [pc, #216]	; (8006908 <xTaskIncrementTick+0x164>)
 800682e:	f04f 32ff 	mov.w	r2, #4294967295
 8006832:	601a      	str	r2, [r3, #0]
					break;
 8006834:	e03e      	b.n	80068b4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006836:	4b31      	ldr	r3, [pc, #196]	; (80068fc <xTaskIncrementTick+0x158>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	429a      	cmp	r2, r3
 800684c:	d203      	bcs.n	8006856 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800684e:	4a2e      	ldr	r2, [pc, #184]	; (8006908 <xTaskIncrementTick+0x164>)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6013      	str	r3, [r2, #0]
						break;
 8006854:	e02e      	b.n	80068b4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	3304      	adds	r3, #4
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe fe96 	bl	800558c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	3318      	adds	r3, #24
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe fe8d 	bl	800558c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006876:	2201      	movs	r2, #1
 8006878:	409a      	lsls	r2, r3
 800687a:	4b24      	ldr	r3, [pc, #144]	; (800690c <xTaskIncrementTick+0x168>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4313      	orrs	r3, r2
 8006880:	4a22      	ldr	r2, [pc, #136]	; (800690c <xTaskIncrementTick+0x168>)
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4a1f      	ldr	r2, [pc, #124]	; (8006910 <xTaskIncrementTick+0x16c>)
 8006892:	441a      	add	r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	3304      	adds	r3, #4
 8006898:	4619      	mov	r1, r3
 800689a:	4610      	mov	r0, r2
 800689c:	f7fe fe19 	bl	80054d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a4:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <xTaskIncrementTick+0x170>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d3b4      	bcc.n	8006818 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80068ae:	2301      	movs	r3, #1
 80068b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068b2:	e7b1      	b.n	8006818 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068b4:	4b17      	ldr	r3, [pc, #92]	; (8006914 <xTaskIncrementTick+0x170>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ba:	4915      	ldr	r1, [pc, #84]	; (8006910 <xTaskIncrementTick+0x16c>)
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d907      	bls.n	80068dc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80068cc:	2301      	movs	r3, #1
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	e004      	b.n	80068dc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80068d2:	4b11      	ldr	r3, [pc, #68]	; (8006918 <xTaskIncrementTick+0x174>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3301      	adds	r3, #1
 80068d8:	4a0f      	ldr	r2, [pc, #60]	; (8006918 <xTaskIncrementTick+0x174>)
 80068da:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80068dc:	4b0f      	ldr	r3, [pc, #60]	; (800691c <xTaskIncrementTick+0x178>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80068e4:	2301      	movs	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80068e8:	697b      	ldr	r3, [r7, #20]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20000e30 	.word	0x20000e30
 80068f8:	20000e0c 	.word	0x20000e0c
 80068fc:	20000dc0 	.word	0x20000dc0
 8006900:	20000dc4 	.word	0x20000dc4
 8006904:	20000e20 	.word	0x20000e20
 8006908:	20000e28 	.word	0x20000e28
 800690c:	20000e10 	.word	0x20000e10
 8006910:	20000d0c 	.word	0x20000d0c
 8006914:	20000d08 	.word	0x20000d08
 8006918:	20000e18 	.word	0x20000e18
 800691c:	20000e1c 	.word	0x20000e1c

08006920 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006926:	4b29      	ldr	r3, [pc, #164]	; (80069cc <vTaskSwitchContext+0xac>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800692e:	4b28      	ldr	r3, [pc, #160]	; (80069d0 <vTaskSwitchContext+0xb0>)
 8006930:	2201      	movs	r2, #1
 8006932:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006934:	e044      	b.n	80069c0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006936:	4b26      	ldr	r3, [pc, #152]	; (80069d0 <vTaskSwitchContext+0xb0>)
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800693c:	4b25      	ldr	r3, [pc, #148]	; (80069d4 <vTaskSwitchContext+0xb4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	fab3 f383 	clz	r3, r3
 8006948:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800694a:	7afb      	ldrb	r3, [r7, #11]
 800694c:	f1c3 031f 	rsb	r3, r3, #31
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	4921      	ldr	r1, [pc, #132]	; (80069d8 <vTaskSwitchContext+0xb8>)
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	440b      	add	r3, r1
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10a      	bne.n	800697c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	607b      	str	r3, [r7, #4]
}
 8006978:	bf00      	nop
 800697a:	e7fe      	b.n	800697a <vTaskSwitchContext+0x5a>
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4613      	mov	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4a14      	ldr	r2, [pc, #80]	; (80069d8 <vTaskSwitchContext+0xb8>)
 8006988:	4413      	add	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	605a      	str	r2, [r3, #4]
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	3308      	adds	r3, #8
 800699e:	429a      	cmp	r2, r3
 80069a0:	d104      	bne.n	80069ac <vTaskSwitchContext+0x8c>
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	605a      	str	r2, [r3, #4]
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	4a0a      	ldr	r2, [pc, #40]	; (80069dc <vTaskSwitchContext+0xbc>)
 80069b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069b6:	4b09      	ldr	r3, [pc, #36]	; (80069dc <vTaskSwitchContext+0xbc>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	334c      	adds	r3, #76	; 0x4c
 80069bc:	4a08      	ldr	r2, [pc, #32]	; (80069e0 <vTaskSwitchContext+0xc0>)
 80069be:	6013      	str	r3, [r2, #0]
}
 80069c0:	bf00      	nop
 80069c2:	371c      	adds	r7, #28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	20000e30 	.word	0x20000e30
 80069d0:	20000e1c 	.word	0x20000e1c
 80069d4:	20000e10 	.word	0x20000e10
 80069d8:	20000d0c 	.word	0x20000d0c
 80069dc:	20000d08 	.word	0x20000d08
 80069e0:	2000001c 	.word	0x2000001c

080069e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10a      	bne.n	8006a0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	60fb      	str	r3, [r7, #12]
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a0a:	4b07      	ldr	r3, [pc, #28]	; (8006a28 <vTaskPlaceOnEventList+0x44>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3318      	adds	r3, #24
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fe fd81 	bl	800551a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a18:	2101      	movs	r1, #1
 8006a1a:	6838      	ldr	r0, [r7, #0]
 8006a1c:	f000 fc76 	bl	800730c <prvAddCurrentTaskToDelayedList>
}
 8006a20:	bf00      	nop
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20000d08 	.word	0x20000d08

08006a2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10a      	bne.n	8006a54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	617b      	str	r3, [r7, #20]
}
 8006a50:	bf00      	nop
 8006a52:	e7fe      	b.n	8006a52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a54:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3318      	adds	r3, #24
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f7fe fd38 	bl	80054d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a68:	f04f 33ff 	mov.w	r3, #4294967295
 8006a6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	68b8      	ldr	r0, [r7, #8]
 8006a72:	f000 fc4b 	bl	800730c <prvAddCurrentTaskToDelayedList>
	}
 8006a76:	bf00      	nop
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000d08 	.word	0x20000d08

08006a84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10a      	bne.n	8006ab0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	60fb      	str	r3, [r7, #12]
}
 8006aac:	bf00      	nop
 8006aae:	e7fe      	b.n	8006aae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	3318      	adds	r3, #24
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fe fd69 	bl	800558c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aba:	4b1d      	ldr	r3, [pc, #116]	; (8006b30 <xTaskRemoveFromEventList+0xac>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d11c      	bne.n	8006afc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fe fd60 	bl	800558c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	409a      	lsls	r2, r3
 8006ad4:	4b17      	ldr	r3, [pc, #92]	; (8006b34 <xTaskRemoveFromEventList+0xb0>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	4a16      	ldr	r2, [pc, #88]	; (8006b34 <xTaskRemoveFromEventList+0xb0>)
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4a13      	ldr	r2, [pc, #76]	; (8006b38 <xTaskRemoveFromEventList+0xb4>)
 8006aec:	441a      	add	r2, r3
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	3304      	adds	r3, #4
 8006af2:	4619      	mov	r1, r3
 8006af4:	4610      	mov	r0, r2
 8006af6:	f7fe fcec 	bl	80054d2 <vListInsertEnd>
 8006afa:	e005      	b.n	8006b08 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	3318      	adds	r3, #24
 8006b00:	4619      	mov	r1, r3
 8006b02:	480e      	ldr	r0, [pc, #56]	; (8006b3c <xTaskRemoveFromEventList+0xb8>)
 8006b04:	f7fe fce5 	bl	80054d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	4b0c      	ldr	r3, [pc, #48]	; (8006b40 <xTaskRemoveFromEventList+0xbc>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d905      	bls.n	8006b22 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b16:	2301      	movs	r3, #1
 8006b18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b1a:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <xTaskRemoveFromEventList+0xc0>)
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	e001      	b.n	8006b26 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006b26:	697b      	ldr	r3, [r7, #20]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	20000e30 	.word	0x20000e30
 8006b34:	20000e10 	.word	0x20000e10
 8006b38:	20000d0c 	.word	0x20000d0c
 8006b3c:	20000dc8 	.word	0x20000dc8
 8006b40:	20000d08 	.word	0x20000d08
 8006b44:	20000e1c 	.word	0x20000e1c

08006b48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b50:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <vTaskInternalSetTimeOutState+0x24>)
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b58:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <vTaskInternalSetTimeOutState+0x28>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	605a      	str	r2, [r3, #4]
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	20000e20 	.word	0x20000e20
 8006b70:	20000e0c 	.word	0x20000e0c

08006b74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	613b      	str	r3, [r7, #16]
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10a      	bne.n	8006bb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	60fb      	str	r3, [r7, #12]
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006bb6:	f001 f8a5 	bl	8007d04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bba:	4b1d      	ldr	r3, [pc, #116]	; (8006c30 <xTaskCheckForTimeOut+0xbc>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd2:	d102      	bne.n	8006bda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	61fb      	str	r3, [r7, #28]
 8006bd8:	e023      	b.n	8006c22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	4b15      	ldr	r3, [pc, #84]	; (8006c34 <xTaskCheckForTimeOut+0xc0>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d007      	beq.n	8006bf6 <xTaskCheckForTimeOut+0x82>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d302      	bcc.n	8006bf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	e015      	b.n	8006c22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d20b      	bcs.n	8006c18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	1ad2      	subs	r2, r2, r3
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff ff9b 	bl	8006b48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
 8006c16:	e004      	b.n	8006c22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c22:	f001 f89f 	bl	8007d64 <vPortExitCritical>

	return xReturn;
 8006c26:	69fb      	ldr	r3, [r7, #28]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3720      	adds	r7, #32
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000e0c 	.word	0x20000e0c
 8006c34:	20000e20 	.word	0x20000e20

08006c38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c3c:	4b03      	ldr	r3, [pc, #12]	; (8006c4c <vTaskMissedYield+0x14>)
 8006c3e:	2201      	movs	r2, #1
 8006c40:	601a      	str	r2, [r3, #0]
}
 8006c42:	bf00      	nop
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	20000e1c 	.word	0x20000e1c

08006c50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c58:	f000 f852 	bl	8006d00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c5c:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <prvIdleTask+0x28>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d9f9      	bls.n	8006c58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c64:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <prvIdleTask+0x2c>)
 8006c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c74:	e7f0      	b.n	8006c58 <prvIdleTask+0x8>
 8006c76:	bf00      	nop
 8006c78:	20000d0c 	.word	0x20000d0c
 8006c7c:	e000ed04 	.word	0xe000ed04

08006c80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c86:	2300      	movs	r3, #0
 8006c88:	607b      	str	r3, [r7, #4]
 8006c8a:	e00c      	b.n	8006ca6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4a12      	ldr	r2, [pc, #72]	; (8006ce0 <prvInitialiseTaskLists+0x60>)
 8006c98:	4413      	add	r3, r2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fbec 	bl	8005478 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	607b      	str	r3, [r7, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b06      	cmp	r3, #6
 8006caa:	d9ef      	bls.n	8006c8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cac:	480d      	ldr	r0, [pc, #52]	; (8006ce4 <prvInitialiseTaskLists+0x64>)
 8006cae:	f7fe fbe3 	bl	8005478 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cb2:	480d      	ldr	r0, [pc, #52]	; (8006ce8 <prvInitialiseTaskLists+0x68>)
 8006cb4:	f7fe fbe0 	bl	8005478 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cb8:	480c      	ldr	r0, [pc, #48]	; (8006cec <prvInitialiseTaskLists+0x6c>)
 8006cba:	f7fe fbdd 	bl	8005478 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cbe:	480c      	ldr	r0, [pc, #48]	; (8006cf0 <prvInitialiseTaskLists+0x70>)
 8006cc0:	f7fe fbda 	bl	8005478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cc4:	480b      	ldr	r0, [pc, #44]	; (8006cf4 <prvInitialiseTaskLists+0x74>)
 8006cc6:	f7fe fbd7 	bl	8005478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cca:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <prvInitialiseTaskLists+0x78>)
 8006ccc:	4a05      	ldr	r2, [pc, #20]	; (8006ce4 <prvInitialiseTaskLists+0x64>)
 8006cce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <prvInitialiseTaskLists+0x7c>)
 8006cd2:	4a05      	ldr	r2, [pc, #20]	; (8006ce8 <prvInitialiseTaskLists+0x68>)
 8006cd4:	601a      	str	r2, [r3, #0]
}
 8006cd6:	bf00      	nop
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000d0c 	.word	0x20000d0c
 8006ce4:	20000d98 	.word	0x20000d98
 8006ce8:	20000dac 	.word	0x20000dac
 8006cec:	20000dc8 	.word	0x20000dc8
 8006cf0:	20000ddc 	.word	0x20000ddc
 8006cf4:	20000df4 	.word	0x20000df4
 8006cf8:	20000dc0 	.word	0x20000dc0
 8006cfc:	20000dc4 	.word	0x20000dc4

08006d00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d06:	e019      	b.n	8006d3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d08:	f000 fffc 	bl	8007d04 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006d0c:	4b10      	ldr	r3, [pc, #64]	; (8006d50 <prvCheckTasksWaitingTermination+0x50>)
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fe fc37 	bl	800558c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d1e:	4b0d      	ldr	r3, [pc, #52]	; (8006d54 <prvCheckTasksWaitingTermination+0x54>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	4a0b      	ldr	r2, [pc, #44]	; (8006d54 <prvCheckTasksWaitingTermination+0x54>)
 8006d26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d28:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <prvCheckTasksWaitingTermination+0x58>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	4a0a      	ldr	r2, [pc, #40]	; (8006d58 <prvCheckTasksWaitingTermination+0x58>)
 8006d30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d32:	f001 f817 	bl	8007d64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f810 	bl	8006d5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <prvCheckTasksWaitingTermination+0x58>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e1      	bne.n	8006d08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000ddc 	.word	0x20000ddc
 8006d54:	20000e08 	.word	0x20000e08
 8006d58:	20000df0 	.word	0x20000df0

08006d5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	334c      	adds	r3, #76	; 0x4c
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f001 fb11 	bl	8008390 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d108      	bne.n	8006d8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f001 f9a7 	bl	80080d0 <vPortFree>
				vPortFree( pxTCB );
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 f9a4 	bl	80080d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d88:	e018      	b.n	8006dbc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d103      	bne.n	8006d9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 f99b 	bl	80080d0 <vPortFree>
	}
 8006d9a:	e00f      	b.n	8006dbc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d00a      	beq.n	8006dbc <prvDeleteTCB+0x60>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	60fb      	str	r3, [r7, #12]
}
 8006db8:	bf00      	nop
 8006dba:	e7fe      	b.n	8006dba <prvDeleteTCB+0x5e>
	}
 8006dbc:	bf00      	nop
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dca:	4b0f      	ldr	r3, [pc, #60]	; (8006e08 <prvResetNextTaskUnblockTime+0x44>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <prvResetNextTaskUnblockTime+0x14>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e000      	b.n	8006dda <prvResetNextTaskUnblockTime+0x16>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d004      	beq.n	8006de8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dde:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <prvResetNextTaskUnblockTime+0x48>)
 8006de0:	f04f 32ff 	mov.w	r2, #4294967295
 8006de4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006de6:	e008      	b.n	8006dfa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006de8:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <prvResetNextTaskUnblockTime+0x44>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	4a05      	ldr	r2, [pc, #20]	; (8006e0c <prvResetNextTaskUnblockTime+0x48>)
 8006df8:	6013      	str	r3, [r2, #0]
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	20000dc0 	.word	0x20000dc0
 8006e0c:	20000e28 	.word	0x20000e28

08006e10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e16:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <xTaskGetSchedulerState+0x34>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d102      	bne.n	8006e24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	607b      	str	r3, [r7, #4]
 8006e22:	e008      	b.n	8006e36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e24:	4b08      	ldr	r3, [pc, #32]	; (8006e48 <xTaskGetSchedulerState+0x38>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d102      	bne.n	8006e32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	607b      	str	r3, [r7, #4]
 8006e30:	e001      	b.n	8006e36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e32:	2300      	movs	r3, #0
 8006e34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e36:	687b      	ldr	r3, [r7, #4]
	}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	20000e14 	.word	0x20000e14
 8006e48:	20000e30 	.word	0x20000e30

08006e4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d06e      	beq.n	8006f40 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e62:	4b3a      	ldr	r3, [pc, #232]	; (8006f4c <xTaskPriorityDisinherit+0x100>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d00a      	beq.n	8006e82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	60fb      	str	r3, [r7, #12]
}
 8006e7e:	bf00      	nop
 8006e80:	e7fe      	b.n	8006e80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10a      	bne.n	8006ea0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	60bb      	str	r3, [r7, #8]
}
 8006e9c:	bf00      	nop
 8006e9e:	e7fe      	b.n	8006e9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea4:	1e5a      	subs	r2, r3, #1
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d044      	beq.n	8006f40 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d140      	bne.n	8006f40 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe fb62 	bl	800558c <uxListRemove>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d115      	bne.n	8006efa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed2:	491f      	ldr	r1, [pc, #124]	; (8006f50 <xTaskPriorityDisinherit+0x104>)
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	440b      	add	r3, r1
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10a      	bne.n	8006efa <xTaskPriorityDisinherit+0xae>
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	2201      	movs	r2, #1
 8006eea:	fa02 f303 	lsl.w	r3, r2, r3
 8006eee:	43da      	mvns	r2, r3
 8006ef0:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <xTaskPriorityDisinherit+0x108>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	4a17      	ldr	r2, [pc, #92]	; (8006f54 <xTaskPriorityDisinherit+0x108>)
 8006ef8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f06:	f1c3 0207 	rsb	r2, r3, #7
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f12:	2201      	movs	r2, #1
 8006f14:	409a      	lsls	r2, r3
 8006f16:	4b0f      	ldr	r3, [pc, #60]	; (8006f54 <xTaskPriorityDisinherit+0x108>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	4a0d      	ldr	r2, [pc, #52]	; (8006f54 <xTaskPriorityDisinherit+0x108>)
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4a08      	ldr	r2, [pc, #32]	; (8006f50 <xTaskPriorityDisinherit+0x104>)
 8006f2e:	441a      	add	r2, r3
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4619      	mov	r1, r3
 8006f36:	4610      	mov	r0, r2
 8006f38:	f7fe facb 	bl	80054d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f40:	697b      	ldr	r3, [r7, #20]
	}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20000d08 	.word	0x20000d08
 8006f50:	20000d0c 	.word	0x20000d0c
 8006f54:	20000e10 	.word	0x20000e10

08006f58 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006f66:	f000 fecd 	bl	8007d04 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006f6a:	4b29      	ldr	r3, [pc, #164]	; (8007010 <xTaskNotifyWait+0xb8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d01c      	beq.n	8006fb2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006f78:	4b25      	ldr	r3, [pc, #148]	; (8007010 <xTaskNotifyWait+0xb8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	43d2      	mvns	r2, r2
 8006f84:	400a      	ands	r2, r1
 8006f86:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006f8a:	4b21      	ldr	r3, [pc, #132]	; (8007010 <xTaskNotifyWait+0xb8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00b      	beq.n	8006fb2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	6838      	ldr	r0, [r7, #0]
 8006f9e:	f000 f9b5 	bl	800730c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006fa2:	4b1c      	ldr	r3, [pc, #112]	; (8007014 <xTaskNotifyWait+0xbc>)
 8006fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006fb2:	f000 fed7 	bl	8007d64 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006fb6:	f000 fea5 	bl	8007d04 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d005      	beq.n	8006fcc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006fc0:	4b13      	ldr	r3, [pc, #76]	; (8007010 <xTaskNotifyWait+0xb8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006fcc:	4b10      	ldr	r3, [pc, #64]	; (8007010 <xTaskNotifyWait+0xb8>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d002      	beq.n	8006fe0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]
 8006fde:	e00a      	b.n	8006ff6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <xTaskNotifyWait+0xb8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	43d2      	mvns	r2, r2
 8006fec:	400a      	ands	r2, r1
 8006fee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ff6:	4b06      	ldr	r3, [pc, #24]	; (8007010 <xTaskNotifyWait+0xb8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8007000:	f000 feb0 	bl	8007d64 <vPortExitCritical>

		return xReturn;
 8007004:	697b      	ldr	r3, [r7, #20]
	}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	20000d08 	.word	0x20000d08
 8007014:	e000ed04 	.word	0xe000ed04

08007018 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08a      	sub	sp, #40	; 0x28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	603b      	str	r3, [r7, #0]
 8007024:	4613      	mov	r3, r2
 8007026:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007028:	2301      	movs	r3, #1
 800702a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10a      	bne.n	8007048 <xTaskGenericNotify+0x30>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	61bb      	str	r3, [r7, #24]
}
 8007044:	bf00      	nop
 8007046:	e7fe      	b.n	8007046 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800704c:	f000 fe5a 	bl	8007d04 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d004      	beq.n	8007060 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007066:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8007070:	79fb      	ldrb	r3, [r7, #7]
 8007072:	2b04      	cmp	r3, #4
 8007074:	d82d      	bhi.n	80070d2 <xTaskGenericNotify+0xba>
 8007076:	a201      	add	r2, pc, #4	; (adr r2, 800707c <xTaskGenericNotify+0x64>)
 8007078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707c:	080070d3 	.word	0x080070d3
 8007080:	08007091 	.word	0x08007091
 8007084:	080070a3 	.word	0x080070a3
 8007088:	080070b3 	.word	0x080070b3
 800708c:	080070bd 	.word	0x080070bd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	431a      	orrs	r2, r3
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80070a0:	e017      	b.n	80070d2 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80070b0:	e00f      	b.n	80070d2 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80070ba:	e00a      	b.n	80070d2 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80070bc:	7ffb      	ldrb	r3, [r7, #31]
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d004      	beq.n	80070cc <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80070ca:	e001      	b.n	80070d0 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 80070cc:	2300      	movs	r3, #0
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80070d0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80070d2:	7ffb      	ldrb	r3, [r7, #31]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d139      	bne.n	800714c <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	3304      	adds	r3, #4
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe fa55 	bl	800558c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	2201      	movs	r2, #1
 80070e8:	409a      	lsls	r2, r3
 80070ea:	4b1c      	ldr	r3, [pc, #112]	; (800715c <xTaskGenericNotify+0x144>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	4a1a      	ldr	r2, [pc, #104]	; (800715c <xTaskGenericNotify+0x144>)
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4a17      	ldr	r2, [pc, #92]	; (8007160 <xTaskGenericNotify+0x148>)
 8007102:	441a      	add	r2, r3
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	3304      	adds	r3, #4
 8007108:	4619      	mov	r1, r3
 800710a:	4610      	mov	r0, r2
 800710c:	f7fe f9e1 	bl	80054d2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00a      	beq.n	800712e <xTaskGenericNotify+0x116>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	617b      	str	r3, [r7, #20]
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007132:	4b0c      	ldr	r3, [pc, #48]	; (8007164 <xTaskGenericNotify+0x14c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	429a      	cmp	r2, r3
 800713a:	d907      	bls.n	800714c <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800713c:	4b0a      	ldr	r3, [pc, #40]	; (8007168 <xTaskGenericNotify+0x150>)
 800713e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800714c:	f000 fe0a 	bl	8007d64 <vPortExitCritical>

		return xReturn;
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007152:	4618      	mov	r0, r3
 8007154:	3728      	adds	r7, #40	; 0x28
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	20000e10 	.word	0x20000e10
 8007160:	20000d0c 	.word	0x20000d0c
 8007164:	20000d08 	.word	0x20000d08
 8007168:	e000ed04 	.word	0xe000ed04

0800716c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08e      	sub	sp, #56	; 0x38
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	603b      	str	r3, [r7, #0]
 8007178:	4613      	mov	r3, r2
 800717a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800717c:	2301      	movs	r3, #1
 800717e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10a      	bne.n	800719c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007198:	bf00      	nop
 800719a:	e7fe      	b.n	800719a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800719c:	f000 fe94 	bl	8007ec8 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80071a4:	f3ef 8211 	mrs	r2, BASEPRI
 80071a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	623a      	str	r2, [r7, #32]
 80071ba:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80071bc:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071be:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d004      	beq.n	80071d0 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80071d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	2202      	movs	r2, #2
 80071de:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d82f      	bhi.n	8007248 <xTaskGenericNotifyFromISR+0xdc>
 80071e8:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <xTaskGenericNotifyFromISR+0x84>)
 80071ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ee:	bf00      	nop
 80071f0:	08007249 	.word	0x08007249
 80071f4:	08007205 	.word	0x08007205
 80071f8:	08007217 	.word	0x08007217
 80071fc:	08007227 	.word	0x08007227
 8007200:	08007231 	.word	0x08007231
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	431a      	orrs	r2, r3
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8007214:	e018      	b.n	8007248 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8007224:	e010      	b.n	8007248 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800722e:	e00b      	b.n	8007248 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007230:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007234:	2b02      	cmp	r3, #2
 8007236:	d004      	beq.n	8007242 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007240:	e001      	b.n	8007246 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 8007242:	2300      	movs	r3, #0
 8007244:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8007246:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007248:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800724c:	2b01      	cmp	r3, #1
 800724e:	d146      	bne.n	80072de <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00a      	beq.n	800726e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	61bb      	str	r3, [r7, #24]
}
 800726a:	bf00      	nop
 800726c:	e7fe      	b.n	800726c <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800726e:	4b21      	ldr	r3, [pc, #132]	; (80072f4 <xTaskGenericNotifyFromISR+0x188>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d11c      	bne.n	80072b0 <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007278:	3304      	adds	r3, #4
 800727a:	4618      	mov	r0, r3
 800727c:	f7fe f986 	bl	800558c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007284:	2201      	movs	r2, #1
 8007286:	409a      	lsls	r2, r3
 8007288:	4b1b      	ldr	r3, [pc, #108]	; (80072f8 <xTaskGenericNotifyFromISR+0x18c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4313      	orrs	r3, r2
 800728e:	4a1a      	ldr	r2, [pc, #104]	; (80072f8 <xTaskGenericNotifyFromISR+0x18c>)
 8007290:	6013      	str	r3, [r2, #0]
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4a17      	ldr	r2, [pc, #92]	; (80072fc <xTaskGenericNotifyFromISR+0x190>)
 80072a0:	441a      	add	r2, r3
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	3304      	adds	r3, #4
 80072a6:	4619      	mov	r1, r3
 80072a8:	4610      	mov	r0, r2
 80072aa:	f7fe f912 	bl	80054d2 <vListInsertEnd>
 80072ae:	e005      	b.n	80072bc <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	3318      	adds	r3, #24
 80072b4:	4619      	mov	r1, r3
 80072b6:	4812      	ldr	r0, [pc, #72]	; (8007300 <xTaskGenericNotifyFromISR+0x194>)
 80072b8:	f7fe f90b 	bl	80054d2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c0:	4b10      	ldr	r3, [pc, #64]	; (8007304 <xTaskGenericNotifyFromISR+0x198>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d909      	bls.n	80072de <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80072ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d003      	beq.n	80072d8 <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80072d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072d2:	2201      	movs	r2, #1
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	e002      	b.n	80072de <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 80072d8:	4b0b      	ldr	r3, [pc, #44]	; (8007308 <xTaskGenericNotifyFromISR+0x19c>)
 80072da:	2201      	movs	r2, #1
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e0:	617b      	str	r3, [r7, #20]
	__asm volatile
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f383 8811 	msr	BASEPRI, r3
}
 80072e8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80072ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3738      	adds	r7, #56	; 0x38
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	20000e30 	.word	0x20000e30
 80072f8:	20000e10 	.word	0x20000e10
 80072fc:	20000d0c 	.word	0x20000d0c
 8007300:	20000dc8 	.word	0x20000dc8
 8007304:	20000d08 	.word	0x20000d08
 8007308:	20000e1c 	.word	0x20000e1c

0800730c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007316:	4b29      	ldr	r3, [pc, #164]	; (80073bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800731c:	4b28      	ldr	r3, [pc, #160]	; (80073c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3304      	adds	r3, #4
 8007322:	4618      	mov	r0, r3
 8007324:	f7fe f932 	bl	800558c <uxListRemove>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10b      	bne.n	8007346 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800732e:	4b24      	ldr	r3, [pc, #144]	; (80073c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	2201      	movs	r2, #1
 8007336:	fa02 f303 	lsl.w	r3, r2, r3
 800733a:	43da      	mvns	r2, r3
 800733c:	4b21      	ldr	r3, [pc, #132]	; (80073c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4013      	ands	r3, r2
 8007342:	4a20      	ldr	r2, [pc, #128]	; (80073c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007344:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734c:	d10a      	bne.n	8007364 <prvAddCurrentTaskToDelayedList+0x58>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d007      	beq.n	8007364 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007354:	4b1a      	ldr	r3, [pc, #104]	; (80073c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3304      	adds	r3, #4
 800735a:	4619      	mov	r1, r3
 800735c:	481a      	ldr	r0, [pc, #104]	; (80073c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800735e:	f7fe f8b8 	bl	80054d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007362:	e026      	b.n	80073b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4413      	add	r3, r2
 800736a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800736c:	4b14      	ldr	r3, [pc, #80]	; (80073c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	429a      	cmp	r2, r3
 800737a:	d209      	bcs.n	8007390 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800737c:	4b13      	ldr	r3, [pc, #76]	; (80073cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	4b0f      	ldr	r3, [pc, #60]	; (80073c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3304      	adds	r3, #4
 8007386:	4619      	mov	r1, r3
 8007388:	4610      	mov	r0, r2
 800738a:	f7fe f8c6 	bl	800551a <vListInsert>
}
 800738e:	e010      	b.n	80073b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007390:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	4b0a      	ldr	r3, [pc, #40]	; (80073c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3304      	adds	r3, #4
 800739a:	4619      	mov	r1, r3
 800739c:	4610      	mov	r0, r2
 800739e:	f7fe f8bc 	bl	800551a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073a2:	4b0c      	ldr	r3, [pc, #48]	; (80073d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d202      	bcs.n	80073b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80073ac:	4a09      	ldr	r2, [pc, #36]	; (80073d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	6013      	str	r3, [r2, #0]
}
 80073b2:	bf00      	nop
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000e0c 	.word	0x20000e0c
 80073c0:	20000d08 	.word	0x20000d08
 80073c4:	20000e10 	.word	0x20000e10
 80073c8:	20000df4 	.word	0x20000df4
 80073cc:	20000dc4 	.word	0x20000dc4
 80073d0:	20000dc0 	.word	0x20000dc0
 80073d4:	20000e28 	.word	0x20000e28

080073d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08a      	sub	sp, #40	; 0x28
 80073dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073e2:	f000 fb05 	bl	80079f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073e6:	4b1c      	ldr	r3, [pc, #112]	; (8007458 <xTimerCreateTimerTask+0x80>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d021      	beq.n	8007432 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073f6:	1d3a      	adds	r2, r7, #4
 80073f8:	f107 0108 	add.w	r1, r7, #8
 80073fc:	f107 030c 	add.w	r3, r7, #12
 8007400:	4618      	mov	r0, r3
 8007402:	f7f8 ff11 	bl	8000228 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	9202      	str	r2, [sp, #8]
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	2302      	movs	r3, #2
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	2300      	movs	r3, #0
 8007416:	460a      	mov	r2, r1
 8007418:	4910      	ldr	r1, [pc, #64]	; (800745c <xTimerCreateTimerTask+0x84>)
 800741a:	4811      	ldr	r0, [pc, #68]	; (8007460 <xTimerCreateTimerTask+0x88>)
 800741c:	f7fe fec2 	bl	80061a4 <xTaskCreateStatic>
 8007420:	4603      	mov	r3, r0
 8007422:	4a10      	ldr	r2, [pc, #64]	; (8007464 <xTimerCreateTimerTask+0x8c>)
 8007424:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007426:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <xTimerCreateTimerTask+0x8c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800742e:	2301      	movs	r3, #1
 8007430:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	613b      	str	r3, [r7, #16]
}
 800744a:	bf00      	nop
 800744c:	e7fe      	b.n	800744c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800744e:	697b      	ldr	r3, [r7, #20]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	20000e64 	.word	0x20000e64
 800745c:	080086d8 	.word	0x080086d8
 8007460:	0800762d 	.word	0x0800762d
 8007464:	20000e68 	.word	0x20000e68

08007468 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af02      	add	r7, sp, #8
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007476:	202c      	movs	r0, #44	; 0x2c
 8007478:	f000 fd66 	bl	8007f48 <pvPortMalloc>
 800747c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00d      	beq.n	80074a0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	9301      	str	r3, [sp, #4]
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	68b9      	ldr	r1, [r7, #8]
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 f809 	bl	80074aa <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80074a0:	697b      	ldr	r3, [r7, #20]
	}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b086      	sub	sp, #24
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	607a      	str	r2, [r7, #4]
 80074b6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	617b      	str	r3, [r7, #20]
}
 80074d0:	bf00      	nop
 80074d2:	e7fe      	b.n	80074d2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80074d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d015      	beq.n	8007506 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80074da:	f000 fa89 	bl	80079f0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	6a3a      	ldr	r2, [r7, #32]
 80074fa:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	3304      	adds	r3, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f7fd ffd9 	bl	80054b8 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007506:	bf00      	nop
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08a      	sub	sp, #40	; 0x28
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800751e:	2300      	movs	r3, #0
 8007520:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10a      	bne.n	800753e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	623b      	str	r3, [r7, #32]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800753e:	4b1a      	ldr	r3, [pc, #104]	; (80075a8 <xTimerGenericCommand+0x98>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d02a      	beq.n	800759c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2b05      	cmp	r3, #5
 8007556:	dc18      	bgt.n	800758a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007558:	f7ff fc5a 	bl	8006e10 <xTaskGetSchedulerState>
 800755c:	4603      	mov	r3, r0
 800755e:	2b02      	cmp	r3, #2
 8007560:	d109      	bne.n	8007576 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007562:	4b11      	ldr	r3, [pc, #68]	; (80075a8 <xTimerGenericCommand+0x98>)
 8007564:	6818      	ldr	r0, [r3, #0]
 8007566:	f107 0114 	add.w	r1, r7, #20
 800756a:	2300      	movs	r3, #0
 800756c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800756e:	f7fe f973 	bl	8005858 <xQueueGenericSend>
 8007572:	6278      	str	r0, [r7, #36]	; 0x24
 8007574:	e012      	b.n	800759c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007576:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <xTimerGenericCommand+0x98>)
 8007578:	6818      	ldr	r0, [r3, #0]
 800757a:	f107 0114 	add.w	r1, r7, #20
 800757e:	2300      	movs	r3, #0
 8007580:	2200      	movs	r2, #0
 8007582:	f7fe f969 	bl	8005858 <xQueueGenericSend>
 8007586:	6278      	str	r0, [r7, #36]	; 0x24
 8007588:	e008      	b.n	800759c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800758a:	4b07      	ldr	r3, [pc, #28]	; (80075a8 <xTimerGenericCommand+0x98>)
 800758c:	6818      	ldr	r0, [r3, #0]
 800758e:	f107 0114 	add.w	r1, r7, #20
 8007592:	2300      	movs	r3, #0
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	f7fe fa5d 	bl	8005a54 <xQueueGenericSendFromISR>
 800759a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3728      	adds	r7, #40	; 0x28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20000e64 	.word	0x20000e64

080075ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075b6:	4b1c      	ldr	r3, [pc, #112]	; (8007628 <prvProcessExpiredTimer+0x7c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fd ffe1 	bl	800558c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d122      	bne.n	8007618 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	699a      	ldr	r2, [r3, #24]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	18d1      	adds	r1, r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	6978      	ldr	r0, [r7, #20]
 80075e0:	f000 f8c8 	bl	8007774 <prvInsertTimerInActiveList>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d016      	beq.n	8007618 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075ea:	2300      	movs	r3, #0
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	2300      	movs	r3, #0
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	2100      	movs	r1, #0
 80075f4:	6978      	ldr	r0, [r7, #20]
 80075f6:	f7ff ff8b 	bl	8007510 <xTimerGenericCommand>
 80075fa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	60fb      	str	r3, [r7, #12]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	6978      	ldr	r0, [r7, #20]
 800761e:	4798      	blx	r3
}
 8007620:	bf00      	nop
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	20000e5c 	.word	0x20000e5c

0800762c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007634:	f107 0308 	add.w	r3, r7, #8
 8007638:	4618      	mov	r0, r3
 800763a:	f000 f857 	bl	80076ec <prvGetNextExpireTime>
 800763e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	4619      	mov	r1, r3
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f000 f803 	bl	8007650 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800764a:	f000 f8d5 	bl	80077f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800764e:	e7f1      	b.n	8007634 <prvTimerTask+0x8>

08007650 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800765a:	f7fe ffe9 	bl	8006630 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800765e:	f107 0308 	add.w	r3, r7, #8
 8007662:	4618      	mov	r0, r3
 8007664:	f000 f866 	bl	8007734 <prvSampleTimeNow>
 8007668:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d130      	bne.n	80076d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10a      	bne.n	800768c <prvProcessTimerOrBlockTask+0x3c>
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	429a      	cmp	r2, r3
 800767c:	d806      	bhi.n	800768c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800767e:	f7fe ffe5 	bl	800664c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007682:	68f9      	ldr	r1, [r7, #12]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff ff91 	bl	80075ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800768a:	e024      	b.n	80076d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d008      	beq.n	80076a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007692:	4b13      	ldr	r3, [pc, #76]	; (80076e0 <prvProcessTimerOrBlockTask+0x90>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	bf0c      	ite	eq
 800769c:	2301      	moveq	r3, #1
 800769e:	2300      	movne	r3, #0
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076a4:	4b0f      	ldr	r3, [pc, #60]	; (80076e4 <prvProcessTimerOrBlockTask+0x94>)
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	4619      	mov	r1, r3
 80076b2:	f7fe fd43 	bl	800613c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076b6:	f7fe ffc9 	bl	800664c <xTaskResumeAll>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10a      	bne.n	80076d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076c0:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <prvProcessTimerOrBlockTask+0x98>)
 80076c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
}
 80076d0:	e001      	b.n	80076d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076d2:	f7fe ffbb 	bl	800664c <xTaskResumeAll>
}
 80076d6:	bf00      	nop
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000e60 	.word	0x20000e60
 80076e4:	20000e64 	.word	0x20000e64
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076f4:	4b0e      	ldr	r3, [pc, #56]	; (8007730 <prvGetNextExpireTime+0x44>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	bf0c      	ite	eq
 80076fe:	2301      	moveq	r3, #1
 8007700:	2300      	movne	r3, #0
 8007702:	b2db      	uxtb	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d105      	bne.n	800771e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007712:	4b07      	ldr	r3, [pc, #28]	; (8007730 <prvGetNextExpireTime+0x44>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	e001      	b.n	8007722 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007722:	68fb      	ldr	r3, [r7, #12]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	20000e5c 	.word	0x20000e5c

08007734 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800773c:	f7ff f822 	bl	8006784 <xTaskGetTickCount>
 8007740:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007742:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <prvSampleTimeNow+0x3c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	429a      	cmp	r2, r3
 800774a:	d205      	bcs.n	8007758 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800774c:	f000 f8ee 	bl	800792c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	e002      	b.n	800775e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800775e:	4a04      	ldr	r2, [pc, #16]	; (8007770 <prvSampleTimeNow+0x3c>)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007764:	68fb      	ldr	r3, [r7, #12]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20000e6c 	.word	0x20000e6c

08007774 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007782:	2300      	movs	r3, #0
 8007784:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	429a      	cmp	r2, r3
 8007798:	d812      	bhi.n	80077c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	1ad2      	subs	r2, r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d302      	bcc.n	80077ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077a8:	2301      	movs	r3, #1
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	e01b      	b.n	80077e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077ae:	4b10      	ldr	r3, [pc, #64]	; (80077f0 <prvInsertTimerInActiveList+0x7c>)
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3304      	adds	r3, #4
 80077b6:	4619      	mov	r1, r3
 80077b8:	4610      	mov	r0, r2
 80077ba:	f7fd feae 	bl	800551a <vListInsert>
 80077be:	e012      	b.n	80077e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d206      	bcs.n	80077d6 <prvInsertTimerInActiveList+0x62>
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d302      	bcc.n	80077d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077d0:	2301      	movs	r3, #1
 80077d2:	617b      	str	r3, [r7, #20]
 80077d4:	e007      	b.n	80077e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077d6:	4b07      	ldr	r3, [pc, #28]	; (80077f4 <prvInsertTimerInActiveList+0x80>)
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3304      	adds	r3, #4
 80077de:	4619      	mov	r1, r3
 80077e0:	4610      	mov	r0, r2
 80077e2:	f7fd fe9a 	bl	800551a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077e6:	697b      	ldr	r3, [r7, #20]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20000e60 	.word	0x20000e60
 80077f4:	20000e5c 	.word	0x20000e5c

080077f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08c      	sub	sp, #48	; 0x30
 80077fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077fe:	e081      	b.n	8007904 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	db7d      	blt.n	8007902 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d004      	beq.n	800781c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	3304      	adds	r3, #4
 8007816:	4618      	mov	r0, r3
 8007818:	f7fd feb8 	bl	800558c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800781c:	1d3b      	adds	r3, r7, #4
 800781e:	4618      	mov	r0, r3
 8007820:	f7ff ff88 	bl	8007734 <prvSampleTimeNow>
 8007824:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b09      	cmp	r3, #9
 800782a:	d86b      	bhi.n	8007904 <prvProcessReceivedCommands+0x10c>
 800782c:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <prvProcessReceivedCommands+0x3c>)
 800782e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007832:	bf00      	nop
 8007834:	0800785d 	.word	0x0800785d
 8007838:	0800785d 	.word	0x0800785d
 800783c:	0800785d 	.word	0x0800785d
 8007840:	08007905 	.word	0x08007905
 8007844:	080078b9 	.word	0x080078b9
 8007848:	080078f1 	.word	0x080078f1
 800784c:	0800785d 	.word	0x0800785d
 8007850:	0800785d 	.word	0x0800785d
 8007854:	08007905 	.word	0x08007905
 8007858:	080078b9 	.word	0x080078b9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	18d1      	adds	r1, r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6a3a      	ldr	r2, [r7, #32]
 8007868:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800786a:	f7ff ff83 	bl	8007774 <prvInsertTimerInActiveList>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d047      	beq.n	8007904 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800787a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d13f      	bne.n	8007904 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	441a      	add	r2, r3
 800788c:	2300      	movs	r3, #0
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	2300      	movs	r3, #0
 8007892:	2100      	movs	r1, #0
 8007894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007896:	f7ff fe3b 	bl	8007510 <xTimerGenericCommand>
 800789a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d130      	bne.n	8007904 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	61bb      	str	r3, [r7, #24]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10a      	bne.n	80078dc <prvProcessReceivedCommands+0xe4>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	617b      	str	r3, [r7, #20]
}
 80078d8:	bf00      	nop
 80078da:	e7fe      	b.n	80078da <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	699a      	ldr	r2, [r3, #24]
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	18d1      	adds	r1, r2, r3
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	6a3a      	ldr	r2, [r7, #32]
 80078e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078ea:	f7ff ff43 	bl	8007774 <prvInsertTimerInActiveList>
					break;
 80078ee:	e009      	b.n	8007904 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d104      	bne.n	8007904 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 80078fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078fc:	f000 fbe8 	bl	80080d0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007900:	e000      	b.n	8007904 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007902:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007904:	4b08      	ldr	r3, [pc, #32]	; (8007928 <prvProcessReceivedCommands+0x130>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f107 0108 	add.w	r1, r7, #8
 800790c:	2200      	movs	r2, #0
 800790e:	4618      	mov	r0, r3
 8007910:	f7fe f938 	bl	8005b84 <xQueueReceive>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	f47f af72 	bne.w	8007800 <prvProcessReceivedCommands+0x8>
	}
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	3728      	adds	r7, #40	; 0x28
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20000e64 	.word	0x20000e64

0800792c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007932:	e045      	b.n	80079c0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007934:	4b2c      	ldr	r3, [pc, #176]	; (80079e8 <prvSwitchTimerLists+0xbc>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800793e:	4b2a      	ldr	r3, [pc, #168]	; (80079e8 <prvSwitchTimerLists+0xbc>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3304      	adds	r3, #4
 800794c:	4618      	mov	r0, r3
 800794e:	f7fd fe1d 	bl	800558c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d12e      	bne.n	80079c0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	4413      	add	r3, r2
 800796a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	429a      	cmp	r2, r3
 8007972:	d90e      	bls.n	8007992 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007980:	4b19      	ldr	r3, [pc, #100]	; (80079e8 <prvSwitchTimerLists+0xbc>)
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3304      	adds	r3, #4
 8007988:	4619      	mov	r1, r3
 800798a:	4610      	mov	r0, r2
 800798c:	f7fd fdc5 	bl	800551a <vListInsert>
 8007990:	e016      	b.n	80079c0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007992:	2300      	movs	r3, #0
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	2300      	movs	r3, #0
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	2100      	movs	r1, #0
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f7ff fdb7 	bl	8007510 <xTimerGenericCommand>
 80079a2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10a      	bne.n	80079c0 <prvSwitchTimerLists+0x94>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	603b      	str	r3, [r7, #0]
}
 80079bc:	bf00      	nop
 80079be:	e7fe      	b.n	80079be <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079c0:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <prvSwitchTimerLists+0xbc>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1b4      	bne.n	8007934 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079ca:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <prvSwitchTimerLists+0xbc>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079d0:	4b06      	ldr	r3, [pc, #24]	; (80079ec <prvSwitchTimerLists+0xc0>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a04      	ldr	r2, [pc, #16]	; (80079e8 <prvSwitchTimerLists+0xbc>)
 80079d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80079d8:	4a04      	ldr	r2, [pc, #16]	; (80079ec <prvSwitchTimerLists+0xc0>)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	6013      	str	r3, [r2, #0]
}
 80079de:	bf00      	nop
 80079e0:	3718      	adds	r7, #24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20000e5c 	.word	0x20000e5c
 80079ec:	20000e60 	.word	0x20000e60

080079f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80079f6:	f000 f985 	bl	8007d04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079fa:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <prvCheckForValidListAndQueue+0x60>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d120      	bne.n	8007a44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a02:	4814      	ldr	r0, [pc, #80]	; (8007a54 <prvCheckForValidListAndQueue+0x64>)
 8007a04:	f7fd fd38 	bl	8005478 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a08:	4813      	ldr	r0, [pc, #76]	; (8007a58 <prvCheckForValidListAndQueue+0x68>)
 8007a0a:	f7fd fd35 	bl	8005478 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a0e:	4b13      	ldr	r3, [pc, #76]	; (8007a5c <prvCheckForValidListAndQueue+0x6c>)
 8007a10:	4a10      	ldr	r2, [pc, #64]	; (8007a54 <prvCheckForValidListAndQueue+0x64>)
 8007a12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a14:	4b12      	ldr	r3, [pc, #72]	; (8007a60 <prvCheckForValidListAndQueue+0x70>)
 8007a16:	4a10      	ldr	r2, [pc, #64]	; (8007a58 <prvCheckForValidListAndQueue+0x68>)
 8007a18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	4b11      	ldr	r3, [pc, #68]	; (8007a64 <prvCheckForValidListAndQueue+0x74>)
 8007a20:	4a11      	ldr	r2, [pc, #68]	; (8007a68 <prvCheckForValidListAndQueue+0x78>)
 8007a22:	210c      	movs	r1, #12
 8007a24:	200a      	movs	r0, #10
 8007a26:	f7fd fe43 	bl	80056b0 <xQueueGenericCreateStatic>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	4a08      	ldr	r2, [pc, #32]	; (8007a50 <prvCheckForValidListAndQueue+0x60>)
 8007a2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a30:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <prvCheckForValidListAndQueue+0x60>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d005      	beq.n	8007a44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a38:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <prvCheckForValidListAndQueue+0x60>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	490b      	ldr	r1, [pc, #44]	; (8007a6c <prvCheckForValidListAndQueue+0x7c>)
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe fb52 	bl	80060e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a44:	f000 f98e 	bl	8007d64 <vPortExitCritical>
}
 8007a48:	bf00      	nop
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000e64 	.word	0x20000e64
 8007a54:	20000e34 	.word	0x20000e34
 8007a58:	20000e48 	.word	0x20000e48
 8007a5c:	20000e5c 	.word	0x20000e5c
 8007a60:	20000e60 	.word	0x20000e60
 8007a64:	20000ee8 	.word	0x20000ee8
 8007a68:	20000e70 	.word	0x20000e70
 8007a6c:	080086e0 	.word	0x080086e0

08007a70 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <pvTimerGetTimerID+0x28>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	60fb      	str	r3, [r7, #12]
}
 8007a94:	bf00      	nop
 8007a96:	e7fe      	b.n	8007a96 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007a98:	f000 f934 	bl	8007d04 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007aa2:	f000 f95f 	bl	8007d64 <vPortExitCritical>

	return pvReturn;
 8007aa6:	693b      	ldr	r3, [r7, #16]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3b04      	subs	r3, #4
 8007ac0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3b04      	subs	r3, #4
 8007ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f023 0201 	bic.w	r2, r3, #1
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3b04      	subs	r3, #4
 8007ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ae0:	4a0c      	ldr	r2, [pc, #48]	; (8007b14 <pxPortInitialiseStack+0x64>)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	3b14      	subs	r3, #20
 8007aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3b04      	subs	r3, #4
 8007af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f06f 0202 	mvn.w	r2, #2
 8007afe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3b20      	subs	r3, #32
 8007b04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b06:	68fb      	ldr	r3, [r7, #12]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	08007b19 	.word	0x08007b19

08007b18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b22:	4b12      	ldr	r3, [pc, #72]	; (8007b6c <prvTaskExitError+0x54>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2a:	d00a      	beq.n	8007b42 <prvTaskExitError+0x2a>
	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	60fb      	str	r3, [r7, #12]
}
 8007b3e:	bf00      	nop
 8007b40:	e7fe      	b.n	8007b40 <prvTaskExitError+0x28>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	60bb      	str	r3, [r7, #8]
}
 8007b54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b56:	bf00      	nop
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0fc      	beq.n	8007b58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b5e:	bf00      	nop
 8007b60:	bf00      	nop
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	20000018 	.word	0x20000018

08007b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b70:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <pxCurrentTCBConst2>)
 8007b72:	6819      	ldr	r1, [r3, #0]
 8007b74:	6808      	ldr	r0, [r1, #0]
 8007b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7a:	f380 8809 	msr	PSP, r0
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f04f 0000 	mov.w	r0, #0
 8007b86:	f380 8811 	msr	BASEPRI, r0
 8007b8a:	4770      	bx	lr
 8007b8c:	f3af 8000 	nop.w

08007b90 <pxCurrentTCBConst2>:
 8007b90:	20000d08 	.word	0x20000d08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop

08007b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b98:	4808      	ldr	r0, [pc, #32]	; (8007bbc <prvPortStartFirstTask+0x24>)
 8007b9a:	6800      	ldr	r0, [r0, #0]
 8007b9c:	6800      	ldr	r0, [r0, #0]
 8007b9e:	f380 8808 	msr	MSP, r0
 8007ba2:	f04f 0000 	mov.w	r0, #0
 8007ba6:	f380 8814 	msr	CONTROL, r0
 8007baa:	b662      	cpsie	i
 8007bac:	b661      	cpsie	f
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	df00      	svc	0
 8007bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bba:	bf00      	nop
 8007bbc:	e000ed08 	.word	0xe000ed08

08007bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bc6:	4b46      	ldr	r3, [pc, #280]	; (8007ce0 <xPortStartScheduler+0x120>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a46      	ldr	r2, [pc, #280]	; (8007ce4 <xPortStartScheduler+0x124>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d10a      	bne.n	8007be6 <xPortStartScheduler+0x26>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	613b      	str	r3, [r7, #16]
}
 8007be2:	bf00      	nop
 8007be4:	e7fe      	b.n	8007be4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007be6:	4b3e      	ldr	r3, [pc, #248]	; (8007ce0 <xPortStartScheduler+0x120>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a3f      	ldr	r2, [pc, #252]	; (8007ce8 <xPortStartScheduler+0x128>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d10a      	bne.n	8007c06 <xPortStartScheduler+0x46>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	60fb      	str	r3, [r7, #12]
}
 8007c02:	bf00      	nop
 8007c04:	e7fe      	b.n	8007c04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c06:	4b39      	ldr	r3, [pc, #228]	; (8007cec <xPortStartScheduler+0x12c>)
 8007c08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	22ff      	movs	r2, #255	; 0xff
 8007c16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	4b31      	ldr	r3, [pc, #196]	; (8007cf0 <xPortStartScheduler+0x130>)
 8007c2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c2e:	4b31      	ldr	r3, [pc, #196]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c30:	2207      	movs	r2, #7
 8007c32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c34:	e009      	b.n	8007c4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c36:	4b2f      	ldr	r3, [pc, #188]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	4a2d      	ldr	r2, [pc, #180]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c40:	78fb      	ldrb	r3, [r7, #3]
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c52:	2b80      	cmp	r3, #128	; 0x80
 8007c54:	d0ef      	beq.n	8007c36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c56:	4b27      	ldr	r3, [pc, #156]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f1c3 0307 	rsb	r3, r3, #7
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	d00a      	beq.n	8007c78 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	60bb      	str	r3, [r7, #8]
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c78:	4b1e      	ldr	r3, [pc, #120]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	4a1d      	ldr	r2, [pc, #116]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c82:	4b1c      	ldr	r3, [pc, #112]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c8a:	4a1a      	ldr	r2, [pc, #104]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c96:	4b18      	ldr	r3, [pc, #96]	; (8007cf8 <xPortStartScheduler+0x138>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a17      	ldr	r2, [pc, #92]	; (8007cf8 <xPortStartScheduler+0x138>)
 8007c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ca2:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <xPortStartScheduler+0x138>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a14      	ldr	r2, [pc, #80]	; (8007cf8 <xPortStartScheduler+0x138>)
 8007ca8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cae:	f000 f8dd 	bl	8007e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cb2:	4b12      	ldr	r3, [pc, #72]	; (8007cfc <xPortStartScheduler+0x13c>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cb8:	f000 f8fc 	bl	8007eb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cbc:	4b10      	ldr	r3, [pc, #64]	; (8007d00 <xPortStartScheduler+0x140>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a0f      	ldr	r2, [pc, #60]	; (8007d00 <xPortStartScheduler+0x140>)
 8007cc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007cc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cc8:	f7ff ff66 	bl	8007b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ccc:	f7fe fe28 	bl	8006920 <vTaskSwitchContext>
	prvTaskExitError();
 8007cd0:	f7ff ff22 	bl	8007b18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	e000ed00 	.word	0xe000ed00
 8007ce4:	410fc271 	.word	0x410fc271
 8007ce8:	410fc270 	.word	0x410fc270
 8007cec:	e000e400 	.word	0xe000e400
 8007cf0:	20000f30 	.word	0x20000f30
 8007cf4:	20000f34 	.word	0x20000f34
 8007cf8:	e000ed20 	.word	0xe000ed20
 8007cfc:	20000018 	.word	0x20000018
 8007d00:	e000ef34 	.word	0xe000ef34

08007d04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	607b      	str	r3, [r7, #4]
}
 8007d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d1e:	4b0f      	ldr	r3, [pc, #60]	; (8007d5c <vPortEnterCritical+0x58>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3301      	adds	r3, #1
 8007d24:	4a0d      	ldr	r2, [pc, #52]	; (8007d5c <vPortEnterCritical+0x58>)
 8007d26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d28:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <vPortEnterCritical+0x58>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d10f      	bne.n	8007d50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <vPortEnterCritical+0x5c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00a      	beq.n	8007d50 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	603b      	str	r3, [r7, #0]
}
 8007d4c:	bf00      	nop
 8007d4e:	e7fe      	b.n	8007d4e <vPortEnterCritical+0x4a>
	}
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	20000018 	.word	0x20000018
 8007d60:	e000ed04 	.word	0xe000ed04

08007d64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d6a:	4b12      	ldr	r3, [pc, #72]	; (8007db4 <vPortExitCritical+0x50>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10a      	bne.n	8007d88 <vPortExitCritical+0x24>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	607b      	str	r3, [r7, #4]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d88:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <vPortExitCritical+0x50>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	4a09      	ldr	r2, [pc, #36]	; (8007db4 <vPortExitCritical+0x50>)
 8007d90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d92:	4b08      	ldr	r3, [pc, #32]	; (8007db4 <vPortExitCritical+0x50>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d105      	bne.n	8007da6 <vPortExitCritical+0x42>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	f383 8811 	msr	BASEPRI, r3
}
 8007da4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	20000018 	.word	0x20000018
	...

08007dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007dc0:	f3ef 8009 	mrs	r0, PSP
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <pxCurrentTCBConst>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	f01e 0f10 	tst.w	lr, #16
 8007dd0:	bf08      	it	eq
 8007dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dda:	6010      	str	r0, [r2, #0]
 8007ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007de4:	f380 8811 	msr	BASEPRI, r0
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f7fe fd96 	bl	8006920 <vTaskSwitchContext>
 8007df4:	f04f 0000 	mov.w	r0, #0
 8007df8:	f380 8811 	msr	BASEPRI, r0
 8007dfc:	bc09      	pop	{r0, r3}
 8007dfe:	6819      	ldr	r1, [r3, #0]
 8007e00:	6808      	ldr	r0, [r1, #0]
 8007e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e06:	f01e 0f10 	tst.w	lr, #16
 8007e0a:	bf08      	it	eq
 8007e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e10:	f380 8809 	msr	PSP, r0
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	f3af 8000 	nop.w

08007e20 <pxCurrentTCBConst>:
 8007e20:	20000d08 	.word	0x20000d08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop

08007e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	607b      	str	r3, [r7, #4]
}
 8007e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e42:	f7fe fcaf 	bl	80067a4 <xTaskIncrementTick>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <SysTick_Handler+0x40>)
 8007e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	2300      	movs	r3, #0
 8007e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	f383 8811 	msr	BASEPRI, r3
}
 8007e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e70:	4b0b      	ldr	r3, [pc, #44]	; (8007ea0 <vPortSetupTimerInterrupt+0x34>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e76:	4b0b      	ldr	r3, [pc, #44]	; (8007ea4 <vPortSetupTimerInterrupt+0x38>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ea8 <vPortSetupTimerInterrupt+0x3c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a0a      	ldr	r2, [pc, #40]	; (8007eac <vPortSetupTimerInterrupt+0x40>)
 8007e82:	fba2 2303 	umull	r2, r3, r2, r3
 8007e86:	099b      	lsrs	r3, r3, #6
 8007e88:	4a09      	ldr	r2, [pc, #36]	; (8007eb0 <vPortSetupTimerInterrupt+0x44>)
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e8e:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <vPortSetupTimerInterrupt+0x34>)
 8007e90:	2207      	movs	r2, #7
 8007e92:	601a      	str	r2, [r3, #0]
}
 8007e94:	bf00      	nop
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	e000e010 	.word	0xe000e010
 8007ea4:	e000e018 	.word	0xe000e018
 8007ea8:	20000008 	.word	0x20000008
 8007eac:	10624dd3 	.word	0x10624dd3
 8007eb0:	e000e014 	.word	0xe000e014

08007eb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007eb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ec4 <vPortEnableVFP+0x10>
 8007eb8:	6801      	ldr	r1, [r0, #0]
 8007eba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007ebe:	6001      	str	r1, [r0, #0]
 8007ec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ec2:	bf00      	nop
 8007ec4:	e000ed88 	.word	0xe000ed88

08007ec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ece:	f3ef 8305 	mrs	r3, IPSR
 8007ed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b0f      	cmp	r3, #15
 8007ed8:	d914      	bls.n	8007f04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007eda:	4a17      	ldr	r2, [pc, #92]	; (8007f38 <vPortValidateInterruptPriority+0x70>)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ee4:	4b15      	ldr	r3, [pc, #84]	; (8007f3c <vPortValidateInterruptPriority+0x74>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	7afa      	ldrb	r2, [r7, #11]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d20a      	bcs.n	8007f04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	607b      	str	r3, [r7, #4]
}
 8007f00:	bf00      	nop
 8007f02:	e7fe      	b.n	8007f02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f04:	4b0e      	ldr	r3, [pc, #56]	; (8007f40 <vPortValidateInterruptPriority+0x78>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f0c:	4b0d      	ldr	r3, [pc, #52]	; (8007f44 <vPortValidateInterruptPriority+0x7c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d90a      	bls.n	8007f2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	603b      	str	r3, [r7, #0]
}
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <vPortValidateInterruptPriority+0x60>
	}
 8007f2a:	bf00      	nop
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	e000e3f0 	.word	0xe000e3f0
 8007f3c:	20000f30 	.word	0x20000f30
 8007f40:	e000ed0c 	.word	0xe000ed0c
 8007f44:	20000f34 	.word	0x20000f34

08007f48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08a      	sub	sp, #40	; 0x28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f54:	f7fe fb6c 	bl	8006630 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f58:	4b58      	ldr	r3, [pc, #352]	; (80080bc <pvPortMalloc+0x174>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f60:	f000 f910 	bl	8008184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f64:	4b56      	ldr	r3, [pc, #344]	; (80080c0 <pvPortMalloc+0x178>)
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f040 808e 	bne.w	800808e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d01d      	beq.n	8007fb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f78:	2208      	movs	r2, #8
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d014      	beq.n	8007fb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f023 0307 	bic.w	r3, r3, #7
 8007f90:	3308      	adds	r3, #8
 8007f92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f003 0307 	and.w	r3, r3, #7
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <pvPortMalloc+0x6c>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	617b      	str	r3, [r7, #20]
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d069      	beq.n	800808e <pvPortMalloc+0x146>
 8007fba:	4b42      	ldr	r3, [pc, #264]	; (80080c4 <pvPortMalloc+0x17c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d864      	bhi.n	800808e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fc4:	4b40      	ldr	r3, [pc, #256]	; (80080c8 <pvPortMalloc+0x180>)
 8007fc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fc8:	4b3f      	ldr	r3, [pc, #252]	; (80080c8 <pvPortMalloc+0x180>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fce:	e004      	b.n	8007fda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d903      	bls.n	8007fec <pvPortMalloc+0xa4>
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1f1      	bne.n	8007fd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fec:	4b33      	ldr	r3, [pc, #204]	; (80080bc <pvPortMalloc+0x174>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d04b      	beq.n	800808e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2208      	movs	r2, #8
 8007ffc:	4413      	add	r3, r2
 8007ffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	1ad2      	subs	r2, r2, r3
 8008010:	2308      	movs	r3, #8
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	429a      	cmp	r2, r3
 8008016:	d91f      	bls.n	8008058 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <pvPortMalloc+0xf8>
	__asm volatile
 800802a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	613b      	str	r3, [r7, #16]
}
 800803c:	bf00      	nop
 800803e:	e7fe      	b.n	800803e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	1ad2      	subs	r2, r2, r3
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008052:	69b8      	ldr	r0, [r7, #24]
 8008054:	f000 f8f8 	bl	8008248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008058:	4b1a      	ldr	r3, [pc, #104]	; (80080c4 <pvPortMalloc+0x17c>)
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	4a18      	ldr	r2, [pc, #96]	; (80080c4 <pvPortMalloc+0x17c>)
 8008064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008066:	4b17      	ldr	r3, [pc, #92]	; (80080c4 <pvPortMalloc+0x17c>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	4b18      	ldr	r3, [pc, #96]	; (80080cc <pvPortMalloc+0x184>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	429a      	cmp	r2, r3
 8008070:	d203      	bcs.n	800807a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008072:	4b14      	ldr	r3, [pc, #80]	; (80080c4 <pvPortMalloc+0x17c>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a15      	ldr	r2, [pc, #84]	; (80080cc <pvPortMalloc+0x184>)
 8008078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	4b10      	ldr	r3, [pc, #64]	; (80080c0 <pvPortMalloc+0x178>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	431a      	orrs	r2, r3
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800808e:	f7fe fadd 	bl	800664c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	f003 0307 	and.w	r3, r3, #7
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00a      	beq.n	80080b2 <pvPortMalloc+0x16a>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	60fb      	str	r3, [r7, #12]
}
 80080ae:	bf00      	nop
 80080b0:	e7fe      	b.n	80080b0 <pvPortMalloc+0x168>
	return pvReturn;
 80080b2:	69fb      	ldr	r3, [r7, #28]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3728      	adds	r7, #40	; 0x28
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	20001b40 	.word	0x20001b40
 80080c0:	20001b4c 	.word	0x20001b4c
 80080c4:	20001b44 	.word	0x20001b44
 80080c8:	20001b38 	.word	0x20001b38
 80080cc:	20001b48 	.word	0x20001b48

080080d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d048      	beq.n	8008174 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080e2:	2308      	movs	r3, #8
 80080e4:	425b      	negs	r3, r3
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	4413      	add	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	4b21      	ldr	r3, [pc, #132]	; (800817c <vPortFree+0xac>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4013      	ands	r3, r2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10a      	bne.n	8008114 <vPortFree+0x44>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	60fb      	str	r3, [r7, #12]
}
 8008110:	bf00      	nop
 8008112:	e7fe      	b.n	8008112 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <vPortFree+0x62>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	60bb      	str	r3, [r7, #8]
}
 800812e:	bf00      	nop
 8008130:	e7fe      	b.n	8008130 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	4b11      	ldr	r3, [pc, #68]	; (800817c <vPortFree+0xac>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4013      	ands	r3, r2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d019      	beq.n	8008174 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d115      	bne.n	8008174 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	4b0b      	ldr	r3, [pc, #44]	; (800817c <vPortFree+0xac>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	43db      	mvns	r3, r3
 8008152:	401a      	ands	r2, r3
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008158:	f7fe fa6a 	bl	8006630 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	4b07      	ldr	r3, [pc, #28]	; (8008180 <vPortFree+0xb0>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4413      	add	r3, r2
 8008166:	4a06      	ldr	r2, [pc, #24]	; (8008180 <vPortFree+0xb0>)
 8008168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800816a:	6938      	ldr	r0, [r7, #16]
 800816c:	f000 f86c 	bl	8008248 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008170:	f7fe fa6c 	bl	800664c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008174:	bf00      	nop
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20001b4c 	.word	0x20001b4c
 8008180:	20001b44 	.word	0x20001b44

08008184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800818a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800818e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008190:	4b27      	ldr	r3, [pc, #156]	; (8008230 <prvHeapInit+0xac>)
 8008192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f003 0307 	and.w	r3, r3, #7
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00c      	beq.n	80081b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	3307      	adds	r3, #7
 80081a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f023 0307 	bic.w	r3, r3, #7
 80081aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	4a1f      	ldr	r2, [pc, #124]	; (8008230 <prvHeapInit+0xac>)
 80081b4:	4413      	add	r3, r2
 80081b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081bc:	4a1d      	ldr	r2, [pc, #116]	; (8008234 <prvHeapInit+0xb0>)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081c2:	4b1c      	ldr	r3, [pc, #112]	; (8008234 <prvHeapInit+0xb0>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	4413      	add	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081d0:	2208      	movs	r2, #8
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	1a9b      	subs	r3, r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0307 	bic.w	r3, r3, #7
 80081de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4a15      	ldr	r2, [pc, #84]	; (8008238 <prvHeapInit+0xb4>)
 80081e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081e6:	4b14      	ldr	r3, [pc, #80]	; (8008238 <prvHeapInit+0xb4>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2200      	movs	r2, #0
 80081ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081ee:	4b12      	ldr	r3, [pc, #72]	; (8008238 <prvHeapInit+0xb4>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	1ad2      	subs	r2, r2, r3
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008204:	4b0c      	ldr	r3, [pc, #48]	; (8008238 <prvHeapInit+0xb4>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	4a0a      	ldr	r2, [pc, #40]	; (800823c <prvHeapInit+0xb8>)
 8008212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	4a09      	ldr	r2, [pc, #36]	; (8008240 <prvHeapInit+0xbc>)
 800821a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800821c:	4b09      	ldr	r3, [pc, #36]	; (8008244 <prvHeapInit+0xc0>)
 800821e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008222:	601a      	str	r2, [r3, #0]
}
 8008224:	bf00      	nop
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	20000f38 	.word	0x20000f38
 8008234:	20001b38 	.word	0x20001b38
 8008238:	20001b40 	.word	0x20001b40
 800823c:	20001b48 	.word	0x20001b48
 8008240:	20001b44 	.word	0x20001b44
 8008244:	20001b4c 	.word	0x20001b4c

08008248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008250:	4b28      	ldr	r3, [pc, #160]	; (80082f4 <prvInsertBlockIntoFreeList+0xac>)
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	e002      	b.n	800825c <prvInsertBlockIntoFreeList+0x14>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60fb      	str	r3, [r7, #12]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	429a      	cmp	r2, r3
 8008264:	d8f7      	bhi.n	8008256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	4413      	add	r3, r2
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	429a      	cmp	r2, r3
 8008276:	d108      	bne.n	800828a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	441a      	add	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	441a      	add	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	d118      	bne.n	80082d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	4b15      	ldr	r3, [pc, #84]	; (80082f8 <prvInsertBlockIntoFreeList+0xb0>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d00d      	beq.n	80082c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	441a      	add	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	e008      	b.n	80082d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082c6:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <prvInsertBlockIntoFreeList+0xb0>)
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	e003      	b.n	80082d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d002      	beq.n	80082e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082e6:	bf00      	nop
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	20001b38 	.word	0x20001b38
 80082f8:	20001b40 	.word	0x20001b40

080082fc <__libc_init_array>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	4d0d      	ldr	r5, [pc, #52]	; (8008334 <__libc_init_array+0x38>)
 8008300:	4c0d      	ldr	r4, [pc, #52]	; (8008338 <__libc_init_array+0x3c>)
 8008302:	1b64      	subs	r4, r4, r5
 8008304:	10a4      	asrs	r4, r4, #2
 8008306:	2600      	movs	r6, #0
 8008308:	42a6      	cmp	r6, r4
 800830a:	d109      	bne.n	8008320 <__libc_init_array+0x24>
 800830c:	4d0b      	ldr	r5, [pc, #44]	; (800833c <__libc_init_array+0x40>)
 800830e:	4c0c      	ldr	r4, [pc, #48]	; (8008340 <__libc_init_array+0x44>)
 8008310:	f000 f8f2 	bl	80084f8 <_init>
 8008314:	1b64      	subs	r4, r4, r5
 8008316:	10a4      	asrs	r4, r4, #2
 8008318:	2600      	movs	r6, #0
 800831a:	42a6      	cmp	r6, r4
 800831c:	d105      	bne.n	800832a <__libc_init_array+0x2e>
 800831e:	bd70      	pop	{r4, r5, r6, pc}
 8008320:	f855 3b04 	ldr.w	r3, [r5], #4
 8008324:	4798      	blx	r3
 8008326:	3601      	adds	r6, #1
 8008328:	e7ee      	b.n	8008308 <__libc_init_array+0xc>
 800832a:	f855 3b04 	ldr.w	r3, [r5], #4
 800832e:	4798      	blx	r3
 8008330:	3601      	adds	r6, #1
 8008332:	e7f2      	b.n	800831a <__libc_init_array+0x1e>
 8008334:	08008780 	.word	0x08008780
 8008338:	08008780 	.word	0x08008780
 800833c:	08008780 	.word	0x08008780
 8008340:	08008784 	.word	0x08008784

08008344 <__retarget_lock_acquire_recursive>:
 8008344:	4770      	bx	lr

08008346 <__retarget_lock_release_recursive>:
 8008346:	4770      	bx	lr

08008348 <memcpy>:
 8008348:	440a      	add	r2, r1
 800834a:	4291      	cmp	r1, r2
 800834c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008350:	d100      	bne.n	8008354 <memcpy+0xc>
 8008352:	4770      	bx	lr
 8008354:	b510      	push	{r4, lr}
 8008356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800835a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800835e:	4291      	cmp	r1, r2
 8008360:	d1f9      	bne.n	8008356 <memcpy+0xe>
 8008362:	bd10      	pop	{r4, pc}

08008364 <memset>:
 8008364:	4402      	add	r2, r0
 8008366:	4603      	mov	r3, r0
 8008368:	4293      	cmp	r3, r2
 800836a:	d100      	bne.n	800836e <memset+0xa>
 800836c:	4770      	bx	lr
 800836e:	f803 1b01 	strb.w	r1, [r3], #1
 8008372:	e7f9      	b.n	8008368 <memset+0x4>

08008374 <cleanup_glue>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	460c      	mov	r4, r1
 8008378:	6809      	ldr	r1, [r1, #0]
 800837a:	4605      	mov	r5, r0
 800837c:	b109      	cbz	r1, 8008382 <cleanup_glue+0xe>
 800837e:	f7ff fff9 	bl	8008374 <cleanup_glue>
 8008382:	4621      	mov	r1, r4
 8008384:	4628      	mov	r0, r5
 8008386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800838a:	f000 b869 	b.w	8008460 <_free_r>
	...

08008390 <_reclaim_reent>:
 8008390:	4b2c      	ldr	r3, [pc, #176]	; (8008444 <_reclaim_reent+0xb4>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4283      	cmp	r3, r0
 8008396:	b570      	push	{r4, r5, r6, lr}
 8008398:	4604      	mov	r4, r0
 800839a:	d051      	beq.n	8008440 <_reclaim_reent+0xb0>
 800839c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800839e:	b143      	cbz	r3, 80083b2 <_reclaim_reent+0x22>
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d14a      	bne.n	800843c <_reclaim_reent+0xac>
 80083a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083a8:	6819      	ldr	r1, [r3, #0]
 80083aa:	b111      	cbz	r1, 80083b2 <_reclaim_reent+0x22>
 80083ac:	4620      	mov	r0, r4
 80083ae:	f000 f857 	bl	8008460 <_free_r>
 80083b2:	6961      	ldr	r1, [r4, #20]
 80083b4:	b111      	cbz	r1, 80083bc <_reclaim_reent+0x2c>
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 f852 	bl	8008460 <_free_r>
 80083bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80083be:	b111      	cbz	r1, 80083c6 <_reclaim_reent+0x36>
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 f84d 	bl	8008460 <_free_r>
 80083c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80083c8:	b111      	cbz	r1, 80083d0 <_reclaim_reent+0x40>
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 f848 	bl	8008460 <_free_r>
 80083d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80083d2:	b111      	cbz	r1, 80083da <_reclaim_reent+0x4a>
 80083d4:	4620      	mov	r0, r4
 80083d6:	f000 f843 	bl	8008460 <_free_r>
 80083da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80083dc:	b111      	cbz	r1, 80083e4 <_reclaim_reent+0x54>
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 f83e 	bl	8008460 <_free_r>
 80083e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80083e6:	b111      	cbz	r1, 80083ee <_reclaim_reent+0x5e>
 80083e8:	4620      	mov	r0, r4
 80083ea:	f000 f839 	bl	8008460 <_free_r>
 80083ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80083f0:	b111      	cbz	r1, 80083f8 <_reclaim_reent+0x68>
 80083f2:	4620      	mov	r0, r4
 80083f4:	f000 f834 	bl	8008460 <_free_r>
 80083f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083fa:	b111      	cbz	r1, 8008402 <_reclaim_reent+0x72>
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 f82f 	bl	8008460 <_free_r>
 8008402:	69a3      	ldr	r3, [r4, #24]
 8008404:	b1e3      	cbz	r3, 8008440 <_reclaim_reent+0xb0>
 8008406:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008408:	4620      	mov	r0, r4
 800840a:	4798      	blx	r3
 800840c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800840e:	b1b9      	cbz	r1, 8008440 <_reclaim_reent+0xb0>
 8008410:	4620      	mov	r0, r4
 8008412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008416:	f7ff bfad 	b.w	8008374 <cleanup_glue>
 800841a:	5949      	ldr	r1, [r1, r5]
 800841c:	b941      	cbnz	r1, 8008430 <_reclaim_reent+0xa0>
 800841e:	3504      	adds	r5, #4
 8008420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008422:	2d80      	cmp	r5, #128	; 0x80
 8008424:	68d9      	ldr	r1, [r3, #12]
 8008426:	d1f8      	bne.n	800841a <_reclaim_reent+0x8a>
 8008428:	4620      	mov	r0, r4
 800842a:	f000 f819 	bl	8008460 <_free_r>
 800842e:	e7ba      	b.n	80083a6 <_reclaim_reent+0x16>
 8008430:	680e      	ldr	r6, [r1, #0]
 8008432:	4620      	mov	r0, r4
 8008434:	f000 f814 	bl	8008460 <_free_r>
 8008438:	4631      	mov	r1, r6
 800843a:	e7ef      	b.n	800841c <_reclaim_reent+0x8c>
 800843c:	2500      	movs	r5, #0
 800843e:	e7ef      	b.n	8008420 <_reclaim_reent+0x90>
 8008440:	bd70      	pop	{r4, r5, r6, pc}
 8008442:	bf00      	nop
 8008444:	2000001c 	.word	0x2000001c

08008448 <__malloc_lock>:
 8008448:	4801      	ldr	r0, [pc, #4]	; (8008450 <__malloc_lock+0x8>)
 800844a:	f7ff bf7b 	b.w	8008344 <__retarget_lock_acquire_recursive>
 800844e:	bf00      	nop
 8008450:	20001b50 	.word	0x20001b50

08008454 <__malloc_unlock>:
 8008454:	4801      	ldr	r0, [pc, #4]	; (800845c <__malloc_unlock+0x8>)
 8008456:	f7ff bf76 	b.w	8008346 <__retarget_lock_release_recursive>
 800845a:	bf00      	nop
 800845c:	20001b50 	.word	0x20001b50

08008460 <_free_r>:
 8008460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008462:	2900      	cmp	r1, #0
 8008464:	d044      	beq.n	80084f0 <_free_r+0x90>
 8008466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800846a:	9001      	str	r0, [sp, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	f1a1 0404 	sub.w	r4, r1, #4
 8008472:	bfb8      	it	lt
 8008474:	18e4      	addlt	r4, r4, r3
 8008476:	f7ff ffe7 	bl	8008448 <__malloc_lock>
 800847a:	4a1e      	ldr	r2, [pc, #120]	; (80084f4 <_free_r+0x94>)
 800847c:	9801      	ldr	r0, [sp, #4]
 800847e:	6813      	ldr	r3, [r2, #0]
 8008480:	b933      	cbnz	r3, 8008490 <_free_r+0x30>
 8008482:	6063      	str	r3, [r4, #4]
 8008484:	6014      	str	r4, [r2, #0]
 8008486:	b003      	add	sp, #12
 8008488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800848c:	f7ff bfe2 	b.w	8008454 <__malloc_unlock>
 8008490:	42a3      	cmp	r3, r4
 8008492:	d908      	bls.n	80084a6 <_free_r+0x46>
 8008494:	6825      	ldr	r5, [r4, #0]
 8008496:	1961      	adds	r1, r4, r5
 8008498:	428b      	cmp	r3, r1
 800849a:	bf01      	itttt	eq
 800849c:	6819      	ldreq	r1, [r3, #0]
 800849e:	685b      	ldreq	r3, [r3, #4]
 80084a0:	1949      	addeq	r1, r1, r5
 80084a2:	6021      	streq	r1, [r4, #0]
 80084a4:	e7ed      	b.n	8008482 <_free_r+0x22>
 80084a6:	461a      	mov	r2, r3
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	b10b      	cbz	r3, 80084b0 <_free_r+0x50>
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	d9fa      	bls.n	80084a6 <_free_r+0x46>
 80084b0:	6811      	ldr	r1, [r2, #0]
 80084b2:	1855      	adds	r5, r2, r1
 80084b4:	42a5      	cmp	r5, r4
 80084b6:	d10b      	bne.n	80084d0 <_free_r+0x70>
 80084b8:	6824      	ldr	r4, [r4, #0]
 80084ba:	4421      	add	r1, r4
 80084bc:	1854      	adds	r4, r2, r1
 80084be:	42a3      	cmp	r3, r4
 80084c0:	6011      	str	r1, [r2, #0]
 80084c2:	d1e0      	bne.n	8008486 <_free_r+0x26>
 80084c4:	681c      	ldr	r4, [r3, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	6053      	str	r3, [r2, #4]
 80084ca:	4421      	add	r1, r4
 80084cc:	6011      	str	r1, [r2, #0]
 80084ce:	e7da      	b.n	8008486 <_free_r+0x26>
 80084d0:	d902      	bls.n	80084d8 <_free_r+0x78>
 80084d2:	230c      	movs	r3, #12
 80084d4:	6003      	str	r3, [r0, #0]
 80084d6:	e7d6      	b.n	8008486 <_free_r+0x26>
 80084d8:	6825      	ldr	r5, [r4, #0]
 80084da:	1961      	adds	r1, r4, r5
 80084dc:	428b      	cmp	r3, r1
 80084de:	bf04      	itt	eq
 80084e0:	6819      	ldreq	r1, [r3, #0]
 80084e2:	685b      	ldreq	r3, [r3, #4]
 80084e4:	6063      	str	r3, [r4, #4]
 80084e6:	bf04      	itt	eq
 80084e8:	1949      	addeq	r1, r1, r5
 80084ea:	6021      	streq	r1, [r4, #0]
 80084ec:	6054      	str	r4, [r2, #4]
 80084ee:	e7ca      	b.n	8008486 <_free_r+0x26>
 80084f0:	b003      	add	sp, #12
 80084f2:	bd30      	pop	{r4, r5, pc}
 80084f4:	20001b54 	.word	0x20001b54

080084f8 <_init>:
 80084f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fa:	bf00      	nop
 80084fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fe:	bc08      	pop	{r3}
 8008500:	469e      	mov	lr, r3
 8008502:	4770      	bx	lr

08008504 <_fini>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	bf00      	nop
 8008508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850a:	bc08      	pop	{r3}
 800850c:	469e      	mov	lr, r3
 800850e:	4770      	bx	lr
