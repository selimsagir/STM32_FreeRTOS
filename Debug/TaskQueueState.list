
TaskQueueState.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08008360  08008360  00018360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800859c  0800859c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800859c  0800859c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800859c  0800859c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800859c  0800859c  0001859c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085a0  080085a0  000185a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080085a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000026d4  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002754  20002754  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000245e5  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052f5  00000000  00000000  00044695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ca0  00000000  00000000  00049990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a78  00000000  00000000  0004b630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024be0  00000000  00000000  0004d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027b19  00000000  00000000  00071c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccc52  00000000  00000000  000997a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001663f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000079f4  00000000  00000000  00166444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008348 	.word	0x08008348

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08008348 	.word	0x08008348

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001f4:	b480      	push	{r7}
 80001f6:	b085      	sub	sp, #20
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	4a07      	ldr	r2, [pc, #28]	; (8000220 <vApplicationGetIdleTaskMemory+0x2c>)
 8000204:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	4a06      	ldr	r2, [pc, #24]	; (8000224 <vApplicationGetIdleTaskMemory+0x30>)
 800020a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2280      	movs	r2, #128	; 0x80
 8000210:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	2000009c 	.word	0x2000009c
 8000224:	20000150 	.word	0x20000150

08000228 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	4a07      	ldr	r2, [pc, #28]	; (8000254 <vApplicationGetTimerTaskMemory+0x2c>)
 8000238:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	4a06      	ldr	r2, [pc, #24]	; (8000258 <vApplicationGetTimerTaskMemory+0x30>)
 800023e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000246:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	20000350 	.word	0x20000350
 8000258:	20000404 	.word	0x20000404

0800025c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
	...

0800026c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b08a      	sub	sp, #40	; 0x28
 8000270:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000272:	f107 0314 	add.w	r3, r7, #20
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]
 8000280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000282:	4b37      	ldr	r3, [pc, #220]	; (8000360 <MX_GPIO_Init+0xf4>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	4a36      	ldr	r2, [pc, #216]	; (8000360 <MX_GPIO_Init+0xf4>)
 8000288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800028c:	6153      	str	r3, [r2, #20]
 800028e:	4b34      	ldr	r3, [pc, #208]	; (8000360 <MX_GPIO_Init+0xf4>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000296:	613b      	str	r3, [r7, #16]
 8000298:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029a:	4b31      	ldr	r3, [pc, #196]	; (8000360 <MX_GPIO_Init+0xf4>)
 800029c:	695b      	ldr	r3, [r3, #20]
 800029e:	4a30      	ldr	r2, [pc, #192]	; (8000360 <MX_GPIO_Init+0xf4>)
 80002a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002a4:	6153      	str	r3, [r2, #20]
 80002a6:	4b2e      	ldr	r3, [pc, #184]	; (8000360 <MX_GPIO_Init+0xf4>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002b2:	4b2b      	ldr	r3, [pc, #172]	; (8000360 <MX_GPIO_Init+0xf4>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	4a2a      	ldr	r2, [pc, #168]	; (8000360 <MX_GPIO_Init+0xf4>)
 80002b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002bc:	6153      	str	r3, [r2, #20]
 80002be:	4b28      	ldr	r3, [pc, #160]	; (8000360 <MX_GPIO_Init+0xf4>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002c6:	60bb      	str	r3, [r7, #8]
 80002c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ca:	4b25      	ldr	r3, [pc, #148]	; (8000360 <MX_GPIO_Init+0xf4>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	4a24      	ldr	r2, [pc, #144]	; (8000360 <MX_GPIO_Init+0xf4>)
 80002d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d4:	6153      	str	r3, [r2, #20]
 80002d6:	4b22      	ldr	r3, [pc, #136]	; (8000360 <MX_GPIO_Init+0xf4>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e2:	4b1f      	ldr	r3, [pc, #124]	; (8000360 <MX_GPIO_Init+0xf4>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	4a1e      	ldr	r2, [pc, #120]	; (8000360 <MX_GPIO_Init+0xf4>)
 80002e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002ec:	6153      	str	r3, [r2, #20]
 80002ee:	4b1c      	ldr	r3, [pc, #112]	; (8000360 <MX_GPIO_Init+0xf4>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002f6:	603b      	str	r3, [r7, #0]
 80002f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80002fa:	2200      	movs	r2, #0
 80002fc:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000300:	4818      	ldr	r0, [pc, #96]	; (8000364 <MX_GPIO_Init+0xf8>)
 8000302:	f001 fab3 	bl	800186c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000306:	2337      	movs	r3, #55	; 0x37
 8000308:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800030a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800030e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000310:	2300      	movs	r3, #0
 8000312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4619      	mov	r1, r3
 800031a:	4812      	ldr	r0, [pc, #72]	; (8000364 <MX_GPIO_Init+0xf8>)
 800031c:	f001 f92c 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000320:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000324:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000326:	2301      	movs	r3, #1
 8000328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032e:	2300      	movs	r3, #0
 8000330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000332:	f107 0314 	add.w	r3, r7, #20
 8000336:	4619      	mov	r1, r3
 8000338:	480a      	ldr	r0, [pc, #40]	; (8000364 <MX_GPIO_Init+0xf8>)
 800033a:	f001 f91d 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800033e:	2301      	movs	r3, #1
 8000340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000342:	2300      	movs	r3, #0
 8000344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800034a:	f107 0314 	add.w	r3, r7, #20
 800034e:	4619      	mov	r1, r3
 8000350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000354:	f001 f910 	bl	8001578 <HAL_GPIO_Init>

}
 8000358:	bf00      	nop
 800035a:	3728      	adds	r7, #40	; 0x28
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40021000 	.word	0x40021000
 8000364:	48001000 	.word	0x48001000

08000368 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_I2C1_Init+0x74>)
 800036e:	4a1c      	ldr	r2, [pc, #112]	; (80003e0 <MX_I2C1_Init+0x78>)
 8000370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <MX_I2C1_Init+0x74>)
 8000374:	4a1b      	ldr	r2, [pc, #108]	; (80003e4 <MX_I2C1_Init+0x7c>)
 8000376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_I2C1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <MX_I2C1_Init+0x74>)
 8000380:	2201      	movs	r2, #1
 8000382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_I2C1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <MX_I2C1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_I2C1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_I2C1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_I2C1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003a2:	480e      	ldr	r0, [pc, #56]	; (80003dc <MX_I2C1_Init+0x74>)
 80003a4:	f001 fa7a 	bl	800189c <HAL_I2C_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003ae:	f000 fafb 	bl	80009a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003b2:	2100      	movs	r1, #0
 80003b4:	4809      	ldr	r0, [pc, #36]	; (80003dc <MX_I2C1_Init+0x74>)
 80003b6:	f001 fb00 	bl	80019ba <HAL_I2CEx_ConfigAnalogFilter>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003c0:	f000 faf2 	bl	80009a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003c4:	2100      	movs	r1, #0
 80003c6:	4805      	ldr	r0, [pc, #20]	; (80003dc <MX_I2C1_Init+0x74>)
 80003c8:	f001 fb42 	bl	8001a50 <HAL_I2CEx_ConfigDigitalFilter>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003d2:	f000 fae9 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000804 	.word	0x20000804
 80003e0:	40005400 	.word	0x40005400
 80003e4:	2000090e 	.word	0x2000090e

080003e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08a      	sub	sp, #40	; 0x28
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f0:	f107 0314 	add.w	r3, r7, #20
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a17      	ldr	r2, [pc, #92]	; (8000464 <HAL_I2C_MspInit+0x7c>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d127      	bne.n	800045a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800040a:	4b17      	ldr	r3, [pc, #92]	; (8000468 <HAL_I2C_MspInit+0x80>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a16      	ldr	r2, [pc, #88]	; (8000468 <HAL_I2C_MspInit+0x80>)
 8000410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <HAL_I2C_MspInit+0x80>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800041e:	613b      	str	r3, [r7, #16]
 8000420:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000422:	23c0      	movs	r3, #192	; 0xc0
 8000424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000426:	2312      	movs	r3, #18
 8000428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800042a:	2301      	movs	r3, #1
 800042c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800042e:	2303      	movs	r3, #3
 8000430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000432:	2304      	movs	r3, #4
 8000434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	4619      	mov	r1, r3
 800043c:	480b      	ldr	r0, [pc, #44]	; (800046c <HAL_I2C_MspInit+0x84>)
 800043e:	f001 f89b 	bl	8001578 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <HAL_I2C_MspInit+0x80>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <HAL_I2C_MspInit+0x80>)
 8000448:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800044c:	61d3      	str	r3, [r2, #28]
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <HAL_I2C_MspInit+0x80>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800045a:	bf00      	nop
 800045c:	3728      	adds	r7, #40	; 0x28
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40005400 	.word	0x40005400
 8000468:	40021000 	.word	0x40021000
 800046c:	48000400 	.word	0x48000400

08000470 <led_effect_stop>:
 *      Author: selim
 */

#include "main.h"

void led_effect_stop(){
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af02      	add	r7, sp, #8
	for (int i = 0; i < 4; i++) {
 8000476:	2300      	movs	r3, #0
 8000478:	607b      	str	r3, [r7, #4]
 800047a:	e00e      	b.n	800049a <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 800047c:	4a0b      	ldr	r2, [pc, #44]	; (80004ac <led_effect_stop+0x3c>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000484:	f04f 33ff 	mov.w	r3, #4294967295
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	2300      	movs	r3, #0
 800048c:	2200      	movs	r2, #0
 800048e:	2103      	movs	r1, #3
 8000490:	f006 ff60 	bl	8007354 <xTimerGenericCommand>
	for (int i = 0; i < 4; i++) {
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3301      	adds	r3, #1
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2b03      	cmp	r3, #3
 800049e:	dded      	ble.n	800047c <led_effect_stop+0xc>
	}
}
 80004a0:	bf00      	nop
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000870 	.word	0x20000870

080004b0 <led_effect>:

void led_effect(uint8_t n){
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]

	led_effect_stop();
 80004ba:	f7ff ffd9 	bl	8000470 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	4a09      	ldr	r2, [pc, #36]	; (80004e8 <led_effect+0x38>)
 80004c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80004c8:	f006 f87e 	bl	80065c8 <xTaskGetTickCount>
 80004cc:	4602      	mov	r2, r0
 80004ce:	f04f 33ff 	mov.w	r3, #4294967295
 80004d2:	9300      	str	r3, [sp, #0]
 80004d4:	2300      	movs	r3, #0
 80004d6:	2101      	movs	r1, #1
 80004d8:	4620      	mov	r0, r4
 80004da:	f006 ff3b 	bl	8007354 <xTimerGenericCommand>
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd90      	pop	{r4, r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000870 	.word	0x20000870

080004ec <turn_on_all_leds>:


void turn_on_all_leds(){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <turn_on_all_leds+0x20>)
 80004f8:	f001 f9b8 	bl	800186c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000502:	4802      	ldr	r0, [pc, #8]	; (800050c <turn_on_all_leds+0x20>)
 8000504:	f001 f9b2 	bl	800186c <HAL_GPIO_WritePin>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	48001000 	.word	0x48001000

08000510 <turn_off_all_leds>:

void turn_off_all_leds(){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <turn_off_all_leds+0x20>)
 800051c:	f001 f9a6 	bl	800186c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000526:	4802      	ldr	r0, [pc, #8]	; (8000530 <turn_off_all_leds+0x20>)
 8000528:	f001 f9a0 	bl	800186c <HAL_GPIO_WritePin>
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	48001000 	.word	0x48001000

08000534 <turn_on_odd_leds>:

void turn_on_odd_leds(){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <turn_on_odd_leds+0x20>)
 8000540:	f001 f994 	bl	800186c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800054a:	4802      	ldr	r0, [pc, #8]	; (8000554 <turn_on_odd_leds+0x20>)
 800054c:	f001 f98e 	bl	800186c <HAL_GPIO_WritePin>
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	48001000 	.word	0x48001000

08000558 <turn_off_odd_leds>:

void turn_off_odd_leds(){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <turn_off_odd_leds+0x20>)
 8000564:	f001 f982 	bl	800186c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056e:	4802      	ldr	r0, [pc, #8]	; (8000578 <turn_off_odd_leds+0x20>)
 8000570:	f001 f97c 	bl	800186c <HAL_GPIO_WritePin>
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	48001000 	.word	0x48001000

0800057c <LED_effect1>:



void LED_effect1()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
    static int flag = 1;

    // Perform the XOR operation on the "flag" variable with 1
    // This compares each bit of the first operand (flag) to the corresponding bit of the second operand (1)
    // If the bits are the same, the corresponding result bit is set to 0. If the bits are different, the corresponding result bit is set to 1.
    flag = flag ^ 1;
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <LED_effect1+0x28>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f083 0301 	eor.w	r3, r3, #1
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <LED_effect1+0x28>)
 800058a:	6013      	str	r3, [r2, #0]

    // Check the value of "flag" after the XOR operation
    if (flag == 1) {
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <LED_effect1+0x28>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d102      	bne.n	800059a <LED_effect1+0x1e>
        // If "flag" is 1, call the function to turn on all the LEDs
        turn_on_all_leds();
 8000594:	f7ff ffaa 	bl	80004ec <turn_on_all_leds>
    } else {
        // If "flag" is 0, call the function to turn off all the LEDs
        turn_off_all_leds();
    }
}
 8000598:	e001      	b.n	800059e <LED_effect1+0x22>
        turn_off_all_leds();
 800059a:	f7ff ffb9 	bl	8000510 <turn_off_all_leds>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000000 	.word	0x20000000

080005a8 <LED_effect2>:


void LED_effect2()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    static int flag = 1;

    // Perform the XOR operation on the "flag" variable with 1
    // This compares each bit of the first operand (flag) to the corresponding bit of the second operand (1)
    // If the bits are the same, the corresponding result bit is set to 0. If the bits are different, the corresponding result bit is set to 1.
    flag = flag ^ 1;
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <LED_effect2+0x28>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f083 0301 	eor.w	r3, r3, #1
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <LED_effect2+0x28>)
 80005b6:	6013      	str	r3, [r2, #0]

    // Check the value of "flag" after the XOR operation
    if (flag == 1) {
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <LED_effect2+0x28>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d102      	bne.n	80005c6 <LED_effect2+0x1e>
        // If "flag" is 1, call the function to turn on all the LEDs
        turn_on_odd_leds();
 80005c0:	f7ff ffb8 	bl	8000534 <turn_on_odd_leds>
    } else {
        // If "flag" is 0, call the function to turn off all the LEDs
        turn_off_odd_leds();
    }
}
 80005c4:	e001      	b.n	80005ca <LED_effect2+0x22>
        turn_off_odd_leds();
 80005c6:	f7ff ffc7 	bl	8000558 <turn_off_odd_leds>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000004 	.word	0x20000004

080005d4 <LED_effect3>:


void LED_effect3()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005de:	4802      	ldr	r0, [pc, #8]	; (80005e8 <LED_effect3+0x14>)
 80005e0:	f001 f944 	bl	800186c <HAL_GPIO_WritePin>

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	48001000 	.word	0x48001000

080005ec <LED_effect4>:
void LED_effect4()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f6:	4802      	ldr	r0, [pc, #8]	; (8000600 <LED_effect4+0x14>)
 80005f8:	f001 f938 	bl	800186c <HAL_GPIO_WritePin>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	48001000 	.word	0x48001000

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fe25 	bl	8001258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f8d9 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f7ff fe2b 	bl	800026c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000616:	f7ff fea7 	bl	8000368 <MX_I2C1_Init>
  MX_SPI1_Init();
 800061a:	f000 fa17 	bl	8000a4c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800061e:	f000 fd8b 	bl	8001138 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8000622:	f000 f9c7 	bl	80009b4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000626:	f000 fd0d 	bl	8001044 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800062a:	f7ff fe17 	bl	800025c <MX_FREERTOS_Init>
	status = xTaskCreate(menu_task, "menu_task", 128, NULL, 2, &handle_menu_task);
 800062e:	4b52      	ldr	r3, [pc, #328]	; (8000778 <main+0x174>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2302      	movs	r3, #2
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	4950      	ldr	r1, [pc, #320]	; (800077c <main+0x178>)
 800063c:	4850      	ldr	r0, [pc, #320]	; (8000780 <main+0x17c>)
 800063e:	f005 fd63 	bl	8006108 <xTaskCreate>
 8000642:	61b8      	str	r0, [r7, #24]

	configASSERT(status == pdPASS);
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00a      	beq.n	8000660 <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800065c:	bf00      	nop
 800065e:	e7fe      	b.n	800065e <main+0x5a>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 128, NULL, 2, &handle_cmd_task);
 8000660:	4b48      	ldr	r3, [pc, #288]	; (8000784 <main+0x180>)
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	2302      	movs	r3, #2
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2300      	movs	r3, #0
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	4946      	ldr	r1, [pc, #280]	; (8000788 <main+0x184>)
 800066e:	4847      	ldr	r0, [pc, #284]	; (800078c <main+0x188>)
 8000670:	f005 fd4a 	bl	8006108 <xTaskCreate>
 8000674:	61b8      	str	r0, [r7, #24]

	configASSERT(status == pdPASS);
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d00a      	beq.n	8000692 <main+0x8e>
	__asm volatile
 800067c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000680:	f383 8811 	msr	BASEPRI, r3
 8000684:	f3bf 8f6f 	isb	sy
 8000688:	f3bf 8f4f 	dsb	sy
 800068c:	613b      	str	r3, [r7, #16]
}
 800068e:	bf00      	nop
 8000690:	e7fe      	b.n	8000690 <main+0x8c>

	status = xTaskCreate(print_task, "print_task", 128, NULL, 2, &handle_print_task);
 8000692:	4b3f      	ldr	r3, [pc, #252]	; (8000790 <main+0x18c>)
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2302      	movs	r3, #2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2300      	movs	r3, #0
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	493d      	ldr	r1, [pc, #244]	; (8000794 <main+0x190>)
 80006a0:	483d      	ldr	r0, [pc, #244]	; (8000798 <main+0x194>)
 80006a2:	f005 fd31 	bl	8006108 <xTaskCreate>
 80006a6:	61b8      	str	r0, [r7, #24]

	configASSERT(status == pdPASS);
 80006a8:	69bb      	ldr	r3, [r7, #24]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d00a      	beq.n	80006c4 <main+0xc0>
	__asm volatile
 80006ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b2:	f383 8811 	msr	BASEPRI, r3
 80006b6:	f3bf 8f6f 	isb	sy
 80006ba:	f3bf 8f4f 	dsb	sy
 80006be:	60fb      	str	r3, [r7, #12]
}
 80006c0:	bf00      	nop
 80006c2:	e7fe      	b.n	80006c2 <main+0xbe>

	status = xTaskCreate(led_task, "led_task", 128, NULL, 2, &handle_led_task);
 80006c4:	4b35      	ldr	r3, [pc, #212]	; (800079c <main+0x198>)
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	2302      	movs	r3, #2
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2300      	movs	r3, #0
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	4933      	ldr	r1, [pc, #204]	; (80007a0 <main+0x19c>)
 80006d2:	4834      	ldr	r0, [pc, #208]	; (80007a4 <main+0x1a0>)
 80006d4:	f005 fd18 	bl	8006108 <xTaskCreate>
 80006d8:	61b8      	str	r0, [r7, #24]

	configASSERT(status == pdPASS);
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d00a      	beq.n	80006f6 <main+0xf2>
	__asm volatile
 80006e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006e4:	f383 8811 	msr	BASEPRI, r3
 80006e8:	f3bf 8f6f 	isb	sy
 80006ec:	f3bf 8f4f 	dsb	sy
 80006f0:	60bb      	str	r3, [r7, #8]
}
 80006f2:	bf00      	nop
 80006f4:	e7fe      	b.n	80006f4 <main+0xf0>

	//status = xTaskCreate(rtc_task, "rtc_task", 128, NULL, 2, &handle_rtc_task);

	configASSERT(status == pdPASS);
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d00a      	beq.n	8000712 <main+0x10e>
	__asm volatile
 80006fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000700:	f383 8811 	msr	BASEPRI, r3
 8000704:	f3bf 8f6f 	isb	sy
 8000708:	f3bf 8f4f 	dsb	sy
 800070c:	607b      	str	r3, [r7, #4]
}
 800070e:	bf00      	nop
 8000710:	e7fe      	b.n	8000710 <main+0x10c>

	q_data = xQueueCreate (5, sizeof(char));
 8000712:	2200      	movs	r2, #0
 8000714:	2101      	movs	r1, #1
 8000716:	2005      	movs	r0, #5
 8000718:	f004 ff97 	bl	800564a <xQueueGenericCreate>
 800071c:	4603      	mov	r3, r0
 800071e:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <main+0x1a4>)
 8000720:	6013      	str	r3, [r2, #0]

//	configASSERT(q_data != NULL);

	q_print = xQueueCreate (5, sizeof(size_t));
 8000722:	2200      	movs	r2, #0
 8000724:	2104      	movs	r1, #4
 8000726:	2005      	movs	r0, #5
 8000728:	f004 ff8f 	bl	800564a <xQueueGenericCreate>
 800072c:	4603      	mov	r3, r0
 800072e:	4a1f      	ldr	r2, [pc, #124]	; (80007ac <main+0x1a8>)
 8000730:	6013      	str	r3, [r2, #0]

//	configASSERT(q_print != NULL);

  // create for timer for 4 led attribute

  for ( int i = 0;  i < 4; i++) {
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
 8000736:	e013      	b.n	8000760 <main+0x15c>
	  handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i+1), led_effect_callback);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	3301      	adds	r3, #1
 800073c:	461a      	mov	r2, r3
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <main+0x1ac>)
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	4613      	mov	r3, r2
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800074a:	481a      	ldr	r0, [pc, #104]	; (80007b4 <main+0x1b0>)
 800074c:	f006 fdae 	bl	80072ac <xTimerCreate>
 8000750:	4602      	mov	r2, r0
 8000752:	4919      	ldr	r1, [pc, #100]	; (80007b8 <main+0x1b4>)
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for ( int i = 0;  i < 4; i++) {
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3301      	adds	r3, #1
 800075e:	61fb      	str	r3, [r7, #28]
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	2b03      	cmp	r3, #3
 8000764:	dde8      	ble.n	8000738 <main+0x134>
}

  HAL_UART_Receive_IT(&huart2, &user_data, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	4914      	ldr	r1, [pc, #80]	; (80007bc <main+0x1b8>)
 800076a:	4815      	ldr	r0, [pc, #84]	; (80007c0 <main+0x1bc>)
 800076c:	f003 fc24 	bl	8003fb8 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */



  /* Start scheduler */
  osKernelStart();
 8000770:	f004 fdd1 	bl	8005316 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000774:	e7fe      	b.n	8000774 <main+0x170>
 8000776:	bf00      	nop
 8000778:	20000850 	.word	0x20000850
 800077c:	08008360 	.word	0x08008360
 8000780:	08000d09 	.word	0x08000d09
 8000784:	20000854 	.word	0x20000854
 8000788:	0800836c 	.word	0x0800836c
 800078c:	08000f41 	.word	0x08000f41
 8000790:	20000858 	.word	0x20000858
 8000794:	08008378 	.word	0x08008378
 8000798:	08000f01 	.word	0x08000f01
 800079c:	2000085c 	.word	0x2000085c
 80007a0:	08008384 	.word	0x08008384
 80007a4:	08000de1 	.word	0x08000de1
 80007a8:	20000864 	.word	0x20000864
 80007ac:	20000868 	.word	0x20000868
 80007b0:	08000895 	.word	0x08000895
 80007b4:	08008390 	.word	0x08008390
 80007b8:	20000870 	.word	0x20000870
 80007bc:	2000086c 	.word	0x2000086c
 80007c0:	20000950 	.word	0x20000950

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b09e      	sub	sp, #120	; 0x78
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007ce:	2228      	movs	r2, #40	; 0x28
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f007 fcee 	bl	80081b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	223c      	movs	r2, #60	; 0x3c
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f007 fce0 	bl	80081b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80007f4:	230b      	movs	r3, #11
 80007f6:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000802:	2301      	movs	r3, #1
 8000804:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000806:	2310      	movs	r3, #16
 8000808:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800080a:	2301      	movs	r3, #1
 800080c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080e:	2302      	movs	r3, #2
 8000810:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000816:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000818:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800081c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000822:	4618      	mov	r0, r3
 8000824:	f001 fa3e 	bl	8001ca4 <HAL_RCC_OscConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800082e:	f000 f8bb 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	230f      	movs	r3, #15
 8000834:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000836:	2302      	movs	r3, #2
 8000838:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000842:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000848:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800084c:	2101      	movs	r1, #1
 800084e:	4618      	mov	r0, r3
 8000850:	f002 fa66 	bl	8002d20 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800085a:	f000 f8a5 	bl	80009a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <SystemClock_Config+0xcc>)
 8000860:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800086a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800086e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000870:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4618      	mov	r0, r3
 800087a:	f002 fcb9 	bl	80031f0 <HAL_RCCEx_PeriphCLKConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000884:	f000 f890 	bl	80009a8 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3778      	adds	r7, #120	; 0x78
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	00030022 	.word	0x00030022

08000894 <led_effect_callback>:

/* USER CODE BEGIN 4 */

void led_effect_callback(xTimerHandle xTimer)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t) pvTimerGetTimerID( xTimer );
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f007 f809 	bl	80078b4 <pvTimerGetTimerID>
 80008a2:	4603      	mov	r3, r0
 80008a4:	60fb      	str	r3, [r7, #12]
	switch (id) {
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d816      	bhi.n	80008dc <led_effect_callback+0x48>
 80008ae:	a201      	add	r2, pc, #4	; (adr r2, 80008b4 <led_effect_callback+0x20>)
 80008b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b4:	080008c5 	.word	0x080008c5
 80008b8:	080008cb 	.word	0x080008cb
 80008bc:	080008d1 	.word	0x080008d1
 80008c0:	080008d7 	.word	0x080008d7
		case 1:
			LED_effect1();
 80008c4:	f7ff fe5a 	bl	800057c <LED_effect1>
			break;
 80008c8:	e008      	b.n	80008dc <led_effect_callback+0x48>
		case 2:
			LED_effect2();
 80008ca:	f7ff fe6d 	bl	80005a8 <LED_effect2>
			break;
 80008ce:	e005      	b.n	80008dc <led_effect_callback+0x48>
		case 3:
			LED_effect3();
 80008d0:	f7ff fe80 	bl	80005d4 <LED_effect3>
			break;
 80008d4:	e002      	b.n	80008dc <led_effect_callback+0x48>
		case 4:
			LED_effect4();
 80008d6:	f7ff fe89 	bl	80005ec <LED_effect4>
			break;
 80008da:	bf00      	nop
	}
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <HAL_UART_RxCpltCallback>:
 * This function is called from the UART interrupt handler, hence it executes in interrupt context.
 * It handles received data bytes from the UART and enqueues them in a queue, as well as notifying
 * a command handling task when a new line character is received.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af02      	add	r7, sp, #8
 80008ea:	6078      	str	r0, [r7, #4]
    // Local variable to temporarily hold a data byte when needed
    uint8_t dummy;

    // Delay to allow other interrupts to be handled
    for(uint32_t i = 0 ; i < 4000 ; i++);
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	e002      	b.n	80008f8 <HAL_UART_RxCpltCallback+0x14>
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80008fe:	d3f8      	bcc.n	80008f2 <HAL_UART_RxCpltCallback+0xe>

    // Check if the queue is not full
    if(! xQueueIsQueueFullFromISR(q_data))
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <HAL_UART_RxCpltCallback+0x90>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f005 fb21 	bl	8005f4c <xQueueIsQueueFullFromISR>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d107      	bne.n	8000920 <HAL_UART_RxCpltCallback+0x3c>
    {
        // Enqueue received data byte
        xQueueSendFromISR(q_data , (void*)&user_data , NULL);
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <HAL_UART_RxCpltCallback+0x90>)
 8000912:	6818      	ldr	r0, [r3, #0]
 8000914:	2300      	movs	r3, #0
 8000916:	2200      	movs	r2, #0
 8000918:	4917      	ldr	r1, [pc, #92]	; (8000978 <HAL_UART_RxCpltCallback+0x94>)
 800091a:	f004 fff1 	bl	8005900 <xQueueGenericSendFromISR>
 800091e:	e012      	b.n	8000946 <HAL_UART_RxCpltCallback+0x62>
    }
    else
    {
        // If the queue is full, check if the received data byte is a new line character
        if(user_data == '\n')
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_UART_RxCpltCallback+0x94>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b0a      	cmp	r3, #10
 8000926:	d10e      	bne.n	8000946 <HAL_UART_RxCpltCallback+0x62>
        {
            // Dequeue the last data byte from the queue
            xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_UART_RxCpltCallback+0x90>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f107 010b 	add.w	r1, r7, #11
 8000930:	2200      	movs	r2, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f005 f95c 	bl	8005bf0 <xQueueReceiveFromISR>

            // Enqueue the new line character
            xQueueSendFromISR(q_data ,(void*)&user_data , NULL);
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_UART_RxCpltCallback+0x90>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	2200      	movs	r2, #0
 8000940:	490d      	ldr	r1, [pc, #52]	; (8000978 <HAL_UART_RxCpltCallback+0x94>)
 8000942:	f004 ffdd 	bl	8005900 <xQueueGenericSendFromISR>
        }
    }

    // Check if the received data byte is a new line character
    if( user_data == '\n' )
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_UART_RxCpltCallback+0x94>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b0a      	cmp	r3, #10
 800094c:	d108      	bne.n	8000960 <HAL_UART_RxCpltCallback+0x7c>
    {
        // Send notification to command handling task
        xTaskNotifyFromISR (handle_cmd_task,0,eNoAction,NULL);
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_UART_RxCpltCallback+0x98>)
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	2300      	movs	r3, #0
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2300      	movs	r3, #0
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	f006 fb28 	bl	8006fb0 <xTaskGenericNotifyFromISR>
    }

    // Enable UART data byte reception again in IT mode
    HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000960:	2201      	movs	r2, #1
 8000962:	4905      	ldr	r1, [pc, #20]	; (8000978 <HAL_UART_RxCpltCallback+0x94>)
 8000964:	4806      	ldr	r0, [pc, #24]	; (8000980 <HAL_UART_RxCpltCallback+0x9c>)
 8000966:	f003 fb27 	bl	8003fb8 <HAL_UART_Receive_IT>

}
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000864 	.word	0x20000864
 8000978:	2000086c 	.word	0x2000086c
 800097c:	20000854 	.word	0x20000854
 8000980:	20000950 	.word	0x20000950

08000984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000996:	f000 fc75 	bl	8001284 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40001000 	.word	0x40001000

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_RTC_Init+0x44>)
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <MX_RTC_Init+0x48>)
 80009bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_RTC_Init+0x44>)
 80009c0:	2240      	movs	r2, #64	; 0x40
 80009c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_RTC_Init+0x44>)
 80009c6:	227f      	movs	r2, #127	; 0x7f
 80009c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_RTC_Init+0x44>)
 80009cc:	22ff      	movs	r2, #255	; 0xff
 80009ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_RTC_Init+0x44>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_RTC_Init+0x44>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_RTC_Init+0x44>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_RTC_Init+0x44>)
 80009e4:	f002 fdb4 	bl	8003550 <HAL_RTC_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80009ee:	f7ff ffdb 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000880 	.word	0x20000880
 80009fc:	40002800 	.word	0x40002800

08000a00 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <HAL_RTC_MspInit+0x44>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d111      	bne.n	8000a36 <HAL_RTC_MspInit+0x36>
 8000a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a16:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	fa93 f3a3 	rbit	r3, r3
 8000a1e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a20:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a22:	fab3 f383 	clz	r3, r3
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <HAL_RTC_MspInit+0x48>)
 8000a2c:	4413      	add	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	461a      	mov	r2, r3
 8000a32:	2301      	movs	r3, #1
 8000a34:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40002800 	.word	0x40002800
 8000a48:	10908100 	.word	0x10908100

08000a4c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a52:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <MX_SPI1_Init+0x78>)
 8000a54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a66:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a82:	2208      	movs	r2, #8
 8000a84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a9a:	2207      	movs	r2, #7
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000aac:	f002 fe35 	bl	800371a <HAL_SPI_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ab6:	f7ff ff77 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200008a0 	.word	0x200008a0
 8000ac4:	40013000 	.word	0x40013000

08000ac8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_SPI_MspInit+0x7c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d128      	bne.n	8000b3c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <HAL_SPI_MspInit+0x80>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	4a16      	ldr	r2, [pc, #88]	; (8000b48 <HAL_SPI_MspInit+0x80>)
 8000af0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000af4:	6193      	str	r3, [r2, #24]
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_SPI_MspInit+0x80>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_SPI_MspInit+0x80>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <HAL_SPI_MspInit+0x80>)
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	6153      	str	r3, [r2, #20]
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_SPI_MspInit+0x80>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000b1a:	23e0      	movs	r3, #224	; 0xe0
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f000 fd1e 	bl	8001578 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40013000 	.word	0x40013000
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6193      	str	r3, [r2, #24]
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	61d3      	str	r3, [r2, #28]
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	210f      	movs	r1, #15
 8000b86:	f06f 0001 	mvn.w	r0, #1
 8000b8a:	f000 fc53 	bl	8001434 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	; 0x38
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bac:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <HAL_InitTick+0xe0>)
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_InitTick+0xe0>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	61d3      	str	r3, [r2, #28]
 8000bb8:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <HAL_InitTick+0xe0>)
 8000bba:	69db      	ldr	r3, [r3, #28]
 8000bbc:	f003 0310 	and.w	r3, r3, #16
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc4:	f107 0210 	add.w	r2, r7, #16
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fadc 	bl	800318c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d103      	bne.n	8000be6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bde:	f002 fa91 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8000be2:	6378      	str	r0, [r7, #52]	; 0x34
 8000be4:	e004      	b.n	8000bf0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000be6:	f002 fa8d 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8000bea:	4603      	mov	r3, r0
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf2:	4a23      	ldr	r2, [pc, #140]	; (8000c80 <HAL_InitTick+0xe4>)
 8000bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf8:	0c9b      	lsrs	r3, r3, #18
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <HAL_InitTick+0xe8>)
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <HAL_InitTick+0xec>)
 8000c02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <HAL_InitTick+0xe8>)
 8000c06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c0c:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_InitTick+0xe8>)
 8000c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_InitTick+0xe8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <HAL_InitTick+0xe8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <HAL_InitTick+0xe8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c24:	4817      	ldr	r0, [pc, #92]	; (8000c84 <HAL_InitTick+0xe8>)
 8000c26:	f002 fe23 	bl	8003870 <HAL_TIM_Base_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d11b      	bne.n	8000c70 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c38:	4812      	ldr	r0, [pc, #72]	; (8000c84 <HAL_InitTick+0xe8>)
 8000c3a:	f002 fe7b 	bl	8003934 <HAL_TIM_Base_Start_IT>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d111      	bne.n	8000c70 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c4c:	2036      	movs	r0, #54	; 0x36
 8000c4e:	f000 fc0d 	bl	800146c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d808      	bhi.n	8000c6a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	2036      	movs	r0, #54	; 0x36
 8000c5e:	f000 fbe9 	bl	8001434 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_InitTick+0xf0>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	e002      	b.n	8000c70 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3738      	adds	r7, #56	; 0x38
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	431bde83 	.word	0x431bde83
 8000c84:	20000904 	.word	0x20000904
 8000c88:	40001000 	.word	0x40001000
 8000c8c:	20000010 	.word	0x20000010

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <USART2_IRQHandler+0x10>)
 8000cc2:	f003 f9c7 	bl	8004054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000950 	.word	0x20000950

08000cd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <TIM6_DAC_IRQHandler+0x10>)
 8000cd6:	f002 fe97 	bl	8003a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000904 	.word	0x20000904

08000ce4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <menu_task>:
int extract_command(command_t *cmd);
void process_command(command_t *cmd);
const char *msg_inv = "////Invalid option////\n";

void menu_task(void *param)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu = "\n========================\n"
 8000d10:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <menu_task+0xc0>)
 8000d12:	60bb      	str	r3, [r7, #8]
								"Date and time ----> 1\n"
								"Exit          ----> 2\n"
								"Enter your choice here : ";

	while(1){
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8000d14:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <menu_task+0xc4>)
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	f107 0108 	add.w	r1, r7, #8
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d22:	f004 fcef 	bl	8005704 <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8000d26:	f107 020c 	add.w	r2, r7, #12
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2000      	movs	r0, #0
 8000d32:	f006 f833 	bl	8006d9c <xTaskNotifyWait>
		cmd = (command_t*)cmd_addr;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d12f      	bne.n	8000da2 <menu_task+0x9a>
		{   // ascii conversion  0 is 48 so converting the 48 to 0, 49 to 1 and so on
			option = cmd->payload[0] - 48;
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	3b30      	subs	r3, #48	; 0x30
 8000d48:	613b      	str	r3, [r7, #16]
			switch(option)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d031      	beq.n	8000db4 <menu_task+0xac>
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	dc1c      	bgt.n	8000d90 <menu_task+0x88>
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <menu_task+0x5c>
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d00b      	beq.n	8000d7a <menu_task+0x72>
 8000d62:	e015      	b.n	8000d90 <menu_task+0x88>
			{
				case 0:
					curr_state = sLedEffect;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <menu_task+0xc8>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task,0,eNoAction);
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <menu_task+0xcc>)
 8000d6c:	6818      	ldr	r0, [r3, #0]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	f006 f872 	bl	8006e5c <xTaskGenericNotify>
					break;
 8000d78:	e01d      	b.n	8000db6 <menu_task+0xae>
				case 1:
					curr_state = sRtcMenu;
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <menu_task+0xc8>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task,0,eNoAction);
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <menu_task+0xd0>)
 8000d82:	6818      	ldr	r0, [r3, #0]
 8000d84:	2300      	movs	r3, #0
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f006 f867 	bl	8006e5c <xTaskGenericNotify>
					break;
 8000d8e:	e012      	b.n	8000db6 <menu_task+0xae>
				case 2: /*implement exit */
					break;
				default:
					xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <menu_task+0xc4>)
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	2300      	movs	r3, #0
 8000d96:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9a:	4910      	ldr	r1, [pc, #64]	; (8000ddc <menu_task+0xd4>)
 8000d9c:	f004 fcb2 	bl	8005704 <xQueueGenericSend>
					continue;
 8000da0:	e010      	b.n	8000dc4 <menu_task+0xbc>
			}

		}else{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <menu_task+0xc4>)
 8000da4:	6818      	ldr	r0, [r3, #0]
 8000da6:	2300      	movs	r3, #0
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	490b      	ldr	r1, [pc, #44]	; (8000ddc <menu_task+0xd4>)
 8000dae:	f004 fca9 	bl	8005704 <xQueueGenericSend>
			continue;
 8000db2:	e007      	b.n	8000dc4 <menu_task+0xbc>
					break;
 8000db4:	bf00      	nop
		}


		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f005 ffec 	bl	8006d9c <xTaskNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8000dc4:	e7a6      	b.n	8000d14 <menu_task+0xc>
 8000dc6:	bf00      	nop
 8000dc8:	080083b4 	.word	0x080083b4
 8000dcc:	20000868 	.word	0x20000868
 8000dd0:	2000086d 	.word	0x2000086d
 8000dd4:	2000085c 	.word	0x2000085c
 8000dd8:	20000860 	.word	0x20000860
 8000ddc:	2000000c 	.word	0x2000000c

08000de0 <led_task>:

	  }//while super loop
}
void led_task(void *param)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 8000de8:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <led_task+0xf8>)
 8000dea:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1)
	{
		xTaskNotifyWait(0, 0, NULL,portMAX_DELAY);
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	2000      	movs	r0, #0
 8000df6:	f005 ffd1 	bl	8006d9c <xTaskNotifyWait>
		//print led menu
		xQueueSend(q_print, &msg_led, portMAX_DELAY);
 8000dfa:	4b38      	ldr	r3, [pc, #224]	; (8000edc <led_task+0xfc>)
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	f107 010c 	add.w	r1, r7, #12
 8000e02:	2300      	movs	r3, #0
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	f004 fc7c 	bl	8005704 <xQueueGenericSend>
		//wait for led command (notify wait)
		xTaskNotifyWait(0, 0, &cmd_addr,portMAX_DELAY);
 8000e0c:	f107 0210 	add.w	r2, r7, #16
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
 8000e14:	2100      	movs	r1, #0
 8000e16:	2000      	movs	r0, #0
 8000e18:	f005 ffc0 	bl	8006d9c <xTaskNotifyWait>
		cmd = (command_t*)cmd_addr;
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	617b      	str	r3, [r7, #20]
		if(cmd->len <=4)
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d843      	bhi.n	8000eb0 <led_task+0xd0>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	492d      	ldr	r1, [pc, #180]	; (8000ee0 <led_task+0x100>)
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff f9cf 	bl	80001d0 <strcmp>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <led_task+0x5e>
				led_effect_stop();
 8000e38:	f7ff fb1a 	bl	8000470 <led_effect_stop>
 8000e3c:	e040      	b.n	8000ec0 <led_task+0xe0>
			else if (! strcmp((char*)cmd->payload,"e1"))
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	4928      	ldr	r1, [pc, #160]	; (8000ee4 <led_task+0x104>)
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff f9c4 	bl	80001d0 <strcmp>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d103      	bne.n	8000e56 <led_task+0x76>
				led_effect(1);
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff fb2e 	bl	80004b0 <led_effect>
 8000e54:	e034      	b.n	8000ec0 <led_task+0xe0>
			else if (! strcmp((char*)cmd->payload,"e2"))
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	4923      	ldr	r1, [pc, #140]	; (8000ee8 <led_task+0x108>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff f9b8 	bl	80001d0 <strcmp>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d103      	bne.n	8000e6e <led_task+0x8e>
				led_effect(2);
 8000e66:	2002      	movs	r0, #2
 8000e68:	f7ff fb22 	bl	80004b0 <led_effect>
 8000e6c:	e028      	b.n	8000ec0 <led_task+0xe0>
			else if (! strcmp((char*)cmd->payload,"e3"))
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	491e      	ldr	r1, [pc, #120]	; (8000eec <led_task+0x10c>)
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff f9ac 	bl	80001d0 <strcmp>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d103      	bne.n	8000e86 <led_task+0xa6>
				led_effect(3);
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f7ff fb16 	bl	80004b0 <led_effect>
 8000e84:	e01c      	b.n	8000ec0 <led_task+0xe0>
			else if (! strcmp((char*)cmd->payload,"e4"))
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	4919      	ldr	r1, [pc, #100]	; (8000ef0 <led_task+0x110>)
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff f9a0 	bl	80001d0 <strcmp>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d103      	bne.n	8000e9e <led_task+0xbe>
				led_effect(4);
 8000e96:	2004      	movs	r0, #4
 8000e98:	f7ff fb0a 	bl	80004b0 <led_effect>
 8000e9c:	e010      	b.n	8000ec0 <led_task+0xe0>
			else
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);  // print invalid command
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <led_task+0xfc>)
 8000ea0:	6818      	ldr	r0, [r3, #0]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	4912      	ldr	r1, [pc, #72]	; (8000ef4 <led_task+0x114>)
 8000eaa:	f004 fc2b 	bl	8005704 <xQueueGenericSend>
 8000eae:	e007      	b.n	8000ec0 <led_task+0xe0>
		}else
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <led_task+0xfc>)
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eba:	490e      	ldr	r1, [pc, #56]	; (8000ef4 <led_task+0x114>)
 8000ebc:	f004 fc22 	bl	8005704 <xQueueGenericSend>

		//update state variable
		curr_state = sMainMenu;
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <led_task+0x118>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
		// notify task menu
		xTaskNotify(handle_menu_task, 0, eNoAction);
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <led_task+0x11c>)
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f005 ffc4 	bl	8006e5c <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL,portMAX_DELAY);
 8000ed4:	e78a      	b.n	8000dec <led_task+0xc>
 8000ed6:	bf00      	nop
 8000ed8:	0800845c 	.word	0x0800845c
 8000edc:	20000868 	.word	0x20000868
 8000ee0:	080084d4 	.word	0x080084d4
 8000ee4:	080084dc 	.word	0x080084dc
 8000ee8:	080084e0 	.word	0x080084e0
 8000eec:	080084e4 	.word	0x080084e4
 8000ef0:	080084e8 	.word	0x080084e8
 8000ef4:	2000000c 	.word	0x2000000c
 8000ef8:	2000086d 	.word	0x2000086d
 8000efc:	20000850 	.word	0x20000850

08000f00 <print_task>:
	{

	}
}
void print_task(void *param)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <print_task+0x38>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f107 010c 	add.w	r1, r7, #12
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295
 8000f14:	4618      	mov	r0, r3
 8000f16:	f004 fd8b 	bl	8005a30 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8000f1a:	68fc      	ldr	r4, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff f960 	bl	80001e4 <strlen>
 8000f24:	4603      	mov	r3, r0
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	4803      	ldr	r0, [pc, #12]	; (8000f3c <print_task+0x3c>)
 8000f30:	f002 ffae 	bl	8003e90 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8000f34:	e7e8      	b.n	8000f08 <print_task+0x8>
 8000f36:	bf00      	nop
 8000f38:	20000868 	.word	0x20000868
 8000f3c:	20000950 	.word	0x20000950

08000f40 <cmd_handler_task>:
	}
}
void cmd_handler_task(void *param)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	command_t cmd;

	while(1)
	{
		/* Implement notify wait*/
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2000      	movs	r0, #0
 8000f52:	f005 ff23 	bl	8006d9c <xTaskNotifyWait>
 8000f56:	61f8      	str	r0, [r7, #28]
	    /* process the user data(command) stored in input data queue*/
		process_command(&cmd);
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 f801 	bl	8000f64 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000f62:	e7f1      	b.n	8000f48 <cmd_handler_task+0x8>

08000f64 <process_command>:
	}
}

void process_command(command_t *cmd){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f82f 	bl	8000fd0 <extract_command>
	switch(curr_state){
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <process_command+0x5c>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b05      	cmp	r3, #5
 8000f78:	dc1e      	bgt.n	8000fb8 <process_command+0x54>
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	da14      	bge.n	8000fa8 <process_command+0x44>
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <process_command+0x24>
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d008      	beq.n	8000f98 <process_command+0x34>
	case sRtcDateConfig:
	case sRtcReport:
		xTaskNotify(handle_rtc_task, (uint32_t)cmd,eSetValueWithOverwrite );
		break;
	}
}
 8000f86:	e017      	b.n	8000fb8 <process_command+0x54>
		xTaskNotify(handle_menu_task, (uint32_t)cmd,eSetValueWithOverwrite );
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <process_command+0x60>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	2203      	movs	r2, #3
 8000f92:	f005 ff63 	bl	8006e5c <xTaskGenericNotify>
		break;
 8000f96:	e00f      	b.n	8000fb8 <process_command+0x54>
		xTaskNotify(handle_led_task, (uint32_t)cmd,eSetValueWithOverwrite );
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <process_command+0x64>)
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	f005 ff5b 	bl	8006e5c <xTaskGenericNotify>
		break;
 8000fa6:	e007      	b.n	8000fb8 <process_command+0x54>
		xTaskNotify(handle_rtc_task, (uint32_t)cmd,eSetValueWithOverwrite );
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <process_command+0x68>)
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	f005 ff53 	bl	8006e5c <xTaskGenericNotify>
		break;
 8000fb6:	bf00      	nop
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000086d 	.word	0x2000086d
 8000fc4:	20000850 	.word	0x20000850
 8000fc8:	2000085c 	.word	0x2000085c
 8000fcc:	20000860 	.word	0x20000860

08000fd0 <extract_command>:

int extract_command(command_t *cmd)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <extract_command+0x70>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f004 fe87 	bl	8005cf0 <uxQueueMessagesWaiting>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	613b      	str	r3, [r7, #16]
	if (!status)  return -1;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <extract_command+0x22>
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	e022      	b.n	8001038 <extract_command+0x68>
	uint8_t i = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	75fb      	strb	r3, [r7, #23]

	do {
		status = xQueueReceive(q_data,&item, 0);
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <extract_command+0x70>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f107 010f 	add.w	r1, r7, #15
 8000ffe:	2200      	movs	r2, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f004 fd15 	bl	8005a30 <xQueueReceive>
 8001006:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d106      	bne.n	800101c <extract_command+0x4c>
		{
			cmd->payload[i++] = item;
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	75fa      	strb	r2, [r7, #23]
 8001014:	461a      	mov	r2, r3
 8001016:	7bf9      	ldrb	r1, [r7, #15]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	5499      	strb	r1, [r3, r2]
		}
		} while (item != '\n');
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	2b0a      	cmp	r3, #10
 8001020:	d1e9      	bne.n	8000ff6 <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001022:	7dfb      	ldrb	r3, [r7, #23]
 8001024:	3b01      	subs	r3, #1
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	2100      	movs	r1, #0
 800102a:	54d1      	strb	r1, [r2, r3]
	cmd->len = i - 1;
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	3b01      	subs	r3, #1
 8001030:	461a      	mov	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60da      	str	r2, [r3, #12]
	return 0;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000864 	.word	0x20000864

08001044 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_USART2_UART_Init+0x58>)
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <MX_USART2_UART_Init+0x5c>)
 800104c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_USART2_UART_Init+0x58>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_USART2_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_USART2_UART_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_USART2_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_USART2_UART_Init+0x58>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_USART2_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_USART2_UART_Init+0x58>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_USART2_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_USART2_UART_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_USART2_UART_Init+0x58>)
 8001088:	f002 feb4 	bl	8003df4 <HAL_UART_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001092:	f7ff fc89 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000950 	.word	0x20000950
 80010a0:	40004400 	.word	0x40004400

080010a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <HAL_UART_MspInit+0x8c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d130      	bne.n	8001128 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_UART_MspInit+0x90>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a1a      	ldr	r2, [pc, #104]	; (8001134 <HAL_UART_MspInit+0x90>)
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d0:	61d3      	str	r3, [r2, #28]
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_UART_MspInit+0x90>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_UART_MspInit+0x90>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	4a14      	ldr	r2, [pc, #80]	; (8001134 <HAL_UART_MspInit+0x90>)
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	6153      	str	r3, [r2, #20]
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_UART_MspInit+0x90>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010f6:	230c      	movs	r3, #12
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001106:	2307      	movs	r3, #7
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001114:	f000 fa30 	bl	8001578 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2106      	movs	r1, #6
 800111c:	2026      	movs	r0, #38	; 0x26
 800111e:	f000 f989 	bl	8001434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001122:	2026      	movs	r0, #38	; 0x26
 8001124:	f000 f9a2 	bl	800146c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001128:	bf00      	nop
 800112a:	3728      	adds	r7, #40	; 0x28
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40004400 	.word	0x40004400
 8001134:	40021000 	.word	0x40021000

08001138 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <MX_USB_PCD_Init+0x3c>)
 800113e:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <MX_USB_PCD_Init+0x40>)
 8001140:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_USB_PCD_Init+0x3c>)
 8001144:	2208      	movs	r2, #8
 8001146:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MX_USB_PCD_Init+0x3c>)
 800114a:	2202      	movs	r2, #2
 800114c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_USB_PCD_Init+0x3c>)
 8001150:	2202      	movs	r2, #2
 8001152:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <MX_USB_PCD_Init+0x3c>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_USB_PCD_Init+0x3c>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_USB_PCD_Init+0x3c>)
 8001162:	f000 fcc1 	bl	8001ae8 <HAL_PCD_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800116c:	f7ff fc1c 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200009d4 	.word	0x200009d4
 8001178:	40005c00 	.word	0x40005c00

0800117c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a18      	ldr	r2, [pc, #96]	; (80011fc <HAL_PCD_MspInit+0x80>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d129      	bne.n	80011f2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_PCD_MspInit+0x84>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4a17      	ldr	r2, [pc, #92]	; (8001200 <HAL_PCD_MspInit+0x84>)
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	6153      	str	r3, [r2, #20]
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_PCD_MspInit+0x84>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80011b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80011c8:	230e      	movs	r3, #14
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f000 f9cf 	bl	8001578 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_PCD_MspInit+0x84>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a08      	ldr	r2, [pc, #32]	; (8001200 <HAL_PCD_MspInit+0x84>)
 80011e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011e4:	61d3      	str	r3, [r2, #28]
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_PCD_MspInit+0x84>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40005c00 	.word	0x40005c00
 8001200:	40021000 	.word	0x40021000

08001204 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800123c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <LoopForever+0x6>)
  ldr r1, =_edata
 800120a:	490e      	ldr	r1, [pc, #56]	; (8001244 <LoopForever+0xa>)
  ldr r2, =_sidata
 800120c:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <LoopForever+0xe>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001220:	4c0b      	ldr	r4, [pc, #44]	; (8001250 <LoopForever+0x16>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800122e:	f7ff fd59 	bl	8000ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001232:	f006 ff8b 	bl	800814c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001236:	f7ff f9e5 	bl	8000604 <main>

0800123a <LoopForever>:

LoopForever:
    b LoopForever
 800123a:	e7fe      	b.n	800123a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800123c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001248:	080085a4 	.word	0x080085a4
  ldr r2, =_sbss
 800124c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001250:	20002754 	.word	0x20002754

08001254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC1_2_IRQHandler>
	...

08001258 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_Init+0x28>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_Init+0x28>)
 8001262:	f043 0310 	orr.w	r3, r3, #16
 8001266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f8d8 	bl	800141e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126e:	200f      	movs	r0, #15
 8001270:	f7ff fc94 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001274:	f7ff fc6a 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40022000 	.word	0x40022000

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000014 	.word	0x20000014
 80012a8:	20000cc0 	.word	0x20000cc0

080012ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000cc0 	.word	0x20000cc0

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db0b      	blt.n	8001352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	4907      	ldr	r1, [pc, #28]	; (8001360 <__NVIC_EnableIRQ+0x38>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ff4c 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001446:	f7ff ff61 	bl	800130c <__NVIC_GetPriorityGrouping>
 800144a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	68b9      	ldr	r1, [r7, #8]
 8001450:	6978      	ldr	r0, [r7, #20]
 8001452:	f7ff ffb1 	bl	80013b8 <NVIC_EncodePriority>
 8001456:	4602      	mov	r2, r0
 8001458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145c:	4611      	mov	r1, r2
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff80 	bl	8001364 <__NVIC_SetPriority>
}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff54 	bl	8001328 <__NVIC_EnableIRQ>
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001496:	2b02      	cmp	r3, #2
 8001498:	d008      	beq.n	80014ac <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2204      	movs	r2, #4
 800149e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e020      	b.n	80014ee <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 020e 	bic.w	r2, r2, #14
 80014ba:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d4:	2101      	movs	r1, #1
 80014d6:	fa01 f202 	lsl.w	r2, r1, r2
 80014da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800150c:	2b02      	cmp	r3, #2
 800150e:	d005      	beq.n	800151c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2204      	movs	r2, #4
 8001514:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	73fb      	strb	r3, [r7, #15]
 800151a:	e027      	b.n	800156c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 020e 	bic.w	r2, r2, #14
 800152a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0201 	bic.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001544:	2101      	movs	r1, #1
 8001546:	fa01 f202 	lsl.w	r2, r1, r2
 800154a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	4798      	blx	r3
    } 
  }
  return status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001586:	e154      	b.n	8001832 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2101      	movs	r1, #1
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 8146 	beq.w	800182c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d005      	beq.n	80015b8 <HAL_GPIO_Init+0x40>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d130      	bne.n	800161a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ee:	2201      	movs	r2, #1
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	f003 0201 	and.w	r2, r3, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	2b03      	cmp	r3, #3
 8001624:	d017      	beq.n	8001656 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d123      	bne.n	80016aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	220f      	movs	r2, #15
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	08da      	lsrs	r2, r3, #3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3208      	adds	r2, #8
 80016a4:	6939      	ldr	r1, [r7, #16]
 80016a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0203 	and.w	r2, r3, #3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80a0 	beq.w	800182c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ec:	4b58      	ldr	r3, [pc, #352]	; (8001850 <HAL_GPIO_Init+0x2d8>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a57      	ldr	r2, [pc, #348]	; (8001850 <HAL_GPIO_Init+0x2d8>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b55      	ldr	r3, [pc, #340]	; (8001850 <HAL_GPIO_Init+0x2d8>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001704:	4a53      	ldr	r2, [pc, #332]	; (8001854 <HAL_GPIO_Init+0x2dc>)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800172e:	d019      	beq.n	8001764 <HAL_GPIO_Init+0x1ec>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a49      	ldr	r2, [pc, #292]	; (8001858 <HAL_GPIO_Init+0x2e0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d013      	beq.n	8001760 <HAL_GPIO_Init+0x1e8>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a48      	ldr	r2, [pc, #288]	; (800185c <HAL_GPIO_Init+0x2e4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d00d      	beq.n	800175c <HAL_GPIO_Init+0x1e4>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a47      	ldr	r2, [pc, #284]	; (8001860 <HAL_GPIO_Init+0x2e8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d007      	beq.n	8001758 <HAL_GPIO_Init+0x1e0>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a46      	ldr	r2, [pc, #280]	; (8001864 <HAL_GPIO_Init+0x2ec>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d101      	bne.n	8001754 <HAL_GPIO_Init+0x1dc>
 8001750:	2304      	movs	r3, #4
 8001752:	e008      	b.n	8001766 <HAL_GPIO_Init+0x1ee>
 8001754:	2305      	movs	r3, #5
 8001756:	e006      	b.n	8001766 <HAL_GPIO_Init+0x1ee>
 8001758:	2303      	movs	r3, #3
 800175a:	e004      	b.n	8001766 <HAL_GPIO_Init+0x1ee>
 800175c:	2302      	movs	r3, #2
 800175e:	e002      	b.n	8001766 <HAL_GPIO_Init+0x1ee>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_GPIO_Init+0x1ee>
 8001764:	2300      	movs	r3, #0
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	f002 0203 	and.w	r2, r2, #3
 800176c:	0092      	lsls	r2, r2, #2
 800176e:	4093      	lsls	r3, r2
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001776:	4937      	ldr	r1, [pc, #220]	; (8001854 <HAL_GPIO_Init+0x2dc>)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001784:	4b38      	ldr	r3, [pc, #224]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017a8:	4a2f      	ldr	r2, [pc, #188]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017ae:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017d2:	4a25      	ldr	r2, [pc, #148]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d8:	4b23      	ldr	r3, [pc, #140]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017fc:	4a1a      	ldr	r2, [pc, #104]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001802:	4b19      	ldr	r3, [pc, #100]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001826:	4a10      	ldr	r2, [pc, #64]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3301      	adds	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	f47f aea3 	bne.w	8001588 <HAL_GPIO_Init+0x10>
  }
}
 8001842:	bf00      	nop
 8001844:	bf00      	nop
 8001846:	371c      	adds	r7, #28
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	40021000 	.word	0x40021000
 8001854:	40010000 	.word	0x40010000
 8001858:	48000400 	.word	0x48000400
 800185c:	48000800 	.word	0x48000800
 8001860:	48000c00 	.word	0x48000c00
 8001864:	48001000 	.word	0x48001000
 8001868:	40010400 	.word	0x40010400

0800186c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
 8001878:	4613      	mov	r3, r2
 800187a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800187c:	787b      	ldrb	r3, [r7, #1]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001882:	887a      	ldrh	r2, [r7, #2]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001888:	e002      	b.n	8001890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800188a:	887a      	ldrh	r2, [r7, #2]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e081      	b.n	80019b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d106      	bne.n	80018c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7fe fd90 	bl	80003e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2224      	movs	r2, #36	; 0x24
 80018cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d107      	bne.n	8001916 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	e006      	b.n	8001924 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001922:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d104      	bne.n	8001936 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001934:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001948:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001958:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69d9      	ldr	r1, [r3, #28]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1a      	ldr	r2, [r3, #32]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2220      	movs	r2, #32
 800199e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	d138      	bne.n	8001a42 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d101      	bne.n	80019de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019da:	2302      	movs	r3, #2
 80019dc:	e032      	b.n	8001a44 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2224      	movs	r2, #36	; 0x24
 80019ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0201 	bic.w	r2, r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a0c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6819      	ldr	r1, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0201 	orr.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2220      	movs	r2, #32
 8001a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a42:	2302      	movs	r3, #2
  }
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	d139      	bne.n	8001ada <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e033      	b.n	8001adc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2224      	movs	r2, #36	; 0x24
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aa2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e000      	b.n	8001adc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ada:	2302      	movs	r3, #2
  }
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aea:	b08b      	sub	sp, #44	; 0x2c
 8001aec:	af06      	add	r7, sp, #24
 8001aee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0d0      	b.n	8001c9c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d106      	bne.n	8001b14 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fb34 	bl	800117c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2203      	movs	r2, #3
 8001b18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 fbbc 	bl	800529e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
 8001b2a:	e04c      	b.n	8001bc6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	440b      	add	r3, r1
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	b298      	uxth	r0, r3
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	440b      	add	r3, r1
 8001b68:	3336      	adds	r3, #54	; 0x36
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	440b      	add	r3, r1
 8001b7e:	3303      	adds	r3, #3
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	440b      	add	r3, r1
 8001b92:	3338      	adds	r3, #56	; 0x38
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	440b      	add	r3, r1
 8001ba6:	333c      	adds	r3, #60	; 0x3c
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bac:	7bfa      	ldrb	r2, [r7, #15]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	440b      	add	r3, r1
 8001bba:	3340      	adds	r3, #64	; 0x40
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	73fb      	strb	r3, [r7, #15]
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d3ad      	bcc.n	8001b2c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	e044      	b.n	8001c60 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bd6:	7bfa      	ldrb	r2, [r7, #15]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	440b      	add	r3, r1
 8001be4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	440b      	add	r3, r1
 8001c10:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d3b5      	bcc.n	8001bd6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	687e      	ldr	r6, [r7, #4]
 8001c72:	466d      	mov	r5, sp
 8001c74:	f106 0410 	add.w	r4, r6, #16
 8001c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	602b      	str	r3, [r5, #0]
 8001c80:	1d33      	adds	r3, r6, #4
 8001c82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c84:	6838      	ldr	r0, [r7, #0]
 8001c86:	f003 fb25 	bl	80052d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f001 b823 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 817d 	beq.w	8001fda <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ce0:	4bbc      	ldr	r3, [pc, #752]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d00c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cec:	4bb9      	ldr	r3, [pc, #740]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d15c      	bne.n	8001db2 <HAL_RCC_OscConfig+0x10e>
 8001cf8:	4bb6      	ldr	r3, [pc, #728]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d04:	d155      	bne.n	8001db2 <HAL_RCC_OscConfig+0x10e>
 8001d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d0a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8001d1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HAL_RCC_OscConfig+0x94>
 8001d32:	4ba8      	ldr	r3, [pc, #672]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	e015      	b.n	8001d64 <HAL_RCC_OscConfig+0xc0>
 8001d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d3c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d50:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d54:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001d60:	4b9c      	ldr	r3, [pc, #624]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d68:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001d6c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d70:	fa92 f2a2 	rbit	r2, r2
 8001d74:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001d78:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001d7c:	fab2 f282 	clz	r2, r2
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f042 0220 	orr.w	r2, r2, #32
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	f002 021f 	and.w	r2, r2, #31
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 811f 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x334>
 8001d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 8116 	bne.w	8001fd8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	f000 bfaf 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x12e>
 8001dc4:	4b83      	ldr	r3, [pc, #524]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a82      	ldr	r2, [pc, #520]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	e036      	b.n	8001e40 <HAL_RCC_OscConfig+0x19c>
 8001dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x158>
 8001de2:	4b7c      	ldr	r3, [pc, #496]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a7b      	ldr	r2, [pc, #492]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b79      	ldr	r3, [pc, #484]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a78      	ldr	r2, [pc, #480]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e021      	b.n	8001e40 <HAL_RCC_OscConfig+0x19c>
 8001dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x184>
 8001e0e:	4b71      	ldr	r3, [pc, #452]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a70      	ldr	r2, [pc, #448]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	4b6e      	ldr	r3, [pc, #440]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6d      	ldr	r2, [pc, #436]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0x19c>
 8001e28:	4b6a      	ldr	r3, [pc, #424]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a69      	ldr	r2, [pc, #420]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a66      	ldr	r2, [pc, #408]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e40:	4b64      	ldr	r3, [pc, #400]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	f023 020f 	bic.w	r2, r3, #15
 8001e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	495f      	ldr	r1, [pc, #380]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d059      	beq.n	8001f1e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fa1f 	bl	80012ac <HAL_GetTick>
 8001e6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff fa1a 	bl	80012ac <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b64      	cmp	r3, #100	; 0x64
 8001e82:	d902      	bls.n	8001e8a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	f000 bf43 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
 8001e8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e8e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001e9e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_OscConfig+0x218>
 8001eb6:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	e015      	b.n	8001ee8 <HAL_RCC_OscConfig+0x244>
 8001ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ed8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ee4:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eec:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001ef0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ef4:	fa92 f2a2 	rbit	r2, r2
 8001ef8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001efc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f00:	fab2 f282 	clz	r2, r2
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	f042 0220 	orr.w	r2, r2, #32
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	f002 021f 	and.w	r2, r2, #31
 8001f10:	2101      	movs	r1, #1
 8001f12:	fa01 f202 	lsl.w	r2, r1, r2
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ab      	beq.n	8001e74 <HAL_RCC_OscConfig+0x1d0>
 8001f1c:	e05d      	b.n	8001fda <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff f9c5 	bl	80012ac <HAL_GetTick>
 8001f22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff f9c0 	bl	80012ac <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b64      	cmp	r3, #100	; 0x64
 8001f36:	d902      	bls.n	8001f3e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	f000 bee9 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
 8001f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f42:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001f52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	095b      	lsrs	r3, r3, #5
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d102      	bne.n	8001f70 <HAL_RCC_OscConfig+0x2cc>
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	e015      	b.n	8001f9c <HAL_RCC_OscConfig+0x2f8>
 8001f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f74:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f88:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f8c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_RCC_OscConfig+0x330>)
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fa0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001fa4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001fa8:	fa92 f2a2 	rbit	r2, r2
 8001fac:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001fb0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001fb4:	fab2 f282 	clz	r2, r2
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f042 0220 	orr.w	r2, r2, #32
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f002 021f 	and.w	r2, r2, #31
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ab      	bne.n	8001f28 <HAL_RCC_OscConfig+0x284>
 8001fd0:	e003      	b.n	8001fda <HAL_RCC_OscConfig+0x336>
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 817d 	beq.w	80022ea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ff0:	4ba6      	ldr	r3, [pc, #664]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00b      	beq.n	8002014 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ffc:	4ba3      	ldr	r3, [pc, #652]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d172      	bne.n	80020ee <HAL_RCC_OscConfig+0x44a>
 8002008:	4ba0      	ldr	r3, [pc, #640]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d16c      	bne.n	80020ee <HAL_RCC_OscConfig+0x44a>
 8002014:	2302      	movs	r3, #2
 8002016:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002026:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	095b      	lsrs	r3, r3, #5
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d102      	bne.n	8002044 <HAL_RCC_OscConfig+0x3a0>
 800203e:	4b93      	ldr	r3, [pc, #588]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	e013      	b.n	800206c <HAL_RCC_OscConfig+0x3c8>
 8002044:	2302      	movs	r3, #2
 8002046:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002056:	2302      	movs	r3, #2
 8002058:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800205c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002068:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	2202      	movs	r2, #2
 800206e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002072:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002076:	fa92 f2a2 	rbit	r2, r2
 800207a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800207e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002082:	fab2 f282 	clz	r2, r2
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	f042 0220 	orr.w	r2, r2, #32
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	f002 021f 	and.w	r2, r2, #31
 8002092:	2101      	movs	r1, #1
 8002094:	fa01 f202 	lsl.w	r2, r1, r2
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCC_OscConfig+0x410>
 800209e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d002      	beq.n	80020b4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	f000 be2e 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b4:	4b75      	ldr	r3, [pc, #468]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	21f8      	movs	r1, #248	; 0xf8
 80020ca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80020d2:	fa91 f1a1 	rbit	r1, r1
 80020d6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80020da:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80020de:	fab1 f181 	clz	r1, r1
 80020e2:	b2c9      	uxtb	r1, r1
 80020e4:	408b      	lsls	r3, r1
 80020e6:	4969      	ldr	r1, [pc, #420]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ec:	e0fd      	b.n	80022ea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8088 	beq.w	8002210 <HAL_RCC_OscConfig+0x56c>
 8002100:	2301      	movs	r3, #1
 8002102:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002112:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002120:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	461a      	mov	r2, r3
 8002128:	2301      	movs	r3, #1
 800212a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff f8be 	bl	80012ac <HAL_GetTick>
 8002130:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002136:	f7ff f8b9 	bl	80012ac <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d902      	bls.n	800214c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	f000 bde2 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
 800214c:	2302      	movs	r3, #2
 800214e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800215e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d102      	bne.n	800217c <HAL_RCC_OscConfig+0x4d8>
 8002176:	4b45      	ldr	r3, [pc, #276]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	e013      	b.n	80021a4 <HAL_RCC_OscConfig+0x500>
 800217c:	2302      	movs	r3, #2
 800217e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800218e:	2302      	movs	r3, #2
 8002190:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002194:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80021a0:	4b3a      	ldr	r3, [pc, #232]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	2202      	movs	r2, #2
 80021a6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80021aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021ae:	fa92 f2a2 	rbit	r2, r2
 80021b2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80021b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80021ba:	fab2 f282 	clz	r2, r2
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	f042 0220 	orr.w	r2, r2, #32
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	f002 021f 	and.w	r2, r2, #31
 80021ca:	2101      	movs	r1, #1
 80021cc:	fa01 f202 	lsl.w	r2, r1, r2
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0af      	beq.n	8002136 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d6:	4b2d      	ldr	r3, [pc, #180]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	21f8      	movs	r1, #248	; 0xf8
 80021ec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80021f4:	fa91 f1a1 	rbit	r1, r1
 80021f8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80021fc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002200:	fab1 f181 	clz	r1, r1
 8002204:	b2c9      	uxtb	r1, r1
 8002206:	408b      	lsls	r3, r1
 8002208:	4920      	ldr	r1, [pc, #128]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
 800220e:	e06c      	b.n	80022ea <HAL_RCC_OscConfig+0x646>
 8002210:	2301      	movs	r3, #1
 8002212:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002222:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002230:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	461a      	mov	r2, r3
 8002238:	2300      	movs	r3, #0
 800223a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff f836 	bl	80012ac <HAL_GetTick>
 8002240:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002246:	f7ff f831 	bl	80012ac <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d902      	bls.n	800225c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	f000 bd5a 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
 800225c:	2302      	movs	r3, #2
 800225e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800226e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	095b      	lsrs	r3, r3, #5
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d104      	bne.n	8002290 <HAL_RCC_OscConfig+0x5ec>
 8002286:	4b01      	ldr	r3, [pc, #4]	; (800228c <HAL_RCC_OscConfig+0x5e8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	e015      	b.n	80022b8 <HAL_RCC_OscConfig+0x614>
 800228c:	40021000 	.word	0x40021000
 8002290:	2302      	movs	r3, #2
 8002292:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022a2:	2302      	movs	r3, #2
 80022a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80022b4:	4bc8      	ldr	r3, [pc, #800]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	2202      	movs	r2, #2
 80022ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80022be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80022c2:	fa92 f2a2 	rbit	r2, r2
 80022c6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80022ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80022ce:	fab2 f282 	clz	r2, r2
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	f042 0220 	orr.w	r2, r2, #32
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f002 021f 	and.w	r2, r2, #31
 80022de:	2101      	movs	r1, #1
 80022e0:	fa01 f202 	lsl.w	r2, r1, r2
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1ad      	bne.n	8002246 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8110 	beq.w	8002520 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002304:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d079      	beq.n	8002404 <HAL_RCC_OscConfig+0x760>
 8002310:	2301      	movs	r3, #1
 8002312:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	4bab      	ldr	r3, [pc, #684]	; (80025dc <HAL_RCC_OscConfig+0x938>)
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	461a      	mov	r2, r3
 8002336:	2301      	movs	r3, #1
 8002338:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7fe ffb7 	bl	80012ac <HAL_GetTick>
 800233e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	e00a      	b.n	800235a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002344:	f7fe ffb2 	bl	80012ac <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d902      	bls.n	800235a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	f000 bcdb 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
 800235a:	2302      	movs	r3, #2
 800235c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800236c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002370:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002374:	2202      	movs	r2, #2
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	fa93 f2a3 	rbit	r2, r3
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002398:	2202      	movs	r2, #2
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	fa93 f2a3 	rbit	r2, r3
 80023aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b4:	4b88      	ldr	r3, [pc, #544]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 80023b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023c0:	2102      	movs	r1, #2
 80023c2:	6019      	str	r1, [r3, #0]
 80023c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fa93 f1a3 	rbit	r1, r3
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023da:	6019      	str	r1, [r3, #0]
  return result;
 80023dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	2101      	movs	r1, #1
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0a0      	beq.n	8002344 <HAL_RCC_OscConfig+0x6a0>
 8002402:	e08d      	b.n	8002520 <HAL_RCC_OscConfig+0x87c>
 8002404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002408:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002414:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	fa93 f2a3 	rbit	r2, r3
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002426:	601a      	str	r2, [r3, #0]
  return result;
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002430:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	4b68      	ldr	r3, [pc, #416]	; (80025dc <HAL_RCC_OscConfig+0x938>)
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	461a      	mov	r2, r3
 8002442:	2300      	movs	r3, #0
 8002444:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7fe ff31 	bl	80012ac <HAL_GetTick>
 800244a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244e:	e00a      	b.n	8002466 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002450:	f7fe ff2c 	bl	80012ac <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d902      	bls.n	8002466 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	f000 bc55 	b.w	8002d10 <HAL_RCC_OscConfig+0x106c>
 8002466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800246e:	2202      	movs	r2, #2
 8002470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002476:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	fa93 f2a3 	rbit	r2, r3
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002492:	2202      	movs	r2, #2
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fa93 f2a3 	rbit	r2, r3
 80024a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024b6:	2202      	movs	r2, #2
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	fa93 f2a3 	rbit	r2, r3
 80024c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80024d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d2:	4b41      	ldr	r3, [pc, #260]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 80024d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80024de:	2102      	movs	r1, #2
 80024e0:	6019      	str	r1, [r3, #0]
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	fa93 f1a3 	rbit	r1, r3
 80024f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80024f8:	6019      	str	r1, [r3, #0]
  return result;
 80024fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d197      	bne.n	8002450 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 81a1 	beq.w	8002878 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253c:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d116      	bne.n	8002576 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002548:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	4a22      	ldr	r2, [pc, #136]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 800254e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002552:	61d3      	str	r3, [r2, #28]
 8002554:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800255c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002560:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800256e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002570:	2301      	movs	r3, #1
 8002572:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002576:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <HAL_RCC_OscConfig+0x93c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d11a      	bne.n	80025b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002582:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <HAL_RCC_OscConfig+0x93c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a16      	ldr	r2, [pc, #88]	; (80025e0 <HAL_RCC_OscConfig+0x93c>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258e:	f7fe fe8d 	bl	80012ac <HAL_GetTick>
 8002592:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	e009      	b.n	80025ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002598:	f7fe fe88 	bl	80012ac <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b64      	cmp	r3, #100	; 0x64
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e3b1      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_RCC_OscConfig+0x93c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0ef      	beq.n	8002598 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d10d      	bne.n	80025e4 <HAL_RCC_OscConfig+0x940>
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4a02      	ldr	r2, [pc, #8]	; (80025d8 <HAL_RCC_OscConfig+0x934>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6213      	str	r3, [r2, #32]
 80025d4:	e03c      	b.n	8002650 <HAL_RCC_OscConfig+0x9ac>
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	10908120 	.word	0x10908120
 80025e0:	40007000 	.word	0x40007000
 80025e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10c      	bne.n	800260e <HAL_RCC_OscConfig+0x96a>
 80025f4:	4bc1      	ldr	r3, [pc, #772]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4ac0      	ldr	r2, [pc, #768]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	6213      	str	r3, [r2, #32]
 8002600:	4bbe      	ldr	r3, [pc, #760]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4abd      	ldr	r2, [pc, #756]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002606:	f023 0304 	bic.w	r3, r3, #4
 800260a:	6213      	str	r3, [r2, #32]
 800260c:	e020      	b.n	8002650 <HAL_RCC_OscConfig+0x9ac>
 800260e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002612:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b05      	cmp	r3, #5
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x994>
 800261e:	4bb7      	ldr	r3, [pc, #732]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4ab6      	ldr	r2, [pc, #728]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002624:	f043 0304 	orr.w	r3, r3, #4
 8002628:	6213      	str	r3, [r2, #32]
 800262a:	4bb4      	ldr	r3, [pc, #720]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4ab3      	ldr	r2, [pc, #716]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	e00b      	b.n	8002650 <HAL_RCC_OscConfig+0x9ac>
 8002638:	4bb0      	ldr	r3, [pc, #704]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4aaf      	ldr	r2, [pc, #700]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	6213      	str	r3, [r2, #32]
 8002644:	4bad      	ldr	r3, [pc, #692]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4aac      	ldr	r2, [pc, #688]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 800264a:	f023 0304 	bic.w	r3, r3, #4
 800264e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002654:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8081 	beq.w	8002764 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002662:	f7fe fe23 	bl	80012ac <HAL_GetTick>
 8002666:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266a:	e00b      	b.n	8002684 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266c:	f7fe fe1e 	bl	80012ac <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	f241 3288 	movw	r2, #5000	; 0x1388
 800267c:	4293      	cmp	r3, r2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e345      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800268c:	2202      	movs	r2, #2
 800268e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002694:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	fa93 f2a3 	rbit	r2, r3
 800269e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026b0:	2202      	movs	r2, #2
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fa93 f2a3 	rbit	r2, r3
 80026c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026ca:	601a      	str	r2, [r3, #0]
  return result;
 80026cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_OscConfig+0xa4c>
 80026ea:	4b84      	ldr	r3, [pc, #528]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	e013      	b.n	8002718 <HAL_RCC_OscConfig+0xa74>
 80026f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80026f8:	2202      	movs	r2, #2
 80026fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002700:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fa93 f2a3 	rbit	r2, r3
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	4b79      	ldr	r3, [pc, #484]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800271c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002720:	2102      	movs	r1, #2
 8002722:	6011      	str	r1, [r2, #0]
 8002724:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002728:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	fa92 f1a2 	rbit	r1, r2
 8002732:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002736:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800273a:	6011      	str	r1, [r2, #0]
  return result;
 800273c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002740:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	fab2 f282 	clz	r2, r2
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	f002 021f 	and.w	r2, r2, #31
 8002756:	2101      	movs	r1, #1
 8002758:	fa01 f202 	lsl.w	r2, r1, r2
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d084      	beq.n	800266c <HAL_RCC_OscConfig+0x9c8>
 8002762:	e07f      	b.n	8002864 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7fe fda2 	bl	80012ac <HAL_GetTick>
 8002768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276c:	e00b      	b.n	8002786 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe fd9d 	bl	80012ac <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e2c4      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800278e:	2202      	movs	r2, #2
 8002790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002796:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	fa93 f2a3 	rbit	r2, r3
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027b2:	2202      	movs	r2, #2
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fa93 f2a3 	rbit	r2, r3
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80027cc:	601a      	str	r2, [r3, #0]
  return result;
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80027d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f043 0302 	orr.w	r3, r3, #2
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_OscConfig+0xb4e>
 80027ec:	4b43      	ldr	r3, [pc, #268]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	e013      	b.n	800281a <HAL_RCC_OscConfig+0xb76>
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80027fa:	2202      	movs	r2, #2
 80027fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002802:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	fa93 f2a3 	rbit	r2, r3
 800280c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002810:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800281e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002822:	2102      	movs	r1, #2
 8002824:	6011      	str	r1, [r2, #0]
 8002826:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800282a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	fa92 f1a2 	rbit	r1, r2
 8002834:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002838:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800283c:	6011      	str	r1, [r2, #0]
  return result;
 800283e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002842:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	fab2 f282 	clz	r2, r2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f002 021f 	and.w	r2, r2, #31
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f202 	lsl.w	r2, r1, r2
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d184      	bne.n	800276e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002864:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002868:	2b01      	cmp	r3, #1
 800286a:	d105      	bne.n	8002878 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286c:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	4a22      	ldr	r2, [pc, #136]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 8002872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002876:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8242 	beq.w	8002d0e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800288a:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <HAL_RCC_OscConfig+0xc58>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b08      	cmp	r3, #8
 8002894:	f000 8213 	beq.w	8002cbe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	f040 8162 	bne.w	8002b6e <HAL_RCC_OscConfig+0xeca>
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80028b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028bc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	fa93 f2a3 	rbit	r2, r3
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028ce:	601a      	str	r2, [r3, #0]
  return result;
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	461a      	mov	r2, r3
 80028ec:	2300      	movs	r3, #0
 80028ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe fcdc 	bl	80012ac <HAL_GetTick>
 80028f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f8:	e00c      	b.n	8002914 <HAL_RCC_OscConfig+0xc70>
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fcd4 	bl	80012ac <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e1fd      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800291c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	fa93 f2a3 	rbit	r2, r3
 8002930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002934:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002938:	601a      	str	r2, [r3, #0]
  return result;
 800293a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002942:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d102      	bne.n	800295e <HAL_RCC_OscConfig+0xcba>
 8002958:	4bb0      	ldr	r3, [pc, #704]	; (8002c1c <HAL_RCC_OscConfig+0xf78>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	e027      	b.n	80029ae <HAL_RCC_OscConfig+0xd0a>
 800295e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002962:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002966:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800296a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002970:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fa93 f2a3 	rbit	r2, r3
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800298c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	fa93 f2a3 	rbit	r2, r3
 80029a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	4b9c      	ldr	r3, [pc, #624]	; (8002c1c <HAL_RCC_OscConfig+0xf78>)
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029b2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80029b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029ba:	6011      	str	r1, [r2, #0]
 80029bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029c0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	fa92 f1a2 	rbit	r1, r2
 80029ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80029d2:	6011      	str	r1, [r2, #0]
  return result;
 80029d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029d8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	fab2 f282 	clz	r2, r2
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	f042 0220 	orr.w	r2, r2, #32
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	f002 021f 	and.w	r2, r2, #31
 80029ee:	2101      	movs	r1, #1
 80029f0:	fa01 f202 	lsl.w	r2, r1, r2
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d182      	bne.n	8002900 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fa:	4b88      	ldr	r3, [pc, #544]	; (8002c1c <HAL_RCC_OscConfig+0xf78>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	497f      	ldr	r1, [pc, #508]	; (8002c1c <HAL_RCC_OscConfig+0xf78>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]
 8002a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a26:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a34:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	fa93 f2a3 	rbit	r2, r3
 8002a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a42:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a46:	601a      	str	r2, [r3, #0]
  return result;
 8002a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a50:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	461a      	mov	r2, r3
 8002a64:	2301      	movs	r3, #1
 8002a66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fe fc20 	bl	80012ac <HAL_GetTick>
 8002a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a70:	e009      	b.n	8002a86 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a72:	f7fe fc1b 	bl	80012ac <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e144      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
 8002a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	fa93 f2a3 	rbit	r2, r3
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002aaa:	601a      	str	r2, [r3, #0]
  return result;
 8002aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ab4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d102      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xe2c>
 8002aca:	4b54      	ldr	r3, [pc, #336]	; (8002c1c <HAL_RCC_OscConfig+0xf78>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	e027      	b.n	8002b20 <HAL_RCC_OscConfig+0xe7c>
 8002ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	fa93 f2a3 	rbit	r2, r3
 8002aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002afe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b08:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	fa93 f2a3 	rbit	r2, r3
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	4b3f      	ldr	r3, [pc, #252]	; (8002c1c <HAL_RCC_OscConfig+0xf78>)
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b24:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b2c:	6011      	str	r1, [r2, #0]
 8002b2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b32:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	fa92 f1a2 	rbit	r1, r2
 8002b3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b40:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b44:	6011      	str	r1, [r2, #0]
  return result;
 8002b46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b4a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	fab2 f282 	clz	r2, r2
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	f042 0220 	orr.w	r2, r2, #32
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	f002 021f 	and.w	r2, r2, #31
 8002b60:	2101      	movs	r1, #1
 8002b62:	fa01 f202 	lsl.w	r2, r1, r2
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d082      	beq.n	8002a72 <HAL_RCC_OscConfig+0xdce>
 8002b6c:	e0cf      	b.n	8002d0e <HAL_RCC_OscConfig+0x106a>
 8002b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b72:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002b76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b80:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	fa93 f2a3 	rbit	r2, r3
 8002b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b92:	601a      	str	r2, [r3, #0]
  return result;
 8002b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b98:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b9c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ba8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fb7a 	bl	80012ac <HAL_GetTick>
 8002bb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bbc:	e009      	b.n	8002bd2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7fe fb75 	bl	80012ac <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e09e      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
 8002bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002bda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	fa93 f2a3 	rbit	r2, r3
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002bf6:	601a      	str	r2, [r3, #0]
  return result;
 8002bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d104      	bne.n	8002c20 <HAL_RCC_OscConfig+0xf7c>
 8002c16:	4b01      	ldr	r3, [pc, #4]	; (8002c1c <HAL_RCC_OscConfig+0xf78>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	e029      	b.n	8002c70 <HAL_RCC_OscConfig+0xfcc>
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c24:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	fa93 f2a3 	rbit	r2, r3
 8002c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c40:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c58:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fa93 f2a3 	rbit	r2, r3
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCC_OscConfig+0x1078>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c74:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002c78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c7c:	6011      	str	r1, [r2, #0]
 8002c7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c82:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	fa92 f1a2 	rbit	r1, r2
 8002c8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c90:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c94:	6011      	str	r1, [r2, #0]
  return result;
 8002c96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c9a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	fab2 f282 	clz	r2, r2
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	f042 0220 	orr.w	r2, r2, #32
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	f002 021f 	and.w	r2, r2, #31
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d180      	bne.n	8002bbe <HAL_RCC_OscConfig+0xf1a>
 8002cbc:	e027      	b.n	8002d0e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e01e      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_RCC_OscConfig+0x1078>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002cde:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d10b      	bne.n	8002d0a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002cf2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002cf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000

08002d20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b09e      	sub	sp, #120	; 0x78
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e162      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d38:	4b90      	ldr	r3, [pc, #576]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d910      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b8d      	ldr	r3, [pc, #564]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 0207 	bic.w	r2, r3, #7
 8002d4e:	498b      	ldr	r1, [pc, #556]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b89      	ldr	r3, [pc, #548]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e14a      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b82      	ldr	r3, [pc, #520]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	497f      	ldr	r1, [pc, #508]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80dc 	beq.w	8002f4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d13c      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xf6>
 8002d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dac:	fab3 f383 	clz	r3, r3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d102      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xa6>
 8002dc0:	4b6f      	ldr	r3, [pc, #444]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	e00f      	b.n	8002de6 <HAL_RCC_ClockConfig+0xc6>
 8002dc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	667b      	str	r3, [r7, #100]	; 0x64
 8002dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd8:	663b      	str	r3, [r7, #96]	; 0x60
 8002dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002de2:	4b67      	ldr	r3, [pc, #412]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dea:	65ba      	str	r2, [r7, #88]	; 0x58
 8002dec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dee:	fa92 f2a2 	rbit	r2, r2
 8002df2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002df4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002df6:	fab2 f282 	clz	r2, r2
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	f042 0220 	orr.w	r2, r2, #32
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	f002 021f 	and.w	r2, r2, #31
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d17b      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e0f3      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d13c      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x178>
 8002e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d102      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x128>
 8002e42:	4b4f      	ldr	r3, [pc, #316]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	e00f      	b.n	8002e68 <HAL_RCC_ClockConfig+0x148>
 8002e48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	647b      	str	r3, [r7, #68]	; 0x44
 8002e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e64:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e70:	fa92 f2a2 	rbit	r2, r2
 8002e74:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e78:	fab2 f282 	clz	r2, r2
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f042 0220 	orr.w	r2, r2, #32
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	f002 021f 	and.w	r2, r2, #31
 8002e88:	2101      	movs	r1, #1
 8002e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d13a      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0b2      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d102      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x1a0>
 8002eba:	4b31      	ldr	r3, [pc, #196]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	e00d      	b.n	8002edc <HAL_RCC_ClockConfig+0x1bc>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ecc:	2302      	movs	r3, #2
 8002ece:	623b      	str	r3, [r7, #32]
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	2202      	movs	r2, #2
 8002ede:	61ba      	str	r2, [r7, #24]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	fa92 f2a2 	rbit	r2, r2
 8002ee6:	617a      	str	r2, [r7, #20]
  return result;
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	fab2 f282 	clz	r2, r2
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	f042 0220 	orr.w	r2, r2, #32
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	f002 021f 	and.w	r2, r2, #31
 8002efa:	2101      	movs	r1, #1
 8002efc:	fa01 f202 	lsl.w	r2, r1, r2
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e079      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f023 0203 	bic.w	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	491a      	ldr	r1, [pc, #104]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f1c:	f7fe f9c6 	bl	80012ac <HAL_GetTick>
 8002f20:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f24:	f7fe f9c2 	bl	80012ac <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e061      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 020c 	and.w	r2, r3, #12
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d1eb      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d214      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 0207 	bic.w	r2, r3, #7
 8002f62:	4906      	ldr	r1, [pc, #24]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e040      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
 8002f7c:	40022000 	.word	0x40022000
 8002f80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f90:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_RCC_ClockConfig+0x2e8>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	491a      	ldr	r1, [pc, #104]	; (8003008 <HAL_RCC_ClockConfig+0x2e8>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_RCC_ClockConfig+0x2e8>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4912      	ldr	r1, [pc, #72]	; (8003008 <HAL_RCC_ClockConfig+0x2e8>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002fc2:	f000 f829 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8002fc6:	4601      	mov	r1, r0
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <HAL_RCC_ClockConfig+0x2e8>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd0:	22f0      	movs	r2, #240	; 0xf0
 8002fd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	fa92 f2a2 	rbit	r2, r2
 8002fda:	60fa      	str	r2, [r7, #12]
  return result;
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	fab2 f282 	clz	r2, r2
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	40d3      	lsrs	r3, r2
 8002fe6:	4a09      	ldr	r2, [pc, #36]	; (800300c <HAL_RCC_ClockConfig+0x2ec>)
 8002fe8:	5cd3      	ldrb	r3, [r2, r3]
 8002fea:	fa21 f303 	lsr.w	r3, r1, r3
 8002fee:	4a08      	ldr	r2, [pc, #32]	; (8003010 <HAL_RCC_ClockConfig+0x2f0>)
 8002ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <HAL_RCC_ClockConfig+0x2f4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd fdd0 	bl	8000b9c <HAL_InitTick>
  
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3778      	adds	r7, #120	; 0x78
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	08008504 	.word	0x08008504
 8003010:	20000008 	.word	0x20000008
 8003014:	20000010 	.word	0x20000010

08003018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	b08b      	sub	sp, #44	; 0x2c
 800301c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003032:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d002      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x30>
 8003042:	2b08      	cmp	r3, #8
 8003044:	d003      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x36>
 8003046:	e03c      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003048:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_RCC_GetSysClockFreq+0xc4>)
 800304a:	623b      	str	r3, [r7, #32]
      break;
 800304c:	e03c      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003054:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003058:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	fa92 f2a2 	rbit	r2, r2
 8003060:	607a      	str	r2, [r7, #4]
  return result;
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	fab2 f282 	clz	r2, r2
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	40d3      	lsrs	r3, r2
 800306c:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800306e:	5cd3      	ldrb	r3, [r2, r3]
 8003070:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003072:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	220f      	movs	r2, #15
 800307c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	fa92 f2a2 	rbit	r2, r2
 8003084:	60fa      	str	r2, [r7, #12]
  return result;
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	fab2 f282 	clz	r2, r2
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	40d3      	lsrs	r3, r2
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003092:	5cd3      	ldrb	r3, [r2, r3]
 8003094:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030a0:	4a0e      	ldr	r2, [pc, #56]	; (80030dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
 80030b0:	e004      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	4a0c      	ldr	r2, [pc, #48]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030b6:	fb02 f303 	mul.w	r3, r2, r3
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	623b      	str	r3, [r7, #32]
      break;
 80030c0:	e002      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80030c4:	623b      	str	r3, [r7, #32]
      break;
 80030c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c8:	6a3b      	ldr	r3, [r7, #32]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	372c      	adds	r7, #44	; 0x2c
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000
 80030dc:	007a1200 	.word	0x007a1200
 80030e0:	0800851c 	.word	0x0800851c
 80030e4:	0800852c 	.word	0x0800852c
 80030e8:	003d0900 	.word	0x003d0900

080030ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f2:	681b      	ldr	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000008 	.word	0x20000008

08003104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800310a:	f7ff ffef 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 800310e:	4601      	mov	r1, r0
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003118:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800311c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	fa92 f2a2 	rbit	r2, r2
 8003124:	603a      	str	r2, [r7, #0]
  return result;
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	fab2 f282 	clz	r2, r2
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	40d3      	lsrs	r3, r2
 8003130:	4a04      	ldr	r2, [pc, #16]	; (8003144 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021000 	.word	0x40021000
 8003144:	08008514 	.word	0x08008514

08003148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800314e:	f7ff ffcd 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8003152:	4601      	mov	r1, r0
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800315c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003160:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	fa92 f2a2 	rbit	r2, r2
 8003168:	603a      	str	r2, [r7, #0]
  return result;
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	fab2 f282 	clz	r2, r2
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	40d3      	lsrs	r3, r2
 8003174:	4a04      	ldr	r2, [pc, #16]	; (8003188 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003176:	5cd3      	ldrb	r3, [r2, r3]
 8003178:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40021000 	.word	0x40021000
 8003188:	08008514 	.word	0x08008514

0800318c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	220f      	movs	r2, #15
 800319a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800319c:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_GetClockConfig+0x5c>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0203 	and.w	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <HAL_RCC_GetClockConfig+0x5c>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <HAL_RCC_GetClockConfig+0x5c>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCC_GetClockConfig+0x5c>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	08db      	lsrs	r3, r3, #3
 80031c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <HAL_RCC_GetClockConfig+0x60>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0207 	and.w	r2, r3, #7
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	601a      	str	r2, [r3, #0]
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40022000 	.word	0x40022000

080031f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b092      	sub	sp, #72	; 0x48
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003200:	2300      	movs	r3, #0
 8003202:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 80d4 	beq.w	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003214:	4b4e      	ldr	r3, [pc, #312]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10e      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003220:	4b4b      	ldr	r3, [pc, #300]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	4a4a      	ldr	r2, [pc, #296]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322a:	61d3      	str	r3, [r2, #28]
 800322c:	4b48      	ldr	r3, [pc, #288]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003238:	2301      	movs	r3, #1
 800323a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323e:	4b45      	ldr	r3, [pc, #276]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d118      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324a:	4b42      	ldr	r3, [pc, #264]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a41      	ldr	r2, [pc, #260]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003254:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003256:	f7fe f829 	bl	80012ac <HAL_GetTick>
 800325a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325c:	e008      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325e:	f7fe f825 	bl	80012ac <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b64      	cmp	r3, #100	; 0x64
 800326a:	d901      	bls.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e169      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003270:	4b38      	ldr	r3, [pc, #224]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800327c:	4b34      	ldr	r3, [pc, #208]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003284:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8084 	beq.w	8003396 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003296:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003298:	429a      	cmp	r2, r3
 800329a:	d07c      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800329c:	4b2c      	ldr	r3, [pc, #176]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	4b26      	ldr	r3, [pc, #152]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	461a      	mov	r2, r3
 80032c6:	2301      	movs	r3, #1
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	461a      	mov	r2, r3
 80032ea:	2300      	movs	r3, #0
 80032ec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ee:	4a18      	ldr	r2, [pc, #96]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d04b      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fd ffd5 	bl	80012ac <HAL_GetTick>
 8003302:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003304:	e00a      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f7fd ffd1 	bl	80012ac <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f241 3288 	movw	r2, #5000	; 0x1388
 8003314:	4293      	cmp	r3, r2
 8003316:	d901      	bls.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e113      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800331c:	2302      	movs	r3, #2
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
 8003328:	2302      	movs	r3, #2
 800332a:	623b      	str	r3, [r7, #32]
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	fa93 f3a3 	rbit	r3, r3
 8003332:	61fb      	str	r3, [r7, #28]
  return result;
 8003334:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f043 0302 	orr.w	r3, r3, #2
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d108      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800334a:	4b01      	ldr	r3, [pc, #4]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	e00d      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003350:	40021000 	.word	0x40021000
 8003354:	40007000 	.word	0x40007000
 8003358:	10908100 	.word	0x10908100
 800335c:	2302      	movs	r3, #2
 800335e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	4b78      	ldr	r3, [pc, #480]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	2202      	movs	r2, #2
 800336e:	613a      	str	r2, [r7, #16]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	fa92 f2a2 	rbit	r2, r2
 8003376:	60fa      	str	r2, [r7, #12]
  return result;
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	fab2 f282 	clz	r2, r2
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	f002 021f 	and.w	r2, r2, #31
 800338a:	2101      	movs	r1, #1
 800338c:	fa01 f202 	lsl.w	r2, r1, r2
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0b7      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003396:	4b6d      	ldr	r3, [pc, #436]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	496a      	ldr	r1, [pc, #424]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d105      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b0:	4b66      	ldr	r3, [pc, #408]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	4a65      	ldr	r2, [pc, #404]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033c8:	4b60      	ldr	r3, [pc, #384]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	f023 0203 	bic.w	r2, r3, #3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	495d      	ldr	r1, [pc, #372]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033e6:	4b59      	ldr	r3, [pc, #356]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	4956      	ldr	r1, [pc, #344]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003404:	4b51      	ldr	r3, [pc, #324]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	494e      	ldr	r1, [pc, #312]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003412:	4313      	orrs	r3, r2
 8003414:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003422:	4b4a      	ldr	r3, [pc, #296]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f023 0210 	bic.w	r2, r3, #16
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	4947      	ldr	r1, [pc, #284]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003440:	4b42      	ldr	r3, [pc, #264]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	493f      	ldr	r1, [pc, #252]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800344e:	4313      	orrs	r3, r2
 8003450:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800345e:	4b3b      	ldr	r3, [pc, #236]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f023 0220 	bic.w	r2, r3, #32
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4938      	ldr	r1, [pc, #224]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800346c:	4313      	orrs	r3, r2
 800346e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800347c:	4b33      	ldr	r3, [pc, #204]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	4930      	ldr	r1, [pc, #192]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800348a:	4313      	orrs	r3, r2
 800348c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d008      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800349a:	4b2c      	ldr	r3, [pc, #176]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	4929      	ldr	r1, [pc, #164]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034b8:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	4921      	ldr	r1, [pc, #132]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034d6:	4b1d      	ldr	r3, [pc, #116]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	491a      	ldr	r1, [pc, #104]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80034f4:	4b15      	ldr	r3, [pc, #84]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	4912      	ldr	r1, [pc, #72]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003502:	4313      	orrs	r3, r2
 8003504:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003512:	4b0e      	ldr	r3, [pc, #56]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	490b      	ldr	r1, [pc, #44]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003520:	4313      	orrs	r3, r2
 8003522:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353c:	4903      	ldr	r1, [pc, #12]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800353e:	4313      	orrs	r3, r2
 8003540:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3748      	adds	r7, #72	; 0x48
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000

08003550 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e083      	b.n	800366a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	7f5b      	ldrb	r3, [r3, #29]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d105      	bne.n	8003578 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd fa44 	bl	8000a00 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	22ca      	movs	r2, #202	; 0xca
 8003584:	625a      	str	r2, [r3, #36]	; 0x24
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2253      	movs	r2, #83	; 0x53
 800358c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f897 	bl	80036c2 <RTC_EnterInitMode>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	22ff      	movs	r2, #255	; 0xff
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2204      	movs	r2, #4
 80035a6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e05e      	b.n	800366a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80035ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035be:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6899      	ldr	r1, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68d2      	ldr	r2, [r2, #12]
 80035e6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6919      	ldr	r1, [r3, #16]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	041a      	lsls	r2, r3, #16
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800360a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10e      	bne.n	8003638 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f829 	bl	8003672 <HAL_RTC_WaitForSynchro>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	22ff      	movs	r2, #255	; 0xff
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2204      	movs	r2, #4
 8003632:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e018      	b.n	800366a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003646:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	22ff      	movs	r2, #255	; 0xff
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003668:	2300      	movs	r3, #0
  }
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800368c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800368e:	f7fd fe0d 	bl	80012ac <HAL_GetTick>
 8003692:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003694:	e009      	b.n	80036aa <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003696:	f7fd fe09 	bl	80012ac <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036a4:	d901      	bls.n	80036aa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e007      	b.n	80036ba <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ee      	beq.n	8003696 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d119      	bne.n	8003710 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f04f 32ff 	mov.w	r2, #4294967295
 80036e4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80036e6:	f7fd fde1 	bl	80012ac <HAL_GetTick>
 80036ea:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036ec:	e009      	b.n	8003702 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036ee:	f7fd fddd 	bl	80012ac <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036fc:	d901      	bls.n	8003702 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e007      	b.n	8003712 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0ee      	beq.n	80036ee <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e09d      	b.n	8003868 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	2b00      	cmp	r3, #0
 8003732:	d108      	bne.n	8003746 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800373c:	d009      	beq.n	8003752 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	61da      	str	r2, [r3, #28]
 8003744:	e005      	b.n	8003752 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d106      	bne.n	8003772 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7fd f9ab 	bl	8000ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003788:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003792:	d902      	bls.n	800379a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	e002      	b.n	80037a0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800379a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800379e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037a8:	d007      	beq.n	80037ba <HAL_SPI_Init+0xa0>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037b2:	d002      	beq.n	80037ba <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fc:	ea42 0103 	orr.w	r1, r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	f003 0204 	and.w	r2, r3, #4
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003836:	ea42 0103 	orr.w	r1, r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69da      	ldr	r2, [r3, #28]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003856:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e049      	b.n	8003916 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f841 	bl	800391e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3304      	adds	r3, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f000 f9f2 	bl	8003c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d001      	beq.n	800394c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e04a      	b.n	80039e2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a21      	ldr	r2, [pc, #132]	; (80039f0 <HAL_TIM_Base_Start_IT+0xbc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d018      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x6c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003976:	d013      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00e      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1c      	ldr	r2, [pc, #112]	; (80039f8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d009      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x6c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a1a      	ldr	r2, [pc, #104]	; (80039fc <HAL_TIM_Base_Start_IT+0xc8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d004      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a19      	ldr	r2, [pc, #100]	; (8003a00 <HAL_TIM_Base_Start_IT+0xcc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d115      	bne.n	80039cc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <HAL_TIM_Base_Start_IT+0xd0>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b06      	cmp	r3, #6
 80039b0:	d015      	beq.n	80039de <HAL_TIM_Base_Start_IT+0xaa>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d011      	beq.n	80039de <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0201 	orr.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ca:	e008      	b.n	80039de <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e000      	b.n	80039e0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40012c00 	.word	0x40012c00
 80039f4:	40000400 	.word	0x40000400
 80039f8:	40000800 	.word	0x40000800
 80039fc:	40013400 	.word	0x40013400
 8003a00:	40014000 	.word	0x40014000
 8003a04:	00010007 	.word	0x00010007

08003a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d122      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d11b      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0202 	mvn.w	r2, #2
 8003a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f905 	bl	8003c5a <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f8f7 	bl	8003c46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f908 	bl	8003c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d122      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0204 	mvn.w	r2, #4
 8003a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f8db 	bl	8003c5a <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f8cd 	bl	8003c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f8de 	bl	8003c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d122      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d11b      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0208 	mvn.w	r2, #8
 8003adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8b1 	bl	8003c5a <HAL_TIM_IC_CaptureCallback>
 8003af8:	e005      	b.n	8003b06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f8a3 	bl	8003c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f8b4 	bl	8003c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d122      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d11b      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0210 	mvn.w	r2, #16
 8003b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2208      	movs	r2, #8
 8003b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f887 	bl	8003c5a <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f879 	bl	8003c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f88a 	bl	8003c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d10e      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d107      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0201 	mvn.w	r2, #1
 8003b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fc fefc 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b96:	2b80      	cmp	r3, #128	; 0x80
 8003b98:	d10e      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	2b80      	cmp	r3, #128	; 0x80
 8003ba6:	d107      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f90a 	bl	8003dcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc6:	d10e      	bne.n	8003be6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b80      	cmp	r3, #128	; 0x80
 8003bd4:	d107      	bne.n	8003be6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f8fd 	bl	8003de0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	d10e      	bne.n	8003c12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d107      	bne.n	8003c12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f838 	bl	8003c82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	d10e      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d107      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f06f 0220 	mvn.w	r2, #32
 8003c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f8bd 	bl	8003db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a3c      	ldr	r2, [pc, #240]	; (8003d9c <TIM_Base_SetConfig+0x104>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00f      	beq.n	8003cd0 <TIM_Base_SetConfig+0x38>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb6:	d00b      	beq.n	8003cd0 <TIM_Base_SetConfig+0x38>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a39      	ldr	r2, [pc, #228]	; (8003da0 <TIM_Base_SetConfig+0x108>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d007      	beq.n	8003cd0 <TIM_Base_SetConfig+0x38>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a38      	ldr	r2, [pc, #224]	; (8003da4 <TIM_Base_SetConfig+0x10c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_Base_SetConfig+0x38>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a37      	ldr	r2, [pc, #220]	; (8003da8 <TIM_Base_SetConfig+0x110>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d108      	bne.n	8003ce2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a2d      	ldr	r2, [pc, #180]	; (8003d9c <TIM_Base_SetConfig+0x104>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01b      	beq.n	8003d22 <TIM_Base_SetConfig+0x8a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf0:	d017      	beq.n	8003d22 <TIM_Base_SetConfig+0x8a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a2a      	ldr	r2, [pc, #168]	; (8003da0 <TIM_Base_SetConfig+0x108>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d013      	beq.n	8003d22 <TIM_Base_SetConfig+0x8a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a29      	ldr	r2, [pc, #164]	; (8003da4 <TIM_Base_SetConfig+0x10c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00f      	beq.n	8003d22 <TIM_Base_SetConfig+0x8a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a28      	ldr	r2, [pc, #160]	; (8003da8 <TIM_Base_SetConfig+0x110>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00b      	beq.n	8003d22 <TIM_Base_SetConfig+0x8a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a27      	ldr	r2, [pc, #156]	; (8003dac <TIM_Base_SetConfig+0x114>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d007      	beq.n	8003d22 <TIM_Base_SetConfig+0x8a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <TIM_Base_SetConfig+0x118>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d003      	beq.n	8003d22 <TIM_Base_SetConfig+0x8a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a25      	ldr	r2, [pc, #148]	; (8003db4 <TIM_Base_SetConfig+0x11c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d108      	bne.n	8003d34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a10      	ldr	r2, [pc, #64]	; (8003d9c <TIM_Base_SetConfig+0x104>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00f      	beq.n	8003d80 <TIM_Base_SetConfig+0xe8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a11      	ldr	r2, [pc, #68]	; (8003da8 <TIM_Base_SetConfig+0x110>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00b      	beq.n	8003d80 <TIM_Base_SetConfig+0xe8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a10      	ldr	r2, [pc, #64]	; (8003dac <TIM_Base_SetConfig+0x114>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d007      	beq.n	8003d80 <TIM_Base_SetConfig+0xe8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a0f      	ldr	r2, [pc, #60]	; (8003db0 <TIM_Base_SetConfig+0x118>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_Base_SetConfig+0xe8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a0e      	ldr	r2, [pc, #56]	; (8003db4 <TIM_Base_SetConfig+0x11c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d103      	bne.n	8003d88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	615a      	str	r2, [r3, #20]
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40012c00 	.word	0x40012c00
 8003da0:	40000400 	.word	0x40000400
 8003da4:	40000800 	.word	0x40000800
 8003da8:	40013400 	.word	0x40013400
 8003dac:	40014000 	.word	0x40014000
 8003db0:	40014400 	.word	0x40014400
 8003db4:	40014800 	.word	0x40014800

08003db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e040      	b.n	8003e88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7fd f944 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2224      	movs	r2, #36	; 0x24
 8003e20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fc0c 	bl	8004650 <UART_SetConfig>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e022      	b.n	8003e88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fdd6 	bl	80049fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fe5d 	bl	8004b40 <UART_CheckIdleState>
 8003e86:	4603      	mov	r3, r0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	f040 8082 	bne.w	8003fae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <HAL_UART_Transmit+0x26>
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e07a      	b.n	8003fb0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_UART_Transmit+0x38>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e073      	b.n	8003fb0 <HAL_UART_Transmit+0x120>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2221      	movs	r2, #33	; 0x21
 8003edc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ede:	f7fd f9e5 	bl	80012ac <HAL_GetTick>
 8003ee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	88fa      	ldrh	r2, [r7, #6]
 8003ee8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	88fa      	ldrh	r2, [r7, #6]
 8003ef0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efc:	d108      	bne.n	8003f10 <HAL_UART_Transmit+0x80>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d104      	bne.n	8003f10 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	e003      	b.n	8003f18 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f20:	e02d      	b.n	8003f7e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 fe50 	bl	8004bd2 <UART_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e039      	b.n	8003fb0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10b      	bne.n	8003f5a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	881a      	ldrh	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f4e:	b292      	uxth	r2, r2
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	3302      	adds	r3, #2
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	e008      	b.n	8003f6c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	781a      	ldrb	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	b292      	uxth	r2, r2
 8003f64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1cb      	bne.n	8003f22 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2200      	movs	r2, #0
 8003f92:	2140      	movs	r1, #64	; 0x40
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 fe1c 	bl	8004bd2 <UART_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e005      	b.n	8003fb0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e000      	b.n	8003fb0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003fae:	2302      	movs	r3, #2
  }
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08a      	sub	sp, #40	; 0x28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d13d      	bne.n	800404a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_UART_Receive_IT+0x22>
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e036      	b.n	800404c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_UART_Receive_IT+0x34>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e02f      	b.n	800404c <HAL_UART_Receive_IT+0x94>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d018      	beq.n	800403a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	e853 3f00 	ldrex	r3, [r3]
 8004014:	613b      	str	r3, [r7, #16]
   return(result);
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	623b      	str	r3, [r7, #32]
 8004028:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	69f9      	ldr	r1, [r7, #28]
 800402c:	6a3a      	ldr	r2, [r7, #32]
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	61bb      	str	r3, [r7, #24]
   return(result);
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e6      	bne.n	8004008 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	461a      	mov	r2, r3
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fe8b 	bl	8004d5c <UART_Start_Receive_IT>
 8004046:	4603      	mov	r3, r0
 8004048:	e000      	b.n	800404c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800404a:	2302      	movs	r3, #2
  }
}
 800404c:	4618      	mov	r0, r3
 800404e:	3728      	adds	r7, #40	; 0x28
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b0ba      	sub	sp, #232	; 0xe8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800407a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800407e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004082:	4013      	ands	r3, r2
 8004084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d115      	bne.n	80040bc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00f      	beq.n	80040bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800409c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d009      	beq.n	80040bc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 82a3 	beq.w	80045f8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	4798      	blx	r3
      }
      return;
 80040ba:	e29d      	b.n	80045f8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80040bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8117 	beq.w	80042f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80040d6:	4b85      	ldr	r3, [pc, #532]	; (80042ec <HAL_UART_IRQHandler+0x298>)
 80040d8:	4013      	ands	r3, r2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 810a 	beq.w	80042f4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d011      	beq.n	8004110 <HAL_UART_IRQHandler+0xbc>
 80040ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00b      	beq.n	8004110 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2201      	movs	r2, #1
 80040fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004106:	f043 0201 	orr.w	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d011      	beq.n	8004140 <HAL_UART_IRQHandler+0xec>
 800411c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00b      	beq.n	8004140 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2202      	movs	r2, #2
 800412e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004136:	f043 0204 	orr.w	r2, r3, #4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d011      	beq.n	8004170 <HAL_UART_IRQHandler+0x11c>
 800414c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00b      	beq.n	8004170 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2204      	movs	r2, #4
 800415e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004166:	f043 0202 	orr.w	r2, r3, #2
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d017      	beq.n	80041ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800417c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b00      	cmp	r3, #0
 8004186:	d105      	bne.n	8004194 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800418c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00b      	beq.n	80041ac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2208      	movs	r2, #8
 800419a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a2:	f043 0208 	orr.w	r2, r3, #8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d012      	beq.n	80041de <HAL_UART_IRQHandler+0x18a>
 80041b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00c      	beq.n	80041de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041d4:	f043 0220 	orr.w	r2, r3, #32
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8209 	beq.w	80045fc <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00d      	beq.n	8004212 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004218:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004226:	2b40      	cmp	r3, #64	; 0x40
 8004228:	d005      	beq.n	8004236 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800422a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800422e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004232:	2b00      	cmp	r3, #0
 8004234:	d04f      	beq.n	80042d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fe28 	bl	8004e8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004246:	2b40      	cmp	r3, #64	; 0x40
 8004248:	d141      	bne.n	80042ce <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3308      	adds	r3, #8
 8004250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3308      	adds	r3, #8
 8004272:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004276:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800427a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004282:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800428e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1d9      	bne.n	800424a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	2b00      	cmp	r3, #0
 800429c:	d013      	beq.n	80042c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <HAL_UART_IRQHandler+0x29c>)
 80042a4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fd f925 	bl	80014fa <HAL_DMA_Abort_IT>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d017      	beq.n	80042e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80042c0:	4610      	mov	r0, r2
 80042c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c4:	e00f      	b.n	80042e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f9ac 	bl	8004624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042cc:	e00b      	b.n	80042e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f9a8 	bl	8004624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d4:	e007      	b.n	80042e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f9a4 	bl	8004624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80042e4:	e18a      	b.n	80045fc <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e6:	bf00      	nop
    return;
 80042e8:	e188      	b.n	80045fc <HAL_UART_IRQHandler+0x5a8>
 80042ea:	bf00      	nop
 80042ec:	04000120 	.word	0x04000120
 80042f0:	08004f53 	.word	0x08004f53

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	f040 8143 	bne.w	8004584 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004302:	f003 0310 	and.w	r3, r3, #16
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 813c 	beq.w	8004584 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800430c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8135 	beq.w	8004584 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2210      	movs	r2, #16
 8004320:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	f040 80b1 	bne.w	8004494 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800433e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 815c 	beq.w	8004600 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800434e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004352:	429a      	cmp	r2, r3
 8004354:	f080 8154 	bcs.w	8004600 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800435e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	2b20      	cmp	r3, #32
 800436a:	f000 8085 	beq.w	8004478 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800437a:	e853 3f00 	ldrex	r3, [r3]
 800437e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004382:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800438a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004398:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800439c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1da      	bne.n	800436e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3308      	adds	r3, #8
 80043be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043ca:	f023 0301 	bic.w	r3, r3, #1
 80043ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3308      	adds	r3, #8
 80043d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043dc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043e0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e1      	bne.n	80043b8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3308      	adds	r3, #8
 80043fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3308      	adds	r3, #8
 8004414:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004418:	66fa      	str	r2, [r7, #108]	; 0x6c
 800441a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800441e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004426:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e3      	bne.n	80043f4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004448:	f023 0310 	bic.w	r3, r3, #16
 800444c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800445a:	65bb      	str	r3, [r7, #88]	; 0x58
 800445c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004460:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e4      	bne.n	8004438 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	4618      	mov	r0, r3
 8004474:	f7fd f808 	bl	8001488 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004484:	b29b      	uxth	r3, r3
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	b29b      	uxth	r3, r3
 800448a:	4619      	mov	r1, r3
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f8d3 	bl	8004638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004492:	e0b5      	b.n	8004600 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80a7 	beq.w	8004604 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80044b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 80a2 	beq.w	8004604 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044e2:	647b      	str	r3, [r7, #68]	; 0x44
 80044e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e4      	bne.n	80044c0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3308      	adds	r3, #8
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	623b      	str	r3, [r7, #32]
   return(result);
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3308      	adds	r3, #8
 8004516:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800451a:	633a      	str	r2, [r7, #48]	; 0x30
 800451c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e3      	bne.n	80044f6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	60fb      	str	r3, [r7, #12]
   return(result);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f023 0310 	bic.w	r3, r3, #16
 8004554:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004562:	61fb      	str	r3, [r7, #28]
 8004564:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	69b9      	ldr	r1, [r7, #24]
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	617b      	str	r3, [r7, #20]
   return(result);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e4      	bne.n	8004540 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004576:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f85b 	bl	8004638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004582:	e03f      	b.n	8004604 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00e      	beq.n	80045ae <HAL_UART_IRQHandler+0x55a>
 8004590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fe6f 	bl	800528a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045ac:	e02d      	b.n	800460a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00e      	beq.n	80045d8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d01c      	beq.n	8004608 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	4798      	blx	r3
    }
    return;
 80045d6:	e017      	b.n	8004608 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d012      	beq.n	800460a <HAL_UART_IRQHandler+0x5b6>
 80045e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00c      	beq.n	800460a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fcc4 	bl	8004f7e <UART_EndTransmit_IT>
    return;
 80045f6:	e008      	b.n	800460a <HAL_UART_IRQHandler+0x5b6>
      return;
 80045f8:	bf00      	nop
 80045fa:	e006      	b.n	800460a <HAL_UART_IRQHandler+0x5b6>
    return;
 80045fc:	bf00      	nop
 80045fe:	e004      	b.n	800460a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004600:	bf00      	nop
 8004602:	e002      	b.n	800460a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004604:	bf00      	nop
 8004606:	e000      	b.n	800460a <HAL_UART_IRQHandler+0x5b6>
    return;
 8004608:	bf00      	nop
  }

}
 800460a:	37e8      	adds	r7, #232	; 0xe8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800467e:	f023 030c 	bic.w	r3, r3, #12
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	6979      	ldr	r1, [r7, #20]
 8004688:	430b      	orrs	r3, r1
 800468a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4aa8      	ldr	r2, [pc, #672]	; (800496c <UART_SetConfig+0x31c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d120      	bne.n	8004712 <UART_SetConfig+0xc2>
 80046d0:	4ba7      	ldr	r3, [pc, #668]	; (8004970 <UART_SetConfig+0x320>)
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d817      	bhi.n	800470c <UART_SetConfig+0xbc>
 80046dc:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <UART_SetConfig+0x94>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	08004701 	.word	0x08004701
 80046ec:	08004707 	.word	0x08004707
 80046f0:	080046fb 	.word	0x080046fb
 80046f4:	2301      	movs	r3, #1
 80046f6:	77fb      	strb	r3, [r7, #31]
 80046f8:	e0b5      	b.n	8004866 <UART_SetConfig+0x216>
 80046fa:	2302      	movs	r3, #2
 80046fc:	77fb      	strb	r3, [r7, #31]
 80046fe:	e0b2      	b.n	8004866 <UART_SetConfig+0x216>
 8004700:	2304      	movs	r3, #4
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e0af      	b.n	8004866 <UART_SetConfig+0x216>
 8004706:	2308      	movs	r3, #8
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e0ac      	b.n	8004866 <UART_SetConfig+0x216>
 800470c:	2310      	movs	r3, #16
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e0a9      	b.n	8004866 <UART_SetConfig+0x216>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a97      	ldr	r2, [pc, #604]	; (8004974 <UART_SetConfig+0x324>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d124      	bne.n	8004766 <UART_SetConfig+0x116>
 800471c:	4b94      	ldr	r3, [pc, #592]	; (8004970 <UART_SetConfig+0x320>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004724:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004728:	d011      	beq.n	800474e <UART_SetConfig+0xfe>
 800472a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800472e:	d817      	bhi.n	8004760 <UART_SetConfig+0x110>
 8004730:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004734:	d011      	beq.n	800475a <UART_SetConfig+0x10a>
 8004736:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800473a:	d811      	bhi.n	8004760 <UART_SetConfig+0x110>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <UART_SetConfig+0xf8>
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004744:	d006      	beq.n	8004754 <UART_SetConfig+0x104>
 8004746:	e00b      	b.n	8004760 <UART_SetConfig+0x110>
 8004748:	2300      	movs	r3, #0
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e08b      	b.n	8004866 <UART_SetConfig+0x216>
 800474e:	2302      	movs	r3, #2
 8004750:	77fb      	strb	r3, [r7, #31]
 8004752:	e088      	b.n	8004866 <UART_SetConfig+0x216>
 8004754:	2304      	movs	r3, #4
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e085      	b.n	8004866 <UART_SetConfig+0x216>
 800475a:	2308      	movs	r3, #8
 800475c:	77fb      	strb	r3, [r7, #31]
 800475e:	e082      	b.n	8004866 <UART_SetConfig+0x216>
 8004760:	2310      	movs	r3, #16
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e07f      	b.n	8004866 <UART_SetConfig+0x216>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a83      	ldr	r2, [pc, #524]	; (8004978 <UART_SetConfig+0x328>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d124      	bne.n	80047ba <UART_SetConfig+0x16a>
 8004770:	4b7f      	ldr	r3, [pc, #508]	; (8004970 <UART_SetConfig+0x320>)
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004778:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800477c:	d011      	beq.n	80047a2 <UART_SetConfig+0x152>
 800477e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004782:	d817      	bhi.n	80047b4 <UART_SetConfig+0x164>
 8004784:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004788:	d011      	beq.n	80047ae <UART_SetConfig+0x15e>
 800478a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800478e:	d811      	bhi.n	80047b4 <UART_SetConfig+0x164>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <UART_SetConfig+0x14c>
 8004794:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004798:	d006      	beq.n	80047a8 <UART_SetConfig+0x158>
 800479a:	e00b      	b.n	80047b4 <UART_SetConfig+0x164>
 800479c:	2300      	movs	r3, #0
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e061      	b.n	8004866 <UART_SetConfig+0x216>
 80047a2:	2302      	movs	r3, #2
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	e05e      	b.n	8004866 <UART_SetConfig+0x216>
 80047a8:	2304      	movs	r3, #4
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e05b      	b.n	8004866 <UART_SetConfig+0x216>
 80047ae:	2308      	movs	r3, #8
 80047b0:	77fb      	strb	r3, [r7, #31]
 80047b2:	e058      	b.n	8004866 <UART_SetConfig+0x216>
 80047b4:	2310      	movs	r3, #16
 80047b6:	77fb      	strb	r3, [r7, #31]
 80047b8:	e055      	b.n	8004866 <UART_SetConfig+0x216>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a6f      	ldr	r2, [pc, #444]	; (800497c <UART_SetConfig+0x32c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d124      	bne.n	800480e <UART_SetConfig+0x1be>
 80047c4:	4b6a      	ldr	r3, [pc, #424]	; (8004970 <UART_SetConfig+0x320>)
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80047cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047d0:	d011      	beq.n	80047f6 <UART_SetConfig+0x1a6>
 80047d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047d6:	d817      	bhi.n	8004808 <UART_SetConfig+0x1b8>
 80047d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047dc:	d011      	beq.n	8004802 <UART_SetConfig+0x1b2>
 80047de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047e2:	d811      	bhi.n	8004808 <UART_SetConfig+0x1b8>
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <UART_SetConfig+0x1a0>
 80047e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ec:	d006      	beq.n	80047fc <UART_SetConfig+0x1ac>
 80047ee:	e00b      	b.n	8004808 <UART_SetConfig+0x1b8>
 80047f0:	2300      	movs	r3, #0
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e037      	b.n	8004866 <UART_SetConfig+0x216>
 80047f6:	2302      	movs	r3, #2
 80047f8:	77fb      	strb	r3, [r7, #31]
 80047fa:	e034      	b.n	8004866 <UART_SetConfig+0x216>
 80047fc:	2304      	movs	r3, #4
 80047fe:	77fb      	strb	r3, [r7, #31]
 8004800:	e031      	b.n	8004866 <UART_SetConfig+0x216>
 8004802:	2308      	movs	r3, #8
 8004804:	77fb      	strb	r3, [r7, #31]
 8004806:	e02e      	b.n	8004866 <UART_SetConfig+0x216>
 8004808:	2310      	movs	r3, #16
 800480a:	77fb      	strb	r3, [r7, #31]
 800480c:	e02b      	b.n	8004866 <UART_SetConfig+0x216>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a5b      	ldr	r2, [pc, #364]	; (8004980 <UART_SetConfig+0x330>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d124      	bne.n	8004862 <UART_SetConfig+0x212>
 8004818:	4b55      	ldr	r3, [pc, #340]	; (8004970 <UART_SetConfig+0x320>)
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004820:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004824:	d011      	beq.n	800484a <UART_SetConfig+0x1fa>
 8004826:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800482a:	d817      	bhi.n	800485c <UART_SetConfig+0x20c>
 800482c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004830:	d011      	beq.n	8004856 <UART_SetConfig+0x206>
 8004832:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004836:	d811      	bhi.n	800485c <UART_SetConfig+0x20c>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <UART_SetConfig+0x1f4>
 800483c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004840:	d006      	beq.n	8004850 <UART_SetConfig+0x200>
 8004842:	e00b      	b.n	800485c <UART_SetConfig+0x20c>
 8004844:	2300      	movs	r3, #0
 8004846:	77fb      	strb	r3, [r7, #31]
 8004848:	e00d      	b.n	8004866 <UART_SetConfig+0x216>
 800484a:	2302      	movs	r3, #2
 800484c:	77fb      	strb	r3, [r7, #31]
 800484e:	e00a      	b.n	8004866 <UART_SetConfig+0x216>
 8004850:	2304      	movs	r3, #4
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e007      	b.n	8004866 <UART_SetConfig+0x216>
 8004856:	2308      	movs	r3, #8
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e004      	b.n	8004866 <UART_SetConfig+0x216>
 800485c:	2310      	movs	r3, #16
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e001      	b.n	8004866 <UART_SetConfig+0x216>
 8004862:	2310      	movs	r3, #16
 8004864:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486e:	d15c      	bne.n	800492a <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8004870:	7ffb      	ldrb	r3, [r7, #31]
 8004872:	2b08      	cmp	r3, #8
 8004874:	d827      	bhi.n	80048c6 <UART_SetConfig+0x276>
 8004876:	a201      	add	r2, pc, #4	; (adr r2, 800487c <UART_SetConfig+0x22c>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	080048a1 	.word	0x080048a1
 8004880:	080048a9 	.word	0x080048a9
 8004884:	080048b1 	.word	0x080048b1
 8004888:	080048c7 	.word	0x080048c7
 800488c:	080048b7 	.word	0x080048b7
 8004890:	080048c7 	.word	0x080048c7
 8004894:	080048c7 	.word	0x080048c7
 8004898:	080048c7 	.word	0x080048c7
 800489c:	080048bf 	.word	0x080048bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a0:	f7fe fc30 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 80048a4:	61b8      	str	r0, [r7, #24]
        break;
 80048a6:	e013      	b.n	80048d0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a8:	f7fe fc4e 	bl	8003148 <HAL_RCC_GetPCLK2Freq>
 80048ac:	61b8      	str	r0, [r7, #24]
        break;
 80048ae:	e00f      	b.n	80048d0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b0:	4b34      	ldr	r3, [pc, #208]	; (8004984 <UART_SetConfig+0x334>)
 80048b2:	61bb      	str	r3, [r7, #24]
        break;
 80048b4:	e00c      	b.n	80048d0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b6:	f7fe fbaf 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 80048ba:	61b8      	str	r0, [r7, #24]
        break;
 80048bc:	e008      	b.n	80048d0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c2:	61bb      	str	r3, [r7, #24]
        break;
 80048c4:	e004      	b.n	80048d0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	77bb      	strb	r3, [r7, #30]
        break;
 80048ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8084 	beq.w	80049e0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	005a      	lsls	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	441a      	add	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	2b0f      	cmp	r3, #15
 80048f4:	d916      	bls.n	8004924 <UART_SetConfig+0x2d4>
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fc:	d212      	bcs.n	8004924 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f023 030f 	bic.w	r3, r3, #15
 8004906:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	085b      	lsrs	r3, r3, #1
 800490c:	b29b      	uxth	r3, r3
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	b29a      	uxth	r2, r3
 8004914:	89fb      	ldrh	r3, [r7, #14]
 8004916:	4313      	orrs	r3, r2
 8004918:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	89fa      	ldrh	r2, [r7, #14]
 8004920:	60da      	str	r2, [r3, #12]
 8004922:	e05d      	b.n	80049e0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	77bb      	strb	r3, [r7, #30]
 8004928:	e05a      	b.n	80049e0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800492a:	7ffb      	ldrb	r3, [r7, #31]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d836      	bhi.n	800499e <UART_SetConfig+0x34e>
 8004930:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <UART_SetConfig+0x2e8>)
 8004932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004936:	bf00      	nop
 8004938:	0800495d 	.word	0x0800495d
 800493c:	08004965 	.word	0x08004965
 8004940:	08004989 	.word	0x08004989
 8004944:	0800499f 	.word	0x0800499f
 8004948:	0800498f 	.word	0x0800498f
 800494c:	0800499f 	.word	0x0800499f
 8004950:	0800499f 	.word	0x0800499f
 8004954:	0800499f 	.word	0x0800499f
 8004958:	08004997 	.word	0x08004997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800495c:	f7fe fbd2 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8004960:	61b8      	str	r0, [r7, #24]
        break;
 8004962:	e021      	b.n	80049a8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004964:	f7fe fbf0 	bl	8003148 <HAL_RCC_GetPCLK2Freq>
 8004968:	61b8      	str	r0, [r7, #24]
        break;
 800496a:	e01d      	b.n	80049a8 <UART_SetConfig+0x358>
 800496c:	40013800 	.word	0x40013800
 8004970:	40021000 	.word	0x40021000
 8004974:	40004400 	.word	0x40004400
 8004978:	40004800 	.word	0x40004800
 800497c:	40004c00 	.word	0x40004c00
 8004980:	40005000 	.word	0x40005000
 8004984:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004988:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <UART_SetConfig+0x3a8>)
 800498a:	61bb      	str	r3, [r7, #24]
        break;
 800498c:	e00c      	b.n	80049a8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800498e:	f7fe fb43 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8004992:	61b8      	str	r0, [r7, #24]
        break;
 8004994:	e008      	b.n	80049a8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800499a:	61bb      	str	r3, [r7, #24]
        break;
 800499c:	e004      	b.n	80049a8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	77bb      	strb	r3, [r7, #30]
        break;
 80049a6:	bf00      	nop
    }

    if (pclk != 0U)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d018      	beq.n	80049e0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	085a      	lsrs	r2, r3, #1
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	441a      	add	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b0f      	cmp	r3, #15
 80049c8:	d908      	bls.n	80049dc <UART_SetConfig+0x38c>
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d0:	d204      	bcs.n	80049dc <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	60da      	str	r2, [r3, #12]
 80049da:	e001      	b.n	80049e0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	007a1200 	.word	0x007a1200

080049fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01a      	beq.n	8004b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004afa:	d10a      	bne.n	8004b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
  }
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b50:	f7fc fbac 	bl	80012ac <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d10e      	bne.n	8004b82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f82d 	bl	8004bd2 <UART_WaitOnFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e023      	b.n	8004bca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d10e      	bne.n	8004bae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f817 	bl	8004bd2 <UART_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e00d      	b.n	8004bca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b09c      	sub	sp, #112	; 0x70
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	603b      	str	r3, [r7, #0]
 8004bde:	4613      	mov	r3, r2
 8004be0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be2:	e0a5      	b.n	8004d30 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bea:	f000 80a1 	beq.w	8004d30 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bee:	f7fc fb5d 	bl	80012ac <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d302      	bcc.n	8004c04 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d13e      	bne.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c18:	667b      	str	r3, [r7, #100]	; 0x64
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c24:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e6      	bne.n	8004c04 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	663b      	str	r3, [r7, #96]	; 0x60
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3308      	adds	r3, #8
 8004c54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c56:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e5      	bne.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e067      	b.n	8004d52 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d04f      	beq.n	8004d30 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c9e:	d147      	bne.n	8004d30 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ca8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e6      	bne.n	8004caa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	613b      	str	r3, [r7, #16]
   return(result);
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f023 0301 	bic.w	r3, r3, #1
 8004cf2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cfc:	623a      	str	r2, [r7, #32]
 8004cfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	69f9      	ldr	r1, [r7, #28]
 8004d02:	6a3a      	ldr	r2, [r7, #32]
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e5      	bne.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e010      	b.n	8004d52 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69da      	ldr	r2, [r3, #28]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	bf0c      	ite	eq
 8004d40:	2301      	moveq	r3, #1
 8004d42:	2300      	movne	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	461a      	mov	r2, r3
 8004d48:	79fb      	ldrb	r3, [r7, #7]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	f43f af4a 	beq.w	8004be4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3770      	adds	r7, #112	; 0x70
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b091      	sub	sp, #68	; 0x44
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	88fa      	ldrh	r2, [r7, #6]
 8004d7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8e:	d10e      	bne.n	8004dae <UART_Start_Receive_IT+0x52>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d105      	bne.n	8004da4 <UART_Start_Receive_IT+0x48>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004da2:	e01a      	b.n	8004dda <UART_Start_Receive_IT+0x7e>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	22ff      	movs	r2, #255	; 0xff
 8004da8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dac:	e015      	b.n	8004dda <UART_Start_Receive_IT+0x7e>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10d      	bne.n	8004dd2 <UART_Start_Receive_IT+0x76>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <UART_Start_Receive_IT+0x6c>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	22ff      	movs	r2, #255	; 0xff
 8004dc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dc6:	e008      	b.n	8004dda <UART_Start_Receive_IT+0x7e>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	227f      	movs	r2, #127	; 0x7f
 8004dcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dd0:	e003      	b.n	8004dda <UART_Start_Receive_IT+0x7e>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2222      	movs	r2, #34	; 0x22
 8004de6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3308      	adds	r3, #8
 8004dee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3308      	adds	r3, #8
 8004e06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e08:	637a      	str	r2, [r7, #52]	; 0x34
 8004e0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e5      	bne.n	8004de8 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e24:	d107      	bne.n	8004e36 <UART_Start_Receive_IT+0xda>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d103      	bne.n	8004e36 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4a14      	ldr	r2, [pc, #80]	; (8004e84 <UART_Start_Receive_IT+0x128>)
 8004e32:	665a      	str	r2, [r3, #100]	; 0x64
 8004e34:	e002      	b.n	8004e3c <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4a13      	ldr	r2, [pc, #76]	; (8004e88 <UART_Start_Receive_IT+0x12c>)
 8004e3a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	613b      	str	r3, [r7, #16]
   return(result);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004e58:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	623b      	str	r3, [r7, #32]
 8004e64:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	69f9      	ldr	r1, [r7, #28]
 8004e68:	6a3a      	ldr	r2, [r7, #32]
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1e6      	bne.n	8004e44 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3744      	adds	r7, #68	; 0x44
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	0800512f 	.word	0x0800512f
 8004e88:	08004fd3 	.word	0x08004fd3

08004e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b095      	sub	sp, #84	; 0x54
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb2:	643b      	str	r3, [r7, #64]	; 0x40
 8004eb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004eb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e6      	bne.n	8004e94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3308      	adds	r3, #8
 8004ecc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e5      	bne.n	8004ec6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d118      	bne.n	8004f34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f023 0310 	bic.w	r3, r3, #16
 8004f16:	647b      	str	r3, [r7, #68]	; 0x44
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6979      	ldr	r1, [r7, #20]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e6      	bne.n	8004f02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004f46:	bf00      	nop
 8004f48:	3754      	adds	r7, #84	; 0x54
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7ff fb57 	bl	8004624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f76:	bf00      	nop
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b088      	sub	sp, #32
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f9a:	61fb      	str	r3, [r7, #28]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	6979      	ldr	r1, [r7, #20]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	e841 2300 	strex	r3, r2, [r1]
 8004fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e6      	bne.n	8004f86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff fb23 	bl	8004610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fca:	bf00      	nop
 8004fcc:	3720      	adds	r7, #32
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b096      	sub	sp, #88	; 0x58
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004fe0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe8:	2b22      	cmp	r3, #34	; 0x22
 8004fea:	f040 8094 	bne.w	8005116 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ff4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ff8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004ffc:	b2d9      	uxtb	r1, r3
 8004ffe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005002:	b2da      	uxtb	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005008:	400a      	ands	r2, r1
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d177      	bne.n	8005126 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	e853 3f00 	ldrex	r3, [r3]
 8005042:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005046:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800504a:	653b      	str	r3, [r7, #80]	; 0x50
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005054:	647b      	str	r3, [r7, #68]	; 0x44
 8005056:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005058:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800505a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800505c:	e841 2300 	strex	r3, r2, [r1]
 8005060:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e6      	bne.n	8005036 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3308      	adds	r3, #8
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	623b      	str	r3, [r7, #32]
   return(result);
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	f023 0301 	bic.w	r3, r3, #1
 800507e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3308      	adds	r3, #8
 8005086:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005088:	633a      	str	r2, [r7, #48]	; 0x30
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800508e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e5      	bne.n	8005068 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d12e      	bne.n	800510e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0310 	bic.w	r3, r3, #16
 80050ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d4:	61fb      	str	r3, [r7, #28]
 80050d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	69b9      	ldr	r1, [r7, #24]
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	617b      	str	r3, [r7, #20]
   return(result);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e6      	bne.n	80050b6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f003 0310 	and.w	r3, r3, #16
 80050f2:	2b10      	cmp	r3, #16
 80050f4:	d103      	bne.n	80050fe <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2210      	movs	r2, #16
 80050fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005104:	4619      	mov	r1, r3
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff fa96 	bl	8004638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800510c:	e00b      	b.n	8005126 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fb fbe8 	bl	80008e4 <HAL_UART_RxCpltCallback>
}
 8005114:	e007      	b.n	8005126 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699a      	ldr	r2, [r3, #24]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f042 0208 	orr.w	r2, r2, #8
 8005124:	619a      	str	r2, [r3, #24]
}
 8005126:	bf00      	nop
 8005128:	3758      	adds	r7, #88	; 0x58
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b096      	sub	sp, #88	; 0x58
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800513c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005144:	2b22      	cmp	r3, #34	; 0x22
 8005146:	f040 8094 	bne.w	8005272 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005150:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005158:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800515a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800515e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005162:	4013      	ands	r3, r2
 8005164:	b29a      	uxth	r2, r3
 8005166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005168:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516e:	1c9a      	adds	r2, r3, #2
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d177      	bne.n	8005282 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b0:	643b      	str	r3, [r7, #64]	; 0x40
 80051b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e6      	bne.n	8005192 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3308      	adds	r3, #8
 80051ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	e853 3f00 	ldrex	r3, [r3]
 80051d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	64bb      	str	r3, [r7, #72]	; 0x48
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3308      	adds	r3, #8
 80051e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e5      	bne.n	80051c4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005208:	2b01      	cmp	r3, #1
 800520a:	d12e      	bne.n	800526a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f023 0310 	bic.w	r3, r3, #16
 8005226:	647b      	str	r3, [r7, #68]	; 0x44
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	6979      	ldr	r1, [r7, #20]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	613b      	str	r3, [r7, #16]
   return(result);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e6      	bne.n	8005212 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	2b10      	cmp	r3, #16
 8005250:	d103      	bne.n	800525a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2210      	movs	r2, #16
 8005258:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff f9e8 	bl	8004638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005268:	e00b      	b.n	8005282 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fb fb3a 	bl	80008e4 <HAL_UART_RxCpltCallback>
}
 8005270:	e007      	b.n	8005282 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	699a      	ldr	r2, [r3, #24]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0208 	orr.w	r2, r2, #8
 8005280:	619a      	str	r2, [r3, #24]
}
 8005282:	bf00      	nop
 8005284:	3758      	adds	r7, #88	; 0x58
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80052a6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80052aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	43db      	mvns	r3, r3
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	4013      	ands	r3, r2
 80052be:	b29a      	uxth	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052d4:	b084      	sub	sp, #16
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	f107 0014 	add.w	r0, r7, #20
 80052e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	b004      	add	sp, #16
 8005314:	4770      	bx	lr

08005316 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800531a:	f001 f83b 	bl	8006394 <vTaskStartScheduler>
  
  return osOK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	bd80      	pop	{r7, pc}

08005324 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f103 0208 	add.w	r2, r3, #8
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f04f 32ff 	mov.w	r2, #4294967295
 800533c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f103 0208 	add.w	r2, r3, #8
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f103 0208 	add.w	r2, r3, #8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800537e:	b480      	push	{r7}
 8005380:	b085      	sub	sp, #20
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	601a      	str	r2, [r3, #0]
}
 80053ba:	bf00      	nop
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053c6:	b480      	push	{r7}
 80053c8:	b085      	sub	sp, #20
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d103      	bne.n	80053e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e00c      	b.n	8005400 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3308      	adds	r3, #8
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e002      	b.n	80053f4 <vListInsert+0x2e>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d2f6      	bcs.n	80053ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	601a      	str	r2, [r3, #0]
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6892      	ldr	r2, [r2, #8]
 800544e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6852      	ldr	r2, [r2, #4]
 8005458:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d103      	bne.n	800546c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	1e5a      	subs	r2, r3, #1
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10a      	bne.n	80054b6 <xQueueGenericReset+0x2a>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	60bb      	str	r3, [r7, #8]
}
 80054b2:	bf00      	nop
 80054b4:	e7fe      	b.n	80054b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054b6:	f002 fb4d 	bl	8007b54 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054c6:	fb01 f303 	mul.w	r3, r1, r3
 80054ca:	441a      	add	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e6:	3b01      	subs	r3, #1
 80054e8:	68f9      	ldr	r1, [r7, #12]
 80054ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	441a      	add	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	22ff      	movs	r2, #255	; 0xff
 80054fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	22ff      	movs	r2, #255	; 0xff
 8005502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d114      	bne.n	8005536 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01a      	beq.n	800554a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3310      	adds	r3, #16
 8005518:	4618      	mov	r0, r3
 800551a:	f001 f9d5 	bl	80068c8 <xTaskRemoveFromEventList>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d012      	beq.n	800554a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <xQueueGenericReset+0xcc>)
 8005526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	e009      	b.n	800554a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3310      	adds	r3, #16
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff fef2 	bl	8005324 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3324      	adds	r3, #36	; 0x24
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff feed 	bl	8005324 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800554a:	f002 fb33 	bl	8007bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800554e:	2301      	movs	r3, #1
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	e000ed04 	.word	0xe000ed04

0800555c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08e      	sub	sp, #56	; 0x38
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800559e:	bf00      	nop
 80055a0:	e7fe      	b.n	80055a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <xQueueGenericCreateStatic+0x52>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <xQueueGenericCreateStatic+0x56>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <xQueueGenericCreateStatic+0x58>
 80055b2:	2300      	movs	r3, #0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10a      	bne.n	80055ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	623b      	str	r3, [r7, #32]
}
 80055ca:	bf00      	nop
 80055cc:	e7fe      	b.n	80055cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d102      	bne.n	80055da <xQueueGenericCreateStatic+0x7e>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <xQueueGenericCreateStatic+0x82>
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <xQueueGenericCreateStatic+0x84>
 80055de:	2300      	movs	r3, #0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	61fb      	str	r3, [r7, #28]
}
 80055f6:	bf00      	nop
 80055f8:	e7fe      	b.n	80055f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055fa:	2348      	movs	r3, #72	; 0x48
 80055fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2b48      	cmp	r3, #72	; 0x48
 8005602:	d00a      	beq.n	800561a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	61bb      	str	r3, [r7, #24]
}
 8005616:	bf00      	nop
 8005618:	e7fe      	b.n	8005618 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800561e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00d      	beq.n	8005640 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800562c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f843 	bl	80056c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005642:	4618      	mov	r0, r3
 8005644:	3730      	adds	r7, #48	; 0x30
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800564a:	b580      	push	{r7, lr}
 800564c:	b08a      	sub	sp, #40	; 0x28
 800564e:	af02      	add	r7, sp, #8
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	4613      	mov	r3, r2
 8005656:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10a      	bne.n	8005674 <xQueueGenericCreate+0x2a>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	613b      	str	r3, [r7, #16]
}
 8005670:	bf00      	nop
 8005672:	e7fe      	b.n	8005672 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d102      	bne.n	8005680 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
 800567e:	e004      	b.n	800568a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	fb02 f303 	mul.w	r3, r2, r3
 8005688:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	3348      	adds	r3, #72	; 0x48
 800568e:	4618      	mov	r0, r3
 8005690:	f002 fb82 	bl	8007d98 <pvPortMalloc>
 8005694:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00f      	beq.n	80056bc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	3348      	adds	r3, #72	; 0x48
 80056a0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056aa:	79fa      	ldrb	r2, [r7, #7]
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	4613      	mov	r3, r2
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	68b9      	ldr	r1, [r7, #8]
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 f805 	bl	80056c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80056bc:	69bb      	ldr	r3, [r7, #24]
	}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d103      	bne.n	80056e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	e002      	b.n	80056e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056f4:	2101      	movs	r1, #1
 80056f6:	69b8      	ldr	r0, [r7, #24]
 80056f8:	f7ff fec8 	bl	800548c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056fc:	bf00      	nop
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08e      	sub	sp, #56	; 0x38
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005712:	2300      	movs	r3, #0
 8005714:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10a      	bne.n	8005736 <xQueueGenericSend+0x32>
	__asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005732:	bf00      	nop
 8005734:	e7fe      	b.n	8005734 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d103      	bne.n	8005744 <xQueueGenericSend+0x40>
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <xQueueGenericSend+0x44>
 8005744:	2301      	movs	r3, #1
 8005746:	e000      	b.n	800574a <xQueueGenericSend+0x46>
 8005748:	2300      	movs	r3, #0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <xQueueGenericSend+0x60>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d103      	bne.n	8005772 <xQueueGenericSend+0x6e>
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <xQueueGenericSend+0x72>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <xQueueGenericSend+0x74>
 8005776:	2300      	movs	r3, #0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <xQueueGenericSend+0x8e>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	623b      	str	r3, [r7, #32]
}
 800578e:	bf00      	nop
 8005790:	e7fe      	b.n	8005790 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005792:	f001 fa5f 	bl	8006c54 <xTaskGetSchedulerState>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d102      	bne.n	80057a2 <xQueueGenericSend+0x9e>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <xQueueGenericSend+0xa2>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <xQueueGenericSend+0xa4>
 80057a6:	2300      	movs	r3, #0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10a      	bne.n	80057c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	61fb      	str	r3, [r7, #28]
}
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057c2:	f002 f9c7 	bl	8007b54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d302      	bcc.n	80057d8 <xQueueGenericSend+0xd4>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d129      	bne.n	800582c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	68b9      	ldr	r1, [r7, #8]
 80057dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057de:	f000 faa5 	bl	8005d2c <prvCopyDataToQueue>
 80057e2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d010      	beq.n	800580e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	3324      	adds	r3, #36	; 0x24
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 f869 	bl	80068c8 <xTaskRemoveFromEventList>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d013      	beq.n	8005824 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057fc:	4b3f      	ldr	r3, [pc, #252]	; (80058fc <xQueueGenericSend+0x1f8>)
 80057fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	e00a      	b.n	8005824 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d007      	beq.n	8005824 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005814:	4b39      	ldr	r3, [pc, #228]	; (80058fc <xQueueGenericSend+0x1f8>)
 8005816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005824:	f002 f9c6 	bl	8007bb4 <vPortExitCritical>
				return pdPASS;
 8005828:	2301      	movs	r3, #1
 800582a:	e063      	b.n	80058f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d103      	bne.n	800583a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005832:	f002 f9bf 	bl	8007bb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005836:	2300      	movs	r3, #0
 8005838:	e05c      	b.n	80058f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800583a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583c:	2b00      	cmp	r3, #0
 800583e:	d106      	bne.n	800584e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	4618      	mov	r0, r3
 8005846:	f001 f8a1 	bl	800698c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800584a:	2301      	movs	r3, #1
 800584c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800584e:	f002 f9b1 	bl	8007bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005852:	f000 fe0f 	bl	8006474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005856:	f002 f97d 	bl	8007b54 <vPortEnterCritical>
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005860:	b25b      	sxtb	r3, r3
 8005862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005866:	d103      	bne.n	8005870 <xQueueGenericSend+0x16c>
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005876:	b25b      	sxtb	r3, r3
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d103      	bne.n	8005886 <xQueueGenericSend+0x182>
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005886:	f002 f995 	bl	8007bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800588a:	1d3a      	adds	r2, r7, #4
 800588c:	f107 0314 	add.w	r3, r7, #20
 8005890:	4611      	mov	r1, r2
 8005892:	4618      	mov	r0, r3
 8005894:	f001 f890 	bl	80069b8 <xTaskCheckForTimeOut>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d124      	bne.n	80058e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800589e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058a0:	f000 fb3c 	bl	8005f1c <prvIsQueueFull>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d018      	beq.n	80058dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	3310      	adds	r3, #16
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	4611      	mov	r1, r2
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 ffb8 	bl	8006828 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ba:	f000 fac7 	bl	8005e4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058be:	f000 fde7 	bl	8006490 <xTaskResumeAll>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f47f af7c 	bne.w	80057c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80058ca:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <xQueueGenericSend+0x1f8>)
 80058cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	e772      	b.n	80057c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058de:	f000 fab5 	bl	8005e4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058e2:	f000 fdd5 	bl	8006490 <xTaskResumeAll>
 80058e6:	e76c      	b.n	80057c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ea:	f000 faaf 	bl	8005e4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058ee:	f000 fdcf 	bl	8006490 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058f2:	2300      	movs	r3, #0
		}
	}
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3738      	adds	r7, #56	; 0x38
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	e000ed04 	.word	0xe000ed04

08005900 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08e      	sub	sp, #56	; 0x38
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d103      	bne.n	800593c <xQueueGenericSendFromISR+0x3c>
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <xQueueGenericSendFromISR+0x40>
 800593c:	2301      	movs	r3, #1
 800593e:	e000      	b.n	8005942 <xQueueGenericSendFromISR+0x42>
 8005940:	2300      	movs	r3, #0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	623b      	str	r3, [r7, #32]
}
 8005958:	bf00      	nop
 800595a:	e7fe      	b.n	800595a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d103      	bne.n	800596a <xQueueGenericSendFromISR+0x6a>
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <xQueueGenericSendFromISR+0x6e>
 800596a:	2301      	movs	r3, #1
 800596c:	e000      	b.n	8005970 <xQueueGenericSendFromISR+0x70>
 800596e:	2300      	movs	r3, #0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10a      	bne.n	800598a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	61fb      	str	r3, [r7, #28]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800598a:	f002 f9c5 	bl	8007d18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800598e:	f3ef 8211 	mrs	r2, BASEPRI
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	61ba      	str	r2, [r7, #24]
 80059a4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80059a6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d302      	bcc.n	80059bc <xQueueGenericSendFromISR+0xbc>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d12c      	bne.n	8005a16 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059cc:	f000 f9ae 	bl	8005d2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059d0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80059d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d8:	d112      	bne.n	8005a00 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d016      	beq.n	8005a10 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	3324      	adds	r3, #36	; 0x24
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 ff6e 	bl	80068c8 <xTaskRemoveFromEventList>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00e      	beq.n	8005a10 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00b      	beq.n	8005a10 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e007      	b.n	8005a10 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a04:	3301      	adds	r3, #1
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	b25a      	sxtb	r2, r3
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a10:	2301      	movs	r3, #1
 8005a12:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005a14:	e001      	b.n	8005a1a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3738      	adds	r7, #56	; 0x38
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08c      	sub	sp, #48	; 0x30
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <xQueueReceive+0x30>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	623b      	str	r3, [r7, #32]
}
 8005a5c:	bf00      	nop
 8005a5e:	e7fe      	b.n	8005a5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <xQueueReceive+0x3e>
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <xQueueReceive+0x42>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <xQueueReceive+0x44>
 8005a72:	2300      	movs	r3, #0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <xQueueReceive+0x5e>
	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	61fb      	str	r3, [r7, #28]
}
 8005a8a:	bf00      	nop
 8005a8c:	e7fe      	b.n	8005a8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a8e:	f001 f8e1 	bl	8006c54 <xTaskGetSchedulerState>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d102      	bne.n	8005a9e <xQueueReceive+0x6e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <xQueueReceive+0x72>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <xQueueReceive+0x74>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <xQueueReceive+0x8e>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	61bb      	str	r3, [r7, #24]
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005abe:	f002 f849 	bl	8007b54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01f      	beq.n	8005b0e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ad2:	f000 f995 	bl	8005e00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	1e5a      	subs	r2, r3, #1
 8005ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005adc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00f      	beq.n	8005b06 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	3310      	adds	r3, #16
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 feec 	bl	80068c8 <xTaskRemoveFromEventList>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005af6:	4b3d      	ldr	r3, [pc, #244]	; (8005bec <xQueueReceive+0x1bc>)
 8005af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b06:	f002 f855 	bl	8007bb4 <vPortExitCritical>
				return pdPASS;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e069      	b.n	8005be2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d103      	bne.n	8005b1c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b14:	f002 f84e 	bl	8007bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e062      	b.n	8005be2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b22:	f107 0310 	add.w	r3, r7, #16
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 ff30 	bl	800698c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b30:	f002 f840 	bl	8007bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b34:	f000 fc9e 	bl	8006474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b38:	f002 f80c 	bl	8007b54 <vPortEnterCritical>
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b42:	b25b      	sxtb	r3, r3
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d103      	bne.n	8005b52 <xQueueReceive+0x122>
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b58:	b25b      	sxtb	r3, r3
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d103      	bne.n	8005b68 <xQueueReceive+0x138>
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b68:	f002 f824 	bl	8007bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b6c:	1d3a      	adds	r2, r7, #4
 8005b6e:	f107 0310 	add.w	r3, r7, #16
 8005b72:	4611      	mov	r1, r2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 ff1f 	bl	80069b8 <xTaskCheckForTimeOut>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d123      	bne.n	8005bc8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b82:	f000 f9b5 	bl	8005ef0 <prvIsQueueEmpty>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d017      	beq.n	8005bbc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	3324      	adds	r3, #36	; 0x24
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	4611      	mov	r1, r2
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fe47 	bl	8006828 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b9c:	f000 f956 	bl	8005e4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ba0:	f000 fc76 	bl	8006490 <xTaskResumeAll>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d189      	bne.n	8005abe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005baa:	4b10      	ldr	r3, [pc, #64]	; (8005bec <xQueueReceive+0x1bc>)
 8005bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	e780      	b.n	8005abe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bbe:	f000 f945 	bl	8005e4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bc2:	f000 fc65 	bl	8006490 <xTaskResumeAll>
 8005bc6:	e77a      	b.n	8005abe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bca:	f000 f93f 	bl	8005e4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bce:	f000 fc5f 	bl	8006490 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bd4:	f000 f98c 	bl	8005ef0 <prvIsQueueEmpty>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f43f af6f 	beq.w	8005abe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005be0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3730      	adds	r7, #48	; 0x30
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	e000ed04 	.word	0xe000ed04

08005bf0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08e      	sub	sp, #56	; 0x38
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	623b      	str	r3, [r7, #32]
}
 8005c18:	bf00      	nop
 8005c1a:	e7fe      	b.n	8005c1a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <xQueueReceiveFromISR+0x3a>
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <xQueueReceiveFromISR+0x3e>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <xQueueReceiveFromISR+0x40>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	61fb      	str	r3, [r7, #28]
}
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c4a:	f002 f865 	bl	8007d18 <vPortValidateInterruptPriority>
	__asm volatile
 8005c4e:	f3ef 8211 	mrs	r2, BASEPRI
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	61ba      	str	r2, [r7, #24]
 8005c64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005c66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d02f      	beq.n	8005cd6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c80:	68b9      	ldr	r1, [r7, #8]
 8005c82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c84:	f000 f8bc 	bl	8005e00 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8a:	1e5a      	subs	r2, r3, #1
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005c90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d112      	bne.n	8005cc0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d016      	beq.n	8005cd0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	3310      	adds	r3, #16
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fe0e 	bl	80068c8 <xTaskRemoveFromEventList>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00e      	beq.n	8005cd0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00b      	beq.n	8005cd0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e007      	b.n	8005cd0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	b25a      	sxtb	r2, r3
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd4:	e001      	b.n	8005cda <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f383 8811 	msr	BASEPRI, r3
}
 8005ce4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3738      	adds	r7, #56	; 0x38
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	60bb      	str	r3, [r7, #8]
}
 8005d10:	bf00      	nop
 8005d12:	e7fe      	b.n	8005d12 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005d14:	f001 ff1e 	bl	8007b54 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005d1e:	f001 ff49 	bl	8007bb4 <vPortExitCritical>

	return uxReturn;
 8005d22:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10d      	bne.n	8005d66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d14d      	bne.n	8005dee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 ff9a 	bl	8006c90 <xTaskPriorityDisinherit>
 8005d5c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	605a      	str	r2, [r3, #4]
 8005d64:	e043      	b.n	8005dee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d119      	bne.n	8005da0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6898      	ldr	r0, [r3, #8]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	461a      	mov	r2, r3
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	f002 fa0e 	bl	8008198 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	441a      	add	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d32b      	bcc.n	8005dee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	609a      	str	r2, [r3, #8]
 8005d9e:	e026      	b.n	8005dee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	68d8      	ldr	r0, [r3, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	461a      	mov	r2, r3
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	f002 f9f4 	bl	8008198 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	425b      	negs	r3, r3
 8005dba:	441a      	add	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d207      	bcs.n	8005ddc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	425b      	negs	r3, r3
 8005dd6:	441a      	add	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d105      	bne.n	8005dee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005df6:	697b      	ldr	r3, [r7, #20]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d018      	beq.n	8005e44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	441a      	add	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d303      	bcc.n	8005e34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68d9      	ldr	r1, [r3, #12]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	6838      	ldr	r0, [r7, #0]
 8005e40:	f002 f9aa 	bl	8008198 <memcpy>
	}
}
 8005e44:	bf00      	nop
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e54:	f001 fe7e 	bl	8007b54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e60:	e011      	b.n	8005e86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d012      	beq.n	8005e90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3324      	adds	r3, #36	; 0x24
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fd2a 	bl	80068c8 <xTaskRemoveFromEventList>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e7a:	f000 fdff 	bl	8006a7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	dce9      	bgt.n	8005e62 <prvUnlockQueue+0x16>
 8005e8e:	e000      	b.n	8005e92 <prvUnlockQueue+0x46>
					break;
 8005e90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	22ff      	movs	r2, #255	; 0xff
 8005e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005e9a:	f001 fe8b 	bl	8007bb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e9e:	f001 fe59 	bl	8007b54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ea8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005eaa:	e011      	b.n	8005ed0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d012      	beq.n	8005eda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3310      	adds	r3, #16
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fd05 	bl	80068c8 <xTaskRemoveFromEventList>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ec4:	f000 fdda 	bl	8006a7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ec8:	7bbb      	ldrb	r3, [r7, #14]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	dce9      	bgt.n	8005eac <prvUnlockQueue+0x60>
 8005ed8:	e000      	b.n	8005edc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005eda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	22ff      	movs	r2, #255	; 0xff
 8005ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ee4:	f001 fe66 	bl	8007bb4 <vPortExitCritical>
}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ef8:	f001 fe2c 	bl	8007b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d102      	bne.n	8005f0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f04:	2301      	movs	r3, #1
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	e001      	b.n	8005f0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f0e:	f001 fe51 	bl	8007bb4 <vPortExitCritical>

	return xReturn;
 8005f12:	68fb      	ldr	r3, [r7, #12]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f24:	f001 fe16 	bl	8007b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d102      	bne.n	8005f3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f34:	2301      	movs	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	e001      	b.n	8005f3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f3e:	f001 fe39 	bl	8007bb4 <vPortExitCritical>

	return xReturn;
 8005f42:	68fb      	ldr	r3, [r7, #12]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10a      	bne.n	8005f70 <xQueueIsQueueFullFromISR+0x24>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	60bb      	str	r3, [r7, #8]
}
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <xQueueIsQueueFullFromISR+0x22>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d102      	bne.n	8005f82 <xQueueIsQueueFullFromISR+0x36>
	{
		xReturn = pdTRUE;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	e001      	b.n	8005f86 <xQueueIsQueueFullFromISR+0x3a>
	}
	else
	{
		xReturn = pdFALSE;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8005f86:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	e014      	b.n	8005fce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fa4:	4a0f      	ldr	r2, [pc, #60]	; (8005fe4 <vQueueAddToRegistry+0x50>)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10b      	bne.n	8005fc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fb0:	490c      	ldr	r1, [pc, #48]	; (8005fe4 <vQueueAddToRegistry+0x50>)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fba:	4a0a      	ldr	r2, [pc, #40]	; (8005fe4 <vQueueAddToRegistry+0x50>)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	4413      	add	r3, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005fc6:	e006      	b.n	8005fd6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b07      	cmp	r3, #7
 8005fd2:	d9e7      	bls.n	8005fa4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	20000cc4 	.word	0x20000cc4

08005fe8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ff8:	f001 fdac 	bl	8007b54 <vPortEnterCritical>
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006002:	b25b      	sxtb	r3, r3
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006008:	d103      	bne.n	8006012 <vQueueWaitForMessageRestricted+0x2a>
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006018:	b25b      	sxtb	r3, r3
 800601a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601e:	d103      	bne.n	8006028 <vQueueWaitForMessageRestricted+0x40>
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006028:	f001 fdc4 	bl	8007bb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	2b00      	cmp	r3, #0
 8006032:	d106      	bne.n	8006042 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	3324      	adds	r3, #36	; 0x24
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	68b9      	ldr	r1, [r7, #8]
 800603c:	4618      	mov	r0, r3
 800603e:	f000 fc17 	bl	8006870 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006042:	6978      	ldr	r0, [r7, #20]
 8006044:	f7ff ff02 	bl	8005e4c <prvUnlockQueue>
	}
 8006048:	bf00      	nop
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08e      	sub	sp, #56	; 0x38
 8006054:	af04      	add	r7, sp, #16
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10a      	bne.n	800607a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	623b      	str	r3, [r7, #32]
}
 8006076:	bf00      	nop
 8006078:	e7fe      	b.n	8006078 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10a      	bne.n	8006096 <xTaskCreateStatic+0x46>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	61fb      	str	r3, [r7, #28]
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006096:	23b4      	movs	r3, #180	; 0xb4
 8006098:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2bb4      	cmp	r3, #180	; 0xb4
 800609e:	d00a      	beq.n	80060b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	61bb      	str	r3, [r7, #24]
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01e      	beq.n	80060fa <xTaskCreateStatic+0xaa>
 80060bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01b      	beq.n	80060fa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060d4:	2300      	movs	r3, #0
 80060d6:	9303      	str	r3, [sp, #12]
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	9302      	str	r3, [sp, #8]
 80060dc:	f107 0314 	add.w	r3, r7, #20
 80060e0:	9301      	str	r3, [sp, #4]
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	68b9      	ldr	r1, [r7, #8]
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f851 	bl	8006194 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060f4:	f000 f8e4 	bl	80062c0 <prvAddNewTaskToReadyList>
 80060f8:	e001      	b.n	80060fe <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80060fe:	697b      	ldr	r3, [r7, #20]
	}
 8006100:	4618      	mov	r0, r3
 8006102:	3728      	adds	r7, #40	; 0x28
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08c      	sub	sp, #48	; 0x30
 800610c:	af04      	add	r7, sp, #16
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	4613      	mov	r3, r2
 8006116:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006118:	88fb      	ldrh	r3, [r7, #6]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4618      	mov	r0, r3
 800611e:	f001 fe3b 	bl	8007d98 <pvPortMalloc>
 8006122:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00e      	beq.n	8006148 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800612a:	20b4      	movs	r0, #180	; 0xb4
 800612c:	f001 fe34 	bl	8007d98 <pvPortMalloc>
 8006130:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	631a      	str	r2, [r3, #48]	; 0x30
 800613e:	e005      	b.n	800614c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006140:	6978      	ldr	r0, [r7, #20]
 8006142:	f001 feed 	bl	8007f20 <vPortFree>
 8006146:	e001      	b.n	800614c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006148:	2300      	movs	r3, #0
 800614a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d017      	beq.n	8006182 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800615a:	88fa      	ldrh	r2, [r7, #6]
 800615c:	2300      	movs	r3, #0
 800615e:	9303      	str	r3, [sp, #12]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	9302      	str	r3, [sp, #8]
 8006164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f80f 	bl	8006194 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006176:	69f8      	ldr	r0, [r7, #28]
 8006178:	f000 f8a2 	bl	80062c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800617c:	2301      	movs	r3, #1
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	e002      	b.n	8006188 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006182:	f04f 33ff 	mov.w	r3, #4294967295
 8006186:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006188:	69bb      	ldr	r3, [r7, #24]
	}
 800618a:	4618      	mov	r0, r3
 800618c:	3720      	adds	r7, #32
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061ac:	3b01      	subs	r3, #1
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	f023 0307 	bic.w	r3, r3, #7
 80061ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <prvInitialiseNewTask+0x48>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	617b      	str	r3, [r7, #20]
}
 80061d8:	bf00      	nop
 80061da:	e7fe      	b.n	80061da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061dc:	2300      	movs	r3, #0
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	e012      	b.n	8006208 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	4413      	add	r3, r2
 80061e8:	7819      	ldrb	r1, [r3, #0]
 80061ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	4413      	add	r3, r2
 80061f0:	3334      	adds	r3, #52	; 0x34
 80061f2:	460a      	mov	r2, r1
 80061f4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	4413      	add	r3, r2
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d006      	beq.n	8006210 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	3301      	adds	r3, #1
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	2b0f      	cmp	r3, #15
 800620c:	d9e9      	bls.n	80061e2 <prvInitialiseNewTask+0x4e>
 800620e:	e000      	b.n	8006212 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006210:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	2b06      	cmp	r3, #6
 800621e:	d901      	bls.n	8006224 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006220:	2306      	movs	r3, #6
 8006222:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006228:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800622e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	2200      	movs	r2, #0
 8006234:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	3304      	adds	r3, #4
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff f892 	bl	8005364 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	3318      	adds	r3, #24
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff f88d 	bl	8005364 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800624e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	f1c3 0207 	rsb	r2, r3, #7
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	2200      	movs	r2, #0
 800626c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	334c      	adds	r3, #76	; 0x4c
 8006274:	2260      	movs	r2, #96	; 0x60
 8006276:	2100      	movs	r1, #0
 8006278:	4618      	mov	r0, r3
 800627a:	f001 ff9b 	bl	80081b4 <memset>
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	4a0c      	ldr	r2, [pc, #48]	; (80062b4 <prvInitialiseNewTask+0x120>)
 8006282:	651a      	str	r2, [r3, #80]	; 0x50
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	4a0c      	ldr	r2, [pc, #48]	; (80062b8 <prvInitialiseNewTask+0x124>)
 8006288:	655a      	str	r2, [r3, #84]	; 0x54
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	4a0b      	ldr	r2, [pc, #44]	; (80062bc <prvInitialiseNewTask+0x128>)
 800628e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	68f9      	ldr	r1, [r7, #12]
 8006294:	69b8      	ldr	r0, [r7, #24]
 8006296:	f001 fb2d 	bl	80078f4 <pxPortInitialiseStack>
 800629a:	4602      	mov	r2, r0
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80062a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ac:	bf00      	nop
 80062ae:	3720      	adds	r7, #32
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	0800855c 	.word	0x0800855c
 80062b8:	0800857c 	.word	0x0800857c
 80062bc:	0800853c 	.word	0x0800853c

080062c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062c8:	f001 fc44 	bl	8007b54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062cc:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <prvAddNewTaskToReadyList+0xb8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3301      	adds	r3, #1
 80062d2:	4a29      	ldr	r2, [pc, #164]	; (8006378 <prvAddNewTaskToReadyList+0xb8>)
 80062d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062d6:	4b29      	ldr	r3, [pc, #164]	; (800637c <prvAddNewTaskToReadyList+0xbc>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062de:	4a27      	ldr	r2, [pc, #156]	; (800637c <prvAddNewTaskToReadyList+0xbc>)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062e4:	4b24      	ldr	r3, [pc, #144]	; (8006378 <prvAddNewTaskToReadyList+0xb8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d110      	bne.n	800630e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062ec:	f000 fbea 	bl	8006ac4 <prvInitialiseTaskLists>
 80062f0:	e00d      	b.n	800630e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062f2:	4b23      	ldr	r3, [pc, #140]	; (8006380 <prvAddNewTaskToReadyList+0xc0>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d109      	bne.n	800630e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062fa:	4b20      	ldr	r3, [pc, #128]	; (800637c <prvAddNewTaskToReadyList+0xbc>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	429a      	cmp	r2, r3
 8006306:	d802      	bhi.n	800630e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006308:	4a1c      	ldr	r2, [pc, #112]	; (800637c <prvAddNewTaskToReadyList+0xbc>)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800630e:	4b1d      	ldr	r3, [pc, #116]	; (8006384 <prvAddNewTaskToReadyList+0xc4>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3301      	adds	r3, #1
 8006314:	4a1b      	ldr	r2, [pc, #108]	; (8006384 <prvAddNewTaskToReadyList+0xc4>)
 8006316:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	2201      	movs	r2, #1
 800631e:	409a      	lsls	r2, r3
 8006320:	4b19      	ldr	r3, [pc, #100]	; (8006388 <prvAddNewTaskToReadyList+0xc8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4313      	orrs	r3, r2
 8006326:	4a18      	ldr	r2, [pc, #96]	; (8006388 <prvAddNewTaskToReadyList+0xc8>)
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4a15      	ldr	r2, [pc, #84]	; (800638c <prvAddNewTaskToReadyList+0xcc>)
 8006338:	441a      	add	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3304      	adds	r3, #4
 800633e:	4619      	mov	r1, r3
 8006340:	4610      	mov	r0, r2
 8006342:	f7ff f81c 	bl	800537e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006346:	f001 fc35 	bl	8007bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800634a:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <prvAddNewTaskToReadyList+0xc0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00e      	beq.n	8006370 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006352:	4b0a      	ldr	r3, [pc, #40]	; (800637c <prvAddNewTaskToReadyList+0xbc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	429a      	cmp	r2, r3
 800635e:	d207      	bcs.n	8006370 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006360:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <prvAddNewTaskToReadyList+0xd0>)
 8006362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006370:	bf00      	nop
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	20000e04 	.word	0x20000e04
 800637c:	20000d04 	.word	0x20000d04
 8006380:	20000e10 	.word	0x20000e10
 8006384:	20000e20 	.word	0x20000e20
 8006388:	20000e0c 	.word	0x20000e0c
 800638c:	20000d08 	.word	0x20000d08
 8006390:	e000ed04 	.word	0xe000ed04

08006394 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08a      	sub	sp, #40	; 0x28
 8006398:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063a2:	463a      	mov	r2, r7
 80063a4:	1d39      	adds	r1, r7, #4
 80063a6:	f107 0308 	add.w	r3, r7, #8
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7f9 ff22 	bl	80001f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	9202      	str	r2, [sp, #8]
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	2300      	movs	r3, #0
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	2300      	movs	r3, #0
 80063c0:	460a      	mov	r2, r1
 80063c2:	4924      	ldr	r1, [pc, #144]	; (8006454 <vTaskStartScheduler+0xc0>)
 80063c4:	4824      	ldr	r0, [pc, #144]	; (8006458 <vTaskStartScheduler+0xc4>)
 80063c6:	f7ff fe43 	bl	8006050 <xTaskCreateStatic>
 80063ca:	4603      	mov	r3, r0
 80063cc:	4a23      	ldr	r2, [pc, #140]	; (800645c <vTaskStartScheduler+0xc8>)
 80063ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063d0:	4b22      	ldr	r3, [pc, #136]	; (800645c <vTaskStartScheduler+0xc8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063d8:	2301      	movs	r3, #1
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	e001      	b.n	80063e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063de:	2300      	movs	r3, #0
 80063e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d102      	bne.n	80063ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063e8:	f000 ff18 	bl	800721c <xTimerCreateTimerTask>
 80063ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d11b      	bne.n	800642c <vTaskStartScheduler+0x98>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	613b      	str	r3, [r7, #16]
}
 8006406:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006408:	4b15      	ldr	r3, [pc, #84]	; (8006460 <vTaskStartScheduler+0xcc>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	334c      	adds	r3, #76	; 0x4c
 800640e:	4a15      	ldr	r2, [pc, #84]	; (8006464 <vTaskStartScheduler+0xd0>)
 8006410:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006412:	4b15      	ldr	r3, [pc, #84]	; (8006468 <vTaskStartScheduler+0xd4>)
 8006414:	f04f 32ff 	mov.w	r2, #4294967295
 8006418:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800641a:	4b14      	ldr	r3, [pc, #80]	; (800646c <vTaskStartScheduler+0xd8>)
 800641c:	2201      	movs	r2, #1
 800641e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006420:	4b13      	ldr	r3, [pc, #76]	; (8006470 <vTaskStartScheduler+0xdc>)
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006426:	f001 faf3 	bl	8007a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800642a:	e00e      	b.n	800644a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006432:	d10a      	bne.n	800644a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	60fb      	str	r3, [r7, #12]
}
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <vTaskStartScheduler+0xb4>
}
 800644a:	bf00      	nop
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	080084ec 	.word	0x080084ec
 8006458:	08006a95 	.word	0x08006a95
 800645c:	20000e28 	.word	0x20000e28
 8006460:	20000d04 	.word	0x20000d04
 8006464:	2000001c 	.word	0x2000001c
 8006468:	20000e24 	.word	0x20000e24
 800646c:	20000e10 	.word	0x20000e10
 8006470:	20000e08 	.word	0x20000e08

08006474 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006478:	4b04      	ldr	r3, [pc, #16]	; (800648c <vTaskSuspendAll+0x18>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3301      	adds	r3, #1
 800647e:	4a03      	ldr	r2, [pc, #12]	; (800648c <vTaskSuspendAll+0x18>)
 8006480:	6013      	str	r3, [r2, #0]
}
 8006482:	bf00      	nop
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	20000e2c 	.word	0x20000e2c

08006490 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800649e:	4b41      	ldr	r3, [pc, #260]	; (80065a4 <xTaskResumeAll+0x114>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10a      	bne.n	80064bc <xTaskResumeAll+0x2c>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	603b      	str	r3, [r7, #0]
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064bc:	f001 fb4a 	bl	8007b54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064c0:	4b38      	ldr	r3, [pc, #224]	; (80065a4 <xTaskResumeAll+0x114>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3b01      	subs	r3, #1
 80064c6:	4a37      	ldr	r2, [pc, #220]	; (80065a4 <xTaskResumeAll+0x114>)
 80064c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064ca:	4b36      	ldr	r3, [pc, #216]	; (80065a4 <xTaskResumeAll+0x114>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d161      	bne.n	8006596 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064d2:	4b35      	ldr	r3, [pc, #212]	; (80065a8 <xTaskResumeAll+0x118>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d05d      	beq.n	8006596 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064da:	e02e      	b.n	800653a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80064dc:	4b33      	ldr	r3, [pc, #204]	; (80065ac <xTaskResumeAll+0x11c>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3318      	adds	r3, #24
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe ffa5 	bl	8005438 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3304      	adds	r3, #4
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe ffa0 	bl	8005438 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	2201      	movs	r2, #1
 80064fe:	409a      	lsls	r2, r3
 8006500:	4b2b      	ldr	r3, [pc, #172]	; (80065b0 <xTaskResumeAll+0x120>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4313      	orrs	r3, r2
 8006506:	4a2a      	ldr	r2, [pc, #168]	; (80065b0 <xTaskResumeAll+0x120>)
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4a27      	ldr	r2, [pc, #156]	; (80065b4 <xTaskResumeAll+0x124>)
 8006518:	441a      	add	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	3304      	adds	r3, #4
 800651e:	4619      	mov	r1, r3
 8006520:	4610      	mov	r0, r2
 8006522:	f7fe ff2c 	bl	800537e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652a:	4b23      	ldr	r3, [pc, #140]	; (80065b8 <xTaskResumeAll+0x128>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	429a      	cmp	r2, r3
 8006532:	d302      	bcc.n	800653a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006534:	4b21      	ldr	r3, [pc, #132]	; (80065bc <xTaskResumeAll+0x12c>)
 8006536:	2201      	movs	r2, #1
 8006538:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800653a:	4b1c      	ldr	r3, [pc, #112]	; (80065ac <xTaskResumeAll+0x11c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1cc      	bne.n	80064dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006548:	f000 fb5e 	bl	8006c08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800654c:	4b1c      	ldr	r3, [pc, #112]	; (80065c0 <xTaskResumeAll+0x130>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d010      	beq.n	800657a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006558:	f000 f846 	bl	80065e8 <xTaskIncrementTick>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006562:	4b16      	ldr	r3, [pc, #88]	; (80065bc <xTaskResumeAll+0x12c>)
 8006564:	2201      	movs	r2, #1
 8006566:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3b01      	subs	r3, #1
 800656c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1f1      	bne.n	8006558 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006574:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <xTaskResumeAll+0x130>)
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800657a:	4b10      	ldr	r3, [pc, #64]	; (80065bc <xTaskResumeAll+0x12c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d009      	beq.n	8006596 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006582:	2301      	movs	r3, #1
 8006584:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006586:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <xTaskResumeAll+0x134>)
 8006588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006596:	f001 fb0d 	bl	8007bb4 <vPortExitCritical>

	return xAlreadyYielded;
 800659a:	68bb      	ldr	r3, [r7, #8]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000e2c 	.word	0x20000e2c
 80065a8:	20000e04 	.word	0x20000e04
 80065ac:	20000dc4 	.word	0x20000dc4
 80065b0:	20000e0c 	.word	0x20000e0c
 80065b4:	20000d08 	.word	0x20000d08
 80065b8:	20000d04 	.word	0x20000d04
 80065bc:	20000e18 	.word	0x20000e18
 80065c0:	20000e14 	.word	0x20000e14
 80065c4:	e000ed04 	.word	0xe000ed04

080065c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065ce:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <xTaskGetTickCount+0x1c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065d4:	687b      	ldr	r3, [r7, #4]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20000e08 	.word	0x20000e08

080065e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065ee:	2300      	movs	r3, #0
 80065f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065f2:	4b51      	ldr	r3, [pc, #324]	; (8006738 <xTaskIncrementTick+0x150>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f040 808d 	bne.w	8006716 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065fc:	4b4f      	ldr	r3, [pc, #316]	; (800673c <xTaskIncrementTick+0x154>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3301      	adds	r3, #1
 8006602:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006604:	4a4d      	ldr	r2, [pc, #308]	; (800673c <xTaskIncrementTick+0x154>)
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d120      	bne.n	8006652 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006610:	4b4b      	ldr	r3, [pc, #300]	; (8006740 <xTaskIncrementTick+0x158>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <xTaskIncrementTick+0x48>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	603b      	str	r3, [r7, #0]
}
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <xTaskIncrementTick+0x46>
 8006630:	4b43      	ldr	r3, [pc, #268]	; (8006740 <xTaskIncrementTick+0x158>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	4b43      	ldr	r3, [pc, #268]	; (8006744 <xTaskIncrementTick+0x15c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a41      	ldr	r2, [pc, #260]	; (8006740 <xTaskIncrementTick+0x158>)
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	4a41      	ldr	r2, [pc, #260]	; (8006744 <xTaskIncrementTick+0x15c>)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	4b40      	ldr	r3, [pc, #256]	; (8006748 <xTaskIncrementTick+0x160>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3301      	adds	r3, #1
 800664a:	4a3f      	ldr	r2, [pc, #252]	; (8006748 <xTaskIncrementTick+0x160>)
 800664c:	6013      	str	r3, [r2, #0]
 800664e:	f000 fadb 	bl	8006c08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006652:	4b3e      	ldr	r3, [pc, #248]	; (800674c <xTaskIncrementTick+0x164>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	429a      	cmp	r2, r3
 800665a:	d34d      	bcc.n	80066f8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800665c:	4b38      	ldr	r3, [pc, #224]	; (8006740 <xTaskIncrementTick+0x158>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <xTaskIncrementTick+0x82>
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <xTaskIncrementTick+0x84>
 800666a:	2300      	movs	r3, #0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d004      	beq.n	800667a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006670:	4b36      	ldr	r3, [pc, #216]	; (800674c <xTaskIncrementTick+0x164>)
 8006672:	f04f 32ff 	mov.w	r2, #4294967295
 8006676:	601a      	str	r2, [r3, #0]
					break;
 8006678:	e03e      	b.n	80066f8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800667a:	4b31      	ldr	r3, [pc, #196]	; (8006740 <xTaskIncrementTick+0x158>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	429a      	cmp	r2, r3
 8006690:	d203      	bcs.n	800669a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006692:	4a2e      	ldr	r2, [pc, #184]	; (800674c <xTaskIncrementTick+0x164>)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6013      	str	r3, [r2, #0]
						break;
 8006698:	e02e      	b.n	80066f8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	3304      	adds	r3, #4
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fe feca 	bl	8005438 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d004      	beq.n	80066b6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	3318      	adds	r3, #24
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fe fec1 	bl	8005438 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ba:	2201      	movs	r2, #1
 80066bc:	409a      	lsls	r2, r3
 80066be:	4b24      	ldr	r3, [pc, #144]	; (8006750 <xTaskIncrementTick+0x168>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	4a22      	ldr	r2, [pc, #136]	; (8006750 <xTaskIncrementTick+0x168>)
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4a1f      	ldr	r2, [pc, #124]	; (8006754 <xTaskIncrementTick+0x16c>)
 80066d6:	441a      	add	r2, r3
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	3304      	adds	r3, #4
 80066dc:	4619      	mov	r1, r3
 80066de:	4610      	mov	r0, r2
 80066e0:	f7fe fe4d 	bl	800537e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e8:	4b1b      	ldr	r3, [pc, #108]	; (8006758 <xTaskIncrementTick+0x170>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d3b4      	bcc.n	800665c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80066f2:	2301      	movs	r3, #1
 80066f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066f6:	e7b1      	b.n	800665c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066f8:	4b17      	ldr	r3, [pc, #92]	; (8006758 <xTaskIncrementTick+0x170>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fe:	4915      	ldr	r1, [pc, #84]	; (8006754 <xTaskIncrementTick+0x16c>)
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	440b      	add	r3, r1
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d907      	bls.n	8006720 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006710:	2301      	movs	r3, #1
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	e004      	b.n	8006720 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006716:	4b11      	ldr	r3, [pc, #68]	; (800675c <xTaskIncrementTick+0x174>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3301      	adds	r3, #1
 800671c:	4a0f      	ldr	r2, [pc, #60]	; (800675c <xTaskIncrementTick+0x174>)
 800671e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006720:	4b0f      	ldr	r3, [pc, #60]	; (8006760 <xTaskIncrementTick+0x178>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006728:	2301      	movs	r3, #1
 800672a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800672c:	697b      	ldr	r3, [r7, #20]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000e2c 	.word	0x20000e2c
 800673c:	20000e08 	.word	0x20000e08
 8006740:	20000dbc 	.word	0x20000dbc
 8006744:	20000dc0 	.word	0x20000dc0
 8006748:	20000e1c 	.word	0x20000e1c
 800674c:	20000e24 	.word	0x20000e24
 8006750:	20000e0c 	.word	0x20000e0c
 8006754:	20000d08 	.word	0x20000d08
 8006758:	20000d04 	.word	0x20000d04
 800675c:	20000e14 	.word	0x20000e14
 8006760:	20000e18 	.word	0x20000e18

08006764 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800676a:	4b29      	ldr	r3, [pc, #164]	; (8006810 <vTaskSwitchContext+0xac>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006772:	4b28      	ldr	r3, [pc, #160]	; (8006814 <vTaskSwitchContext+0xb0>)
 8006774:	2201      	movs	r2, #1
 8006776:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006778:	e044      	b.n	8006804 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800677a:	4b26      	ldr	r3, [pc, #152]	; (8006814 <vTaskSwitchContext+0xb0>)
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006780:	4b25      	ldr	r3, [pc, #148]	; (8006818 <vTaskSwitchContext+0xb4>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	fab3 f383 	clz	r3, r3
 800678c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800678e:	7afb      	ldrb	r3, [r7, #11]
 8006790:	f1c3 031f 	rsb	r3, r3, #31
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	4921      	ldr	r1, [pc, #132]	; (800681c <vTaskSwitchContext+0xb8>)
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10a      	bne.n	80067c0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	607b      	str	r3, [r7, #4]
}
 80067bc:	bf00      	nop
 80067be:	e7fe      	b.n	80067be <vTaskSwitchContext+0x5a>
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4613      	mov	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4a14      	ldr	r2, [pc, #80]	; (800681c <vTaskSwitchContext+0xb8>)
 80067cc:	4413      	add	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	605a      	str	r2, [r3, #4]
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	3308      	adds	r3, #8
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d104      	bne.n	80067f0 <vTaskSwitchContext+0x8c>
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	605a      	str	r2, [r3, #4]
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	4a0a      	ldr	r2, [pc, #40]	; (8006820 <vTaskSwitchContext+0xbc>)
 80067f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067fa:	4b09      	ldr	r3, [pc, #36]	; (8006820 <vTaskSwitchContext+0xbc>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	334c      	adds	r3, #76	; 0x4c
 8006800:	4a08      	ldr	r2, [pc, #32]	; (8006824 <vTaskSwitchContext+0xc0>)
 8006802:	6013      	str	r3, [r2, #0]
}
 8006804:	bf00      	nop
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	20000e2c 	.word	0x20000e2c
 8006814:	20000e18 	.word	0x20000e18
 8006818:	20000e0c 	.word	0x20000e0c
 800681c:	20000d08 	.word	0x20000d08
 8006820:	20000d04 	.word	0x20000d04
 8006824:	2000001c 	.word	0x2000001c

08006828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	60fb      	str	r3, [r7, #12]
}
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800684e:	4b07      	ldr	r3, [pc, #28]	; (800686c <vTaskPlaceOnEventList+0x44>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3318      	adds	r3, #24
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fe fdb5 	bl	80053c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800685c:	2101      	movs	r1, #1
 800685e:	6838      	ldr	r0, [r7, #0]
 8006860:	f000 fc76 	bl	8007150 <prvAddCurrentTaskToDelayedList>
}
 8006864:	bf00      	nop
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20000d04 	.word	0x20000d04

08006870 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	617b      	str	r3, [r7, #20]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006898:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3318      	adds	r3, #24
 800689e:	4619      	mov	r1, r3
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7fe fd6c 	bl	800537e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80068ac:	f04f 33ff 	mov.w	r3, #4294967295
 80068b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	68b8      	ldr	r0, [r7, #8]
 80068b6:	f000 fc4b 	bl	8007150 <prvAddCurrentTaskToDelayedList>
	}
 80068ba:	bf00      	nop
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20000d04 	.word	0x20000d04

080068c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	60fb      	str	r3, [r7, #12]
}
 80068f0:	bf00      	nop
 80068f2:	e7fe      	b.n	80068f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	3318      	adds	r3, #24
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fe fd9d 	bl	8005438 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068fe:	4b1d      	ldr	r3, [pc, #116]	; (8006974 <xTaskRemoveFromEventList+0xac>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d11c      	bne.n	8006940 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	3304      	adds	r3, #4
 800690a:	4618      	mov	r0, r3
 800690c:	f7fe fd94 	bl	8005438 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	2201      	movs	r2, #1
 8006916:	409a      	lsls	r2, r3
 8006918:	4b17      	ldr	r3, [pc, #92]	; (8006978 <xTaskRemoveFromEventList+0xb0>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4313      	orrs	r3, r2
 800691e:	4a16      	ldr	r2, [pc, #88]	; (8006978 <xTaskRemoveFromEventList+0xb0>)
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4a13      	ldr	r2, [pc, #76]	; (800697c <xTaskRemoveFromEventList+0xb4>)
 8006930:	441a      	add	r2, r3
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	3304      	adds	r3, #4
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f7fe fd20 	bl	800537e <vListInsertEnd>
 800693e:	e005      	b.n	800694c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	3318      	adds	r3, #24
 8006944:	4619      	mov	r1, r3
 8006946:	480e      	ldr	r0, [pc, #56]	; (8006980 <xTaskRemoveFromEventList+0xb8>)
 8006948:	f7fe fd19 	bl	800537e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006950:	4b0c      	ldr	r3, [pc, #48]	; (8006984 <xTaskRemoveFromEventList+0xbc>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006956:	429a      	cmp	r2, r3
 8006958:	d905      	bls.n	8006966 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800695a:	2301      	movs	r3, #1
 800695c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800695e:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <xTaskRemoveFromEventList+0xc0>)
 8006960:	2201      	movs	r2, #1
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	e001      	b.n	800696a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800696a:	697b      	ldr	r3, [r7, #20]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20000e2c 	.word	0x20000e2c
 8006978:	20000e0c 	.word	0x20000e0c
 800697c:	20000d08 	.word	0x20000d08
 8006980:	20000dc4 	.word	0x20000dc4
 8006984:	20000d04 	.word	0x20000d04
 8006988:	20000e18 	.word	0x20000e18

0800698c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006994:	4b06      	ldr	r3, [pc, #24]	; (80069b0 <vTaskInternalSetTimeOutState+0x24>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800699c:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <vTaskInternalSetTimeOutState+0x28>)
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	605a      	str	r2, [r3, #4]
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	20000e1c 	.word	0x20000e1c
 80069b4:	20000e08 	.word	0x20000e08

080069b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10a      	bne.n	80069de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	613b      	str	r3, [r7, #16]
}
 80069da:	bf00      	nop
 80069dc:	e7fe      	b.n	80069dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	60fb      	str	r3, [r7, #12]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80069fa:	f001 f8ab 	bl	8007b54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069fe:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <xTaskCheckForTimeOut+0xbc>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a16:	d102      	bne.n	8006a1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	61fb      	str	r3, [r7, #28]
 8006a1c:	e023      	b.n	8006a66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	4b15      	ldr	r3, [pc, #84]	; (8006a78 <xTaskCheckForTimeOut+0xc0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d007      	beq.n	8006a3a <xTaskCheckForTimeOut+0x82>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d302      	bcc.n	8006a3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a34:	2301      	movs	r3, #1
 8006a36:	61fb      	str	r3, [r7, #28]
 8006a38:	e015      	b.n	8006a66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d20b      	bcs.n	8006a5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	1ad2      	subs	r2, r2, r3
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff ff9b 	bl	800698c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a56:	2300      	movs	r3, #0
 8006a58:	61fb      	str	r3, [r7, #28]
 8006a5a:	e004      	b.n	8006a66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a62:	2301      	movs	r3, #1
 8006a64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a66:	f001 f8a5 	bl	8007bb4 <vPortExitCritical>

	return xReturn;
 8006a6a:	69fb      	ldr	r3, [r7, #28]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3720      	adds	r7, #32
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	20000e08 	.word	0x20000e08
 8006a78:	20000e1c 	.word	0x20000e1c

08006a7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a80:	4b03      	ldr	r3, [pc, #12]	; (8006a90 <vTaskMissedYield+0x14>)
 8006a82:	2201      	movs	r2, #1
 8006a84:	601a      	str	r2, [r3, #0]
}
 8006a86:	bf00      	nop
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	20000e18 	.word	0x20000e18

08006a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a9c:	f000 f852 	bl	8006b44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006aa0:	4b06      	ldr	r3, [pc, #24]	; (8006abc <prvIdleTask+0x28>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d9f9      	bls.n	8006a9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <prvIdleTask+0x2c>)
 8006aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ab8:	e7f0      	b.n	8006a9c <prvIdleTask+0x8>
 8006aba:	bf00      	nop
 8006abc:	20000d08 	.word	0x20000d08
 8006ac0:	e000ed04 	.word	0xe000ed04

08006ac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006aca:	2300      	movs	r3, #0
 8006acc:	607b      	str	r3, [r7, #4]
 8006ace:	e00c      	b.n	8006aea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4a12      	ldr	r2, [pc, #72]	; (8006b24 <prvInitialiseTaskLists+0x60>)
 8006adc:	4413      	add	r3, r2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe fc20 	bl	8005324 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	607b      	str	r3, [r7, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b06      	cmp	r3, #6
 8006aee:	d9ef      	bls.n	8006ad0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006af0:	480d      	ldr	r0, [pc, #52]	; (8006b28 <prvInitialiseTaskLists+0x64>)
 8006af2:	f7fe fc17 	bl	8005324 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006af6:	480d      	ldr	r0, [pc, #52]	; (8006b2c <prvInitialiseTaskLists+0x68>)
 8006af8:	f7fe fc14 	bl	8005324 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006afc:	480c      	ldr	r0, [pc, #48]	; (8006b30 <prvInitialiseTaskLists+0x6c>)
 8006afe:	f7fe fc11 	bl	8005324 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b02:	480c      	ldr	r0, [pc, #48]	; (8006b34 <prvInitialiseTaskLists+0x70>)
 8006b04:	f7fe fc0e 	bl	8005324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b08:	480b      	ldr	r0, [pc, #44]	; (8006b38 <prvInitialiseTaskLists+0x74>)
 8006b0a:	f7fe fc0b 	bl	8005324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b0e:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <prvInitialiseTaskLists+0x78>)
 8006b10:	4a05      	ldr	r2, [pc, #20]	; (8006b28 <prvInitialiseTaskLists+0x64>)
 8006b12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b14:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <prvInitialiseTaskLists+0x7c>)
 8006b16:	4a05      	ldr	r2, [pc, #20]	; (8006b2c <prvInitialiseTaskLists+0x68>)
 8006b18:	601a      	str	r2, [r3, #0]
}
 8006b1a:	bf00      	nop
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20000d08 	.word	0x20000d08
 8006b28:	20000d94 	.word	0x20000d94
 8006b2c:	20000da8 	.word	0x20000da8
 8006b30:	20000dc4 	.word	0x20000dc4
 8006b34:	20000dd8 	.word	0x20000dd8
 8006b38:	20000df0 	.word	0x20000df0
 8006b3c:	20000dbc 	.word	0x20000dbc
 8006b40:	20000dc0 	.word	0x20000dc0

08006b44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b4a:	e019      	b.n	8006b80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b4c:	f001 f802 	bl	8007b54 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b50:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <prvCheckTasksWaitingTermination+0x50>)
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe fc6b 	bl	8005438 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b62:	4b0d      	ldr	r3, [pc, #52]	; (8006b98 <prvCheckTasksWaitingTermination+0x54>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	4a0b      	ldr	r2, [pc, #44]	; (8006b98 <prvCheckTasksWaitingTermination+0x54>)
 8006b6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <prvCheckTasksWaitingTermination+0x58>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	4a0a      	ldr	r2, [pc, #40]	; (8006b9c <prvCheckTasksWaitingTermination+0x58>)
 8006b74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b76:	f001 f81d 	bl	8007bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f810 	bl	8006ba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b80:	4b06      	ldr	r3, [pc, #24]	; (8006b9c <prvCheckTasksWaitingTermination+0x58>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e1      	bne.n	8006b4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000dd8 	.word	0x20000dd8
 8006b98:	20000e04 	.word	0x20000e04
 8006b9c:	20000dec 	.word	0x20000dec

08006ba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	334c      	adds	r3, #76	; 0x4c
 8006bac:	4618      	mov	r0, r3
 8006bae:	f001 fb17 	bl	80081e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d108      	bne.n	8006bce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 f9ad 	bl	8007f20 <vPortFree>
				vPortFree( pxTCB );
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f001 f9aa 	bl	8007f20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006bcc:	e018      	b.n	8006c00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d103      	bne.n	8006be0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 f9a1 	bl	8007f20 <vPortFree>
	}
 8006bde:	e00f      	b.n	8006c00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d00a      	beq.n	8006c00 <prvDeleteTCB+0x60>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	60fb      	str	r3, [r7, #12]
}
 8006bfc:	bf00      	nop
 8006bfe:	e7fe      	b.n	8006bfe <prvDeleteTCB+0x5e>
	}
 8006c00:	bf00      	nop
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c0e:	4b0f      	ldr	r3, [pc, #60]	; (8006c4c <prvResetNextTaskUnblockTime+0x44>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <prvResetNextTaskUnblockTime+0x14>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e000      	b.n	8006c1e <prvResetNextTaskUnblockTime+0x16>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d004      	beq.n	8006c2c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c22:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <prvResetNextTaskUnblockTime+0x48>)
 8006c24:	f04f 32ff 	mov.w	r2, #4294967295
 8006c28:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c2a:	e008      	b.n	8006c3e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c2c:	4b07      	ldr	r3, [pc, #28]	; (8006c4c <prvResetNextTaskUnblockTime+0x44>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	4a05      	ldr	r2, [pc, #20]	; (8006c50 <prvResetNextTaskUnblockTime+0x48>)
 8006c3c:	6013      	str	r3, [r2, #0]
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	20000dbc 	.word	0x20000dbc
 8006c50:	20000e24 	.word	0x20000e24

08006c54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c5a:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <xTaskGetSchedulerState+0x34>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d102      	bne.n	8006c68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c62:	2301      	movs	r3, #1
 8006c64:	607b      	str	r3, [r7, #4]
 8006c66:	e008      	b.n	8006c7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c68:	4b08      	ldr	r3, [pc, #32]	; (8006c8c <xTaskGetSchedulerState+0x38>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d102      	bne.n	8006c76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c70:	2302      	movs	r3, #2
 8006c72:	607b      	str	r3, [r7, #4]
 8006c74:	e001      	b.n	8006c7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c76:	2300      	movs	r3, #0
 8006c78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c7a:	687b      	ldr	r3, [r7, #4]
	}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	20000e10 	.word	0x20000e10
 8006c8c:	20000e2c 	.word	0x20000e2c

08006c90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d06e      	beq.n	8006d84 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ca6:	4b3a      	ldr	r3, [pc, #232]	; (8006d90 <xTaskPriorityDisinherit+0x100>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d00a      	beq.n	8006cc6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	60fb      	str	r3, [r7, #12]
}
 8006cc2:	bf00      	nop
 8006cc4:	e7fe      	b.n	8006cc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10a      	bne.n	8006ce4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	60bb      	str	r3, [r7, #8]
}
 8006ce0:	bf00      	nop
 8006ce2:	e7fe      	b.n	8006ce2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce8:	1e5a      	subs	r2, r3, #1
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d044      	beq.n	8006d84 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d140      	bne.n	8006d84 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe fb96 	bl	8005438 <uxListRemove>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d115      	bne.n	8006d3e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d16:	491f      	ldr	r1, [pc, #124]	; (8006d94 <xTaskPriorityDisinherit+0x104>)
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	440b      	add	r3, r1
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10a      	bne.n	8006d3e <xTaskPriorityDisinherit+0xae>
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d32:	43da      	mvns	r2, r3
 8006d34:	4b18      	ldr	r3, [pc, #96]	; (8006d98 <xTaskPriorityDisinherit+0x108>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4013      	ands	r3, r2
 8006d3a:	4a17      	ldr	r2, [pc, #92]	; (8006d98 <xTaskPriorityDisinherit+0x108>)
 8006d3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	f1c3 0207 	rsb	r2, r3, #7
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d56:	2201      	movs	r2, #1
 8006d58:	409a      	lsls	r2, r3
 8006d5a:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <xTaskPriorityDisinherit+0x108>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	4a0d      	ldr	r2, [pc, #52]	; (8006d98 <xTaskPriorityDisinherit+0x108>)
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4a08      	ldr	r2, [pc, #32]	; (8006d94 <xTaskPriorityDisinherit+0x104>)
 8006d72:	441a      	add	r2, r3
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	3304      	adds	r3, #4
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	f7fe faff 	bl	800537e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d80:	2301      	movs	r3, #1
 8006d82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d84:	697b      	ldr	r3, [r7, #20]
	}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	20000d04 	.word	0x20000d04
 8006d94:	20000d08 	.word	0x20000d08
 8006d98:	20000e0c 	.word	0x20000e0c

08006d9c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006daa:	f000 fed3 	bl	8007b54 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006dae:	4b29      	ldr	r3, [pc, #164]	; (8006e54 <xTaskNotifyWait+0xb8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d01c      	beq.n	8006df6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006dbc:	4b25      	ldr	r3, [pc, #148]	; (8006e54 <xTaskNotifyWait+0xb8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	43d2      	mvns	r2, r2
 8006dc8:	400a      	ands	r2, r1
 8006dca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006dce:	4b21      	ldr	r3, [pc, #132]	; (8006e54 <xTaskNotifyWait+0xb8>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00b      	beq.n	8006df6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006dde:	2101      	movs	r1, #1
 8006de0:	6838      	ldr	r0, [r7, #0]
 8006de2:	f000 f9b5 	bl	8007150 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006de6:	4b1c      	ldr	r3, [pc, #112]	; (8006e58 <xTaskNotifyWait+0xbc>)
 8006de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006df6:	f000 fedd 	bl	8007bb4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006dfa:	f000 feab 	bl	8007b54 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d005      	beq.n	8006e10 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006e04:	4b13      	ldr	r3, [pc, #76]	; (8006e54 <xTaskNotifyWait+0xb8>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006e10:	4b10      	ldr	r3, [pc, #64]	; (8006e54 <xTaskNotifyWait+0xb8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d002      	beq.n	8006e24 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	617b      	str	r3, [r7, #20]
 8006e22:	e00a      	b.n	8006e3a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006e24:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <xTaskNotifyWait+0xb8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	43d2      	mvns	r2, r2
 8006e30:	400a      	ands	r2, r1
 8006e32:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8006e36:	2301      	movs	r3, #1
 8006e38:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e3a:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <xTaskNotifyWait+0xb8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8006e44:	f000 feb6 	bl	8007bb4 <vPortExitCritical>

		return xReturn;
 8006e48:	697b      	ldr	r3, [r7, #20]
	}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20000d04 	.word	0x20000d04
 8006e58:	e000ed04 	.word	0xe000ed04

08006e5c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08a      	sub	sp, #40	; 0x28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10a      	bne.n	8006e8c <xTaskGenericNotify+0x30>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	61bb      	str	r3, [r7, #24]
}
 8006e88:	bf00      	nop
 8006e8a:	e7fe      	b.n	8006e8a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006e90:	f000 fe60 	bl	8007b54 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d004      	beq.n	8006ea4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006eaa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d82d      	bhi.n	8006f16 <xTaskGenericNotify+0xba>
 8006eba:	a201      	add	r2, pc, #4	; (adr r2, 8006ec0 <xTaskGenericNotify+0x64>)
 8006ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec0:	08006f17 	.word	0x08006f17
 8006ec4:	08006ed5 	.word	0x08006ed5
 8006ec8:	08006ee7 	.word	0x08006ee7
 8006ecc:	08006ef7 	.word	0x08006ef7
 8006ed0:	08006f01 	.word	0x08006f01
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	431a      	orrs	r2, r3
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006ee4:	e017      	b.n	8006f16 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006ef4:	e00f      	b.n	8006f16 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006efe:	e00a      	b.n	8006f16 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006f00:	7ffb      	ldrb	r3, [r7, #31]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d004      	beq.n	8006f10 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006f0e:	e001      	b.n	8006f14 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006f14:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006f16:	7ffb      	ldrb	r3, [r7, #31]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d139      	bne.n	8006f90 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fe fa89 	bl	8005438 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	409a      	lsls	r2, r3
 8006f2e:	4b1c      	ldr	r3, [pc, #112]	; (8006fa0 <xTaskGenericNotify+0x144>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	4a1a      	ldr	r2, [pc, #104]	; (8006fa0 <xTaskGenericNotify+0x144>)
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4a17      	ldr	r2, [pc, #92]	; (8006fa4 <xTaskGenericNotify+0x148>)
 8006f46:	441a      	add	r2, r3
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4610      	mov	r0, r2
 8006f50:	f7fe fa15 	bl	800537e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00a      	beq.n	8006f72 <xTaskGenericNotify+0x116>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	617b      	str	r3, [r7, #20]
}
 8006f6e:	bf00      	nop
 8006f70:	e7fe      	b.n	8006f70 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f76:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <xTaskGenericNotify+0x14c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d907      	bls.n	8006f90 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006f80:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <xTaskGenericNotify+0x150>)
 8006f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006f90:	f000 fe10 	bl	8007bb4 <vPortExitCritical>

		return xReturn;
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3728      	adds	r7, #40	; 0x28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000e0c 	.word	0x20000e0c
 8006fa4:	20000d08 	.word	0x20000d08
 8006fa8:	20000d04 	.word	0x20000d04
 8006fac:	e000ed04 	.word	0xe000ed04

08006fb0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08e      	sub	sp, #56	; 0x38
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fdc:	bf00      	nop
 8006fde:	e7fe      	b.n	8006fde <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fe0:	f000 fe9a 	bl	8007d18 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8006fe8:	f3ef 8211 	mrs	r2, BASEPRI
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	623a      	str	r2, [r7, #32]
 8006ffe:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007000:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007016:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800701a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	2202      	movs	r2, #2
 8007022:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8007026:	79fb      	ldrb	r3, [r7, #7]
 8007028:	2b04      	cmp	r3, #4
 800702a:	d82f      	bhi.n	800708c <xTaskGenericNotifyFromISR+0xdc>
 800702c:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <xTaskGenericNotifyFromISR+0x84>)
 800702e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007032:	bf00      	nop
 8007034:	0800708d 	.word	0x0800708d
 8007038:	08007049 	.word	0x08007049
 800703c:	0800705b 	.word	0x0800705b
 8007040:	0800706b 	.word	0x0800706b
 8007044:	08007075 	.word	0x08007075
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	431a      	orrs	r2, r3
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8007058:	e018      	b.n	800708c <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8007068:	e010      	b.n	800708c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8007072:	e00b      	b.n	800708c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007074:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007078:	2b02      	cmp	r3, #2
 800707a:	d004      	beq.n	8007086 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007084:	e001      	b.n	800708a <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 8007086:	2300      	movs	r3, #0
 8007088:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800708a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800708c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007090:	2b01      	cmp	r3, #1
 8007092:	d146      	bne.n	8007122 <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	61bb      	str	r3, [r7, #24]
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070b2:	4b21      	ldr	r3, [pc, #132]	; (8007138 <xTaskGenericNotifyFromISR+0x188>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d11c      	bne.n	80070f4 <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	3304      	adds	r3, #4
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe f9ba 	bl	8005438 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	2201      	movs	r2, #1
 80070ca:	409a      	lsls	r2, r3
 80070cc:	4b1b      	ldr	r3, [pc, #108]	; (800713c <xTaskGenericNotifyFromISR+0x18c>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	4a1a      	ldr	r2, [pc, #104]	; (800713c <xTaskGenericNotifyFromISR+0x18c>)
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4a17      	ldr	r2, [pc, #92]	; (8007140 <xTaskGenericNotifyFromISR+0x190>)
 80070e4:	441a      	add	r2, r3
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	3304      	adds	r3, #4
 80070ea:	4619      	mov	r1, r3
 80070ec:	4610      	mov	r0, r2
 80070ee:	f7fe f946 	bl	800537e <vListInsertEnd>
 80070f2:	e005      	b.n	8007100 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	3318      	adds	r3, #24
 80070f8:	4619      	mov	r1, r3
 80070fa:	4812      	ldr	r0, [pc, #72]	; (8007144 <xTaskGenericNotifyFromISR+0x194>)
 80070fc:	f7fe f93f 	bl	800537e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007104:	4b10      	ldr	r3, [pc, #64]	; (8007148 <xTaskGenericNotifyFromISR+0x198>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	429a      	cmp	r2, r3
 800710c:	d909      	bls.n	8007122 <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800710e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007116:	2201      	movs	r2, #1
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	e002      	b.n	8007122 <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800711c:	4b0b      	ldr	r3, [pc, #44]	; (800714c <xTaskGenericNotifyFromISR+0x19c>)
 800711e:	2201      	movs	r2, #1
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007124:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f383 8811 	msr	BASEPRI, r3
}
 800712c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800712e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007130:	4618      	mov	r0, r3
 8007132:	3738      	adds	r7, #56	; 0x38
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	20000e2c 	.word	0x20000e2c
 800713c:	20000e0c 	.word	0x20000e0c
 8007140:	20000d08 	.word	0x20000d08
 8007144:	20000dc4 	.word	0x20000dc4
 8007148:	20000d04 	.word	0x20000d04
 800714c:	20000e18 	.word	0x20000e18

08007150 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800715a:	4b29      	ldr	r3, [pc, #164]	; (8007200 <prvAddCurrentTaskToDelayedList+0xb0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007160:	4b28      	ldr	r3, [pc, #160]	; (8007204 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3304      	adds	r3, #4
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe f966 	bl	8005438 <uxListRemove>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10b      	bne.n	800718a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007172:	4b24      	ldr	r3, [pc, #144]	; (8007204 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	2201      	movs	r2, #1
 800717a:	fa02 f303 	lsl.w	r3, r2, r3
 800717e:	43da      	mvns	r2, r3
 8007180:	4b21      	ldr	r3, [pc, #132]	; (8007208 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4013      	ands	r3, r2
 8007186:	4a20      	ldr	r2, [pc, #128]	; (8007208 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007188:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007190:	d10a      	bne.n	80071a8 <prvAddCurrentTaskToDelayedList+0x58>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d007      	beq.n	80071a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007198:	4b1a      	ldr	r3, [pc, #104]	; (8007204 <prvAddCurrentTaskToDelayedList+0xb4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3304      	adds	r3, #4
 800719e:	4619      	mov	r1, r3
 80071a0:	481a      	ldr	r0, [pc, #104]	; (800720c <prvAddCurrentTaskToDelayedList+0xbc>)
 80071a2:	f7fe f8ec 	bl	800537e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071a6:	e026      	b.n	80071f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4413      	add	r3, r2
 80071ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071b0:	4b14      	ldr	r3, [pc, #80]	; (8007204 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d209      	bcs.n	80071d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071c0:	4b13      	ldr	r3, [pc, #76]	; (8007210 <prvAddCurrentTaskToDelayedList+0xc0>)
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3304      	adds	r3, #4
 80071ca:	4619      	mov	r1, r3
 80071cc:	4610      	mov	r0, r2
 80071ce:	f7fe f8fa 	bl	80053c6 <vListInsert>
}
 80071d2:	e010      	b.n	80071f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071d4:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <prvAddCurrentTaskToDelayedList+0xc4>)
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3304      	adds	r3, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f7fe f8f0 	bl	80053c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80071e6:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <prvAddCurrentTaskToDelayedList+0xc8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d202      	bcs.n	80071f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80071f0:	4a09      	ldr	r2, [pc, #36]	; (8007218 <prvAddCurrentTaskToDelayedList+0xc8>)
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	6013      	str	r3, [r2, #0]
}
 80071f6:	bf00      	nop
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	20000e08 	.word	0x20000e08
 8007204:	20000d04 	.word	0x20000d04
 8007208:	20000e0c 	.word	0x20000e0c
 800720c:	20000df0 	.word	0x20000df0
 8007210:	20000dc0 	.word	0x20000dc0
 8007214:	20000dbc 	.word	0x20000dbc
 8007218:	20000e24 	.word	0x20000e24

0800721c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08a      	sub	sp, #40	; 0x28
 8007220:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007226:	f000 fb05 	bl	8007834 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800722a:	4b1c      	ldr	r3, [pc, #112]	; (800729c <xTimerCreateTimerTask+0x80>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d021      	beq.n	8007276 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800723a:	1d3a      	adds	r2, r7, #4
 800723c:	f107 0108 	add.w	r1, r7, #8
 8007240:	f107 030c 	add.w	r3, r7, #12
 8007244:	4618      	mov	r0, r3
 8007246:	f7f8 ffef 	bl	8000228 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800724a:	6879      	ldr	r1, [r7, #4]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	9202      	str	r2, [sp, #8]
 8007252:	9301      	str	r3, [sp, #4]
 8007254:	2302      	movs	r3, #2
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	2300      	movs	r3, #0
 800725a:	460a      	mov	r2, r1
 800725c:	4910      	ldr	r1, [pc, #64]	; (80072a0 <xTimerCreateTimerTask+0x84>)
 800725e:	4811      	ldr	r0, [pc, #68]	; (80072a4 <xTimerCreateTimerTask+0x88>)
 8007260:	f7fe fef6 	bl	8006050 <xTaskCreateStatic>
 8007264:	4603      	mov	r3, r0
 8007266:	4a10      	ldr	r2, [pc, #64]	; (80072a8 <xTimerCreateTimerTask+0x8c>)
 8007268:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800726a:	4b0f      	ldr	r3, [pc, #60]	; (80072a8 <xTimerCreateTimerTask+0x8c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007272:	2301      	movs	r3, #1
 8007274:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	613b      	str	r3, [r7, #16]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007292:	697b      	ldr	r3, [r7, #20]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	20000e60 	.word	0x20000e60
 80072a0:	080084f4 	.word	0x080084f4
 80072a4:	08007471 	.word	0x08007471
 80072a8:	20000e64 	.word	0x20000e64

080072ac <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b088      	sub	sp, #32
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80072ba:	202c      	movs	r0, #44	; 0x2c
 80072bc:	f000 fd6c 	bl	8007d98 <pvPortMalloc>
 80072c0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00d      	beq.n	80072e4 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	9301      	str	r3, [sp, #4]
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f809 	bl	80072ee <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80072e4:	697b      	ldr	r3, [r7, #20]
	}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b086      	sub	sp, #24
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10a      	bne.n	8007318 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	617b      	str	r3, [r7, #20]
}
 8007314:	bf00      	nop
 8007316:	e7fe      	b.n	8007316 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	2b00      	cmp	r3, #0
 800731c:	d015      	beq.n	800734a <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800731e:	f000 fa89 	bl	8007834 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	6a3a      	ldr	r2, [r7, #32]
 800733e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	3304      	adds	r3, #4
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe f80d 	bl	8005364 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800734a:	bf00      	nop
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08a      	sub	sp, #40	; 0x28
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007362:	2300      	movs	r3, #0
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <xTimerGenericCommand+0x2e>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	623b      	str	r3, [r7, #32]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007382:	4b1a      	ldr	r3, [pc, #104]	; (80073ec <xTimerGenericCommand+0x98>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d02a      	beq.n	80073e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b05      	cmp	r3, #5
 800739a:	dc18      	bgt.n	80073ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800739c:	f7ff fc5a 	bl	8006c54 <xTaskGetSchedulerState>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d109      	bne.n	80073ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073a6:	4b11      	ldr	r3, [pc, #68]	; (80073ec <xTimerGenericCommand+0x98>)
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	f107 0114 	add.w	r1, r7, #20
 80073ae:	2300      	movs	r3, #0
 80073b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b2:	f7fe f9a7 	bl	8005704 <xQueueGenericSend>
 80073b6:	6278      	str	r0, [r7, #36]	; 0x24
 80073b8:	e012      	b.n	80073e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073ba:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <xTimerGenericCommand+0x98>)
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	f107 0114 	add.w	r1, r7, #20
 80073c2:	2300      	movs	r3, #0
 80073c4:	2200      	movs	r2, #0
 80073c6:	f7fe f99d 	bl	8005704 <xQueueGenericSend>
 80073ca:	6278      	str	r0, [r7, #36]	; 0x24
 80073cc:	e008      	b.n	80073e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073ce:	4b07      	ldr	r3, [pc, #28]	; (80073ec <xTimerGenericCommand+0x98>)
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	f107 0114 	add.w	r1, r7, #20
 80073d6:	2300      	movs	r3, #0
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	f7fe fa91 	bl	8005900 <xQueueGenericSendFromISR>
 80073de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3728      	adds	r7, #40	; 0x28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20000e60 	.word	0x20000e60

080073f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af02      	add	r7, sp, #8
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073fa:	4b1c      	ldr	r3, [pc, #112]	; (800746c <prvProcessExpiredTimer+0x7c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	3304      	adds	r3, #4
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe f815 	bl	8005438 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d122      	bne.n	800745c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	18d1      	adds	r1, r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	6978      	ldr	r0, [r7, #20]
 8007424:	f000 f8c8 	bl	80075b8 <prvInsertTimerInActiveList>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d016      	beq.n	800745c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800742e:	2300      	movs	r3, #0
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	2300      	movs	r3, #0
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	2100      	movs	r1, #0
 8007438:	6978      	ldr	r0, [r7, #20]
 800743a:	f7ff ff8b 	bl	8007354 <xTimerGenericCommand>
 800743e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10a      	bne.n	800745c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	60fb      	str	r3, [r7, #12]
}
 8007458:	bf00      	nop
 800745a:	e7fe      	b.n	800745a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	6978      	ldr	r0, [r7, #20]
 8007462:	4798      	blx	r3
}
 8007464:	bf00      	nop
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	20000e58 	.word	0x20000e58

08007470 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007478:	f107 0308 	add.w	r3, r7, #8
 800747c:	4618      	mov	r0, r3
 800747e:	f000 f857 	bl	8007530 <prvGetNextExpireTime>
 8007482:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	4619      	mov	r1, r3
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 f803 	bl	8007494 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800748e:	f000 f8d5 	bl	800763c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007492:	e7f1      	b.n	8007478 <prvTimerTask+0x8>

08007494 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800749e:	f7fe ffe9 	bl	8006474 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074a2:	f107 0308 	add.w	r3, r7, #8
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 f866 	bl	8007578 <prvSampleTimeNow>
 80074ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d130      	bne.n	8007516 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <prvProcessTimerOrBlockTask+0x3c>
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d806      	bhi.n	80074d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80074c2:	f7fe ffe5 	bl	8006490 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074c6:	68f9      	ldr	r1, [r7, #12]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff ff91 	bl	80073f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80074ce:	e024      	b.n	800751a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d008      	beq.n	80074e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074d6:	4b13      	ldr	r3, [pc, #76]	; (8007524 <prvProcessTimerOrBlockTask+0x90>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	bf0c      	ite	eq
 80074e0:	2301      	moveq	r3, #1
 80074e2:	2300      	movne	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074e8:	4b0f      	ldr	r3, [pc, #60]	; (8007528 <prvProcessTimerOrBlockTask+0x94>)
 80074ea:	6818      	ldr	r0, [r3, #0]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	4619      	mov	r1, r3
 80074f6:	f7fe fd77 	bl	8005fe8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80074fa:	f7fe ffc9 	bl	8006490 <xTaskResumeAll>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10a      	bne.n	800751a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007504:	4b09      	ldr	r3, [pc, #36]	; (800752c <prvProcessTimerOrBlockTask+0x98>)
 8007506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	f3bf 8f6f 	isb	sy
}
 8007514:	e001      	b.n	800751a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007516:	f7fe ffbb 	bl	8006490 <xTaskResumeAll>
}
 800751a:	bf00      	nop
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20000e5c 	.word	0x20000e5c
 8007528:	20000e60 	.word	0x20000e60
 800752c:	e000ed04 	.word	0xe000ed04

08007530 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007538:	4b0e      	ldr	r3, [pc, #56]	; (8007574 <prvGetNextExpireTime+0x44>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	bf0c      	ite	eq
 8007542:	2301      	moveq	r3, #1
 8007544:	2300      	movne	r3, #0
 8007546:	b2db      	uxtb	r3, r3
 8007548:	461a      	mov	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d105      	bne.n	8007562 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007556:	4b07      	ldr	r3, [pc, #28]	; (8007574 <prvGetNextExpireTime+0x44>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	e001      	b.n	8007566 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007566:	68fb      	ldr	r3, [r7, #12]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	20000e58 	.word	0x20000e58

08007578 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007580:	f7ff f822 	bl	80065c8 <xTaskGetTickCount>
 8007584:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007586:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <prvSampleTimeNow+0x3c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	429a      	cmp	r2, r3
 800758e:	d205      	bcs.n	800759c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007590:	f000 f8ee 	bl	8007770 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	e002      	b.n	80075a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075a2:	4a04      	ldr	r2, [pc, #16]	; (80075b4 <prvSampleTimeNow+0x3c>)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075a8:	68fb      	ldr	r3, [r7, #12]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000e68 	.word	0x20000e68

080075b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d812      	bhi.n	8007604 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	1ad2      	subs	r2, r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d302      	bcc.n	80075f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80075ec:	2301      	movs	r3, #1
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	e01b      	b.n	800762a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80075f2:	4b10      	ldr	r3, [pc, #64]	; (8007634 <prvInsertTimerInActiveList+0x7c>)
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3304      	adds	r3, #4
 80075fa:	4619      	mov	r1, r3
 80075fc:	4610      	mov	r0, r2
 80075fe:	f7fd fee2 	bl	80053c6 <vListInsert>
 8007602:	e012      	b.n	800762a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	429a      	cmp	r2, r3
 800760a:	d206      	bcs.n	800761a <prvInsertTimerInActiveList+0x62>
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	429a      	cmp	r2, r3
 8007612:	d302      	bcc.n	800761a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007614:	2301      	movs	r3, #1
 8007616:	617b      	str	r3, [r7, #20]
 8007618:	e007      	b.n	800762a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800761a:	4b07      	ldr	r3, [pc, #28]	; (8007638 <prvInsertTimerInActiveList+0x80>)
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3304      	adds	r3, #4
 8007622:	4619      	mov	r1, r3
 8007624:	4610      	mov	r0, r2
 8007626:	f7fd fece 	bl	80053c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800762a:	697b      	ldr	r3, [r7, #20]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20000e5c 	.word	0x20000e5c
 8007638:	20000e58 	.word	0x20000e58

0800763c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08c      	sub	sp, #48	; 0x30
 8007640:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007642:	e081      	b.n	8007748 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	db7d      	blt.n	8007746 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d004      	beq.n	8007660 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	3304      	adds	r3, #4
 800765a:	4618      	mov	r0, r3
 800765c:	f7fd feec 	bl	8005438 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007660:	1d3b      	adds	r3, r7, #4
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff ff88 	bl	8007578 <prvSampleTimeNow>
 8007668:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b09      	cmp	r3, #9
 800766e:	d86b      	bhi.n	8007748 <prvProcessReceivedCommands+0x10c>
 8007670:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <prvProcessReceivedCommands+0x3c>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	080076a1 	.word	0x080076a1
 800767c:	080076a1 	.word	0x080076a1
 8007680:	080076a1 	.word	0x080076a1
 8007684:	08007749 	.word	0x08007749
 8007688:	080076fd 	.word	0x080076fd
 800768c:	08007735 	.word	0x08007735
 8007690:	080076a1 	.word	0x080076a1
 8007694:	080076a1 	.word	0x080076a1
 8007698:	08007749 	.word	0x08007749
 800769c:	080076fd 	.word	0x080076fd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	18d1      	adds	r1, r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a3a      	ldr	r2, [r7, #32]
 80076ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076ae:	f7ff ff83 	bl	80075b8 <prvInsertTimerInActiveList>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d047      	beq.n	8007748 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d13f      	bne.n	8007748 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	441a      	add	r2, r3
 80076d0:	2300      	movs	r3, #0
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	2300      	movs	r3, #0
 80076d6:	2100      	movs	r1, #0
 80076d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076da:	f7ff fe3b 	bl	8007354 <xTimerGenericCommand>
 80076de:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d130      	bne.n	8007748 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	61bb      	str	r3, [r7, #24]
}
 80076f8:	bf00      	nop
 80076fa:	e7fe      	b.n	80076fa <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10a      	bne.n	8007720 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	617b      	str	r3, [r7, #20]
}
 800771c:	bf00      	nop
 800771e:	e7fe      	b.n	800771e <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	699a      	ldr	r2, [r3, #24]
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	18d1      	adds	r1, r2, r3
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	6a3a      	ldr	r2, [r7, #32]
 800772c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800772e:	f7ff ff43 	bl	80075b8 <prvInsertTimerInActiveList>
					break;
 8007732:	e009      	b.n	8007748 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800773a:	2b00      	cmp	r3, #0
 800773c:	d104      	bne.n	8007748 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800773e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007740:	f000 fbee 	bl	8007f20 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007744:	e000      	b.n	8007748 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007746:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007748:	4b08      	ldr	r3, [pc, #32]	; (800776c <prvProcessReceivedCommands+0x130>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f107 0108 	add.w	r1, r7, #8
 8007750:	2200      	movs	r2, #0
 8007752:	4618      	mov	r0, r3
 8007754:	f7fe f96c 	bl	8005a30 <xQueueReceive>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	f47f af72 	bne.w	8007644 <prvProcessReceivedCommands+0x8>
	}
}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	3728      	adds	r7, #40	; 0x28
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20000e60 	.word	0x20000e60

08007770 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b088      	sub	sp, #32
 8007774:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007776:	e045      	b.n	8007804 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007778:	4b2c      	ldr	r3, [pc, #176]	; (800782c <prvSwitchTimerLists+0xbc>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007782:	4b2a      	ldr	r3, [pc, #168]	; (800782c <prvSwitchTimerLists+0xbc>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3304      	adds	r3, #4
 8007790:	4618      	mov	r0, r3
 8007792:	f7fd fe51 	bl	8005438 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d12e      	bne.n	8007804 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4413      	add	r3, r2
 80077ae:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d90e      	bls.n	80077d6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077c4:	4b19      	ldr	r3, [pc, #100]	; (800782c <prvSwitchTimerLists+0xbc>)
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3304      	adds	r3, #4
 80077cc:	4619      	mov	r1, r3
 80077ce:	4610      	mov	r0, r2
 80077d0:	f7fd fdf9 	bl	80053c6 <vListInsert>
 80077d4:	e016      	b.n	8007804 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077d6:	2300      	movs	r3, #0
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	2300      	movs	r3, #0
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	2100      	movs	r1, #0
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f7ff fdb7 	bl	8007354 <xTimerGenericCommand>
 80077e6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10a      	bne.n	8007804 <prvSwitchTimerLists+0x94>
	__asm volatile
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	603b      	str	r3, [r7, #0]
}
 8007800:	bf00      	nop
 8007802:	e7fe      	b.n	8007802 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007804:	4b09      	ldr	r3, [pc, #36]	; (800782c <prvSwitchTimerLists+0xbc>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1b4      	bne.n	8007778 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800780e:	4b07      	ldr	r3, [pc, #28]	; (800782c <prvSwitchTimerLists+0xbc>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007814:	4b06      	ldr	r3, [pc, #24]	; (8007830 <prvSwitchTimerLists+0xc0>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a04      	ldr	r2, [pc, #16]	; (800782c <prvSwitchTimerLists+0xbc>)
 800781a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800781c:	4a04      	ldr	r2, [pc, #16]	; (8007830 <prvSwitchTimerLists+0xc0>)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	6013      	str	r3, [r2, #0]
}
 8007822:	bf00      	nop
 8007824:	3718      	adds	r7, #24
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20000e58 	.word	0x20000e58
 8007830:	20000e5c 	.word	0x20000e5c

08007834 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800783a:	f000 f98b 	bl	8007b54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800783e:	4b15      	ldr	r3, [pc, #84]	; (8007894 <prvCheckForValidListAndQueue+0x60>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d120      	bne.n	8007888 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007846:	4814      	ldr	r0, [pc, #80]	; (8007898 <prvCheckForValidListAndQueue+0x64>)
 8007848:	f7fd fd6c 	bl	8005324 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800784c:	4813      	ldr	r0, [pc, #76]	; (800789c <prvCheckForValidListAndQueue+0x68>)
 800784e:	f7fd fd69 	bl	8005324 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007852:	4b13      	ldr	r3, [pc, #76]	; (80078a0 <prvCheckForValidListAndQueue+0x6c>)
 8007854:	4a10      	ldr	r2, [pc, #64]	; (8007898 <prvCheckForValidListAndQueue+0x64>)
 8007856:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007858:	4b12      	ldr	r3, [pc, #72]	; (80078a4 <prvCheckForValidListAndQueue+0x70>)
 800785a:	4a10      	ldr	r2, [pc, #64]	; (800789c <prvCheckForValidListAndQueue+0x68>)
 800785c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800785e:	2300      	movs	r3, #0
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	4b11      	ldr	r3, [pc, #68]	; (80078a8 <prvCheckForValidListAndQueue+0x74>)
 8007864:	4a11      	ldr	r2, [pc, #68]	; (80078ac <prvCheckForValidListAndQueue+0x78>)
 8007866:	210c      	movs	r1, #12
 8007868:	200a      	movs	r0, #10
 800786a:	f7fd fe77 	bl	800555c <xQueueGenericCreateStatic>
 800786e:	4603      	mov	r3, r0
 8007870:	4a08      	ldr	r2, [pc, #32]	; (8007894 <prvCheckForValidListAndQueue+0x60>)
 8007872:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007874:	4b07      	ldr	r3, [pc, #28]	; (8007894 <prvCheckForValidListAndQueue+0x60>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d005      	beq.n	8007888 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800787c:	4b05      	ldr	r3, [pc, #20]	; (8007894 <prvCheckForValidListAndQueue+0x60>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	490b      	ldr	r1, [pc, #44]	; (80078b0 <prvCheckForValidListAndQueue+0x7c>)
 8007882:	4618      	mov	r0, r3
 8007884:	f7fe fb86 	bl	8005f94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007888:	f000 f994 	bl	8007bb4 <vPortExitCritical>
}
 800788c:	bf00      	nop
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20000e60 	.word	0x20000e60
 8007898:	20000e30 	.word	0x20000e30
 800789c:	20000e44 	.word	0x20000e44
 80078a0:	20000e58 	.word	0x20000e58
 80078a4:	20000e5c 	.word	0x20000e5c
 80078a8:	20000ee4 	.word	0x20000ee4
 80078ac:	20000e6c 	.word	0x20000e6c
 80078b0:	080084fc 	.word	0x080084fc

080078b4 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10a      	bne.n	80078dc <pvTimerGetTimerID+0x28>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	60fb      	str	r3, [r7, #12]
}
 80078d8:	bf00      	nop
 80078da:	e7fe      	b.n	80078da <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80078dc:	f000 f93a 	bl	8007b54 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80078e6:	f000 f965 	bl	8007bb4 <vPortExitCritical>

	return pvReturn;
 80078ea:	693b      	ldr	r3, [r7, #16]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3b04      	subs	r3, #4
 8007904:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800790c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3b04      	subs	r3, #4
 8007912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f023 0201 	bic.w	r2, r3, #1
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3b04      	subs	r3, #4
 8007922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007924:	4a0c      	ldr	r2, [pc, #48]	; (8007958 <pxPortInitialiseStack+0x64>)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3b14      	subs	r3, #20
 800792e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3b04      	subs	r3, #4
 800793a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f06f 0202 	mvn.w	r2, #2
 8007942:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3b20      	subs	r3, #32
 8007948:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800794a:	68fb      	ldr	r3, [r7, #12]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	0800795d 	.word	0x0800795d

0800795c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007962:	2300      	movs	r3, #0
 8007964:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007966:	4b12      	ldr	r3, [pc, #72]	; (80079b0 <prvTaskExitError+0x54>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796e:	d00a      	beq.n	8007986 <prvTaskExitError+0x2a>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	60fb      	str	r3, [r7, #12]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <prvTaskExitError+0x28>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	60bb      	str	r3, [r7, #8]
}
 8007998:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800799a:	bf00      	nop
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0fc      	beq.n	800799c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079a2:	bf00      	nop
 80079a4:	bf00      	nop
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	20000018 	.word	0x20000018
	...

080079c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079c0:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <pxCurrentTCBConst2>)
 80079c2:	6819      	ldr	r1, [r3, #0]
 80079c4:	6808      	ldr	r0, [r1, #0]
 80079c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ca:	f380 8809 	msr	PSP, r0
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f04f 0000 	mov.w	r0, #0
 80079d6:	f380 8811 	msr	BASEPRI, r0
 80079da:	4770      	bx	lr
 80079dc:	f3af 8000 	nop.w

080079e0 <pxCurrentTCBConst2>:
 80079e0:	20000d04 	.word	0x20000d04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop

080079e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079e8:	4808      	ldr	r0, [pc, #32]	; (8007a0c <prvPortStartFirstTask+0x24>)
 80079ea:	6800      	ldr	r0, [r0, #0]
 80079ec:	6800      	ldr	r0, [r0, #0]
 80079ee:	f380 8808 	msr	MSP, r0
 80079f2:	f04f 0000 	mov.w	r0, #0
 80079f6:	f380 8814 	msr	CONTROL, r0
 80079fa:	b662      	cpsie	i
 80079fc:	b661      	cpsie	f
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	df00      	svc	0
 8007a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a0a:	bf00      	nop
 8007a0c:	e000ed08 	.word	0xe000ed08

08007a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a16:	4b46      	ldr	r3, [pc, #280]	; (8007b30 <xPortStartScheduler+0x120>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a46      	ldr	r2, [pc, #280]	; (8007b34 <xPortStartScheduler+0x124>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d10a      	bne.n	8007a36 <xPortStartScheduler+0x26>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	613b      	str	r3, [r7, #16]
}
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a36:	4b3e      	ldr	r3, [pc, #248]	; (8007b30 <xPortStartScheduler+0x120>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a3f      	ldr	r2, [pc, #252]	; (8007b38 <xPortStartScheduler+0x128>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d10a      	bne.n	8007a56 <xPortStartScheduler+0x46>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	60fb      	str	r3, [r7, #12]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a56:	4b39      	ldr	r3, [pc, #228]	; (8007b3c <xPortStartScheduler+0x12c>)
 8007a58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	22ff      	movs	r2, #255	; 0xff
 8007a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	4b31      	ldr	r3, [pc, #196]	; (8007b40 <xPortStartScheduler+0x130>)
 8007a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a7e:	4b31      	ldr	r3, [pc, #196]	; (8007b44 <xPortStartScheduler+0x134>)
 8007a80:	2207      	movs	r2, #7
 8007a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a84:	e009      	b.n	8007a9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a86:	4b2f      	ldr	r3, [pc, #188]	; (8007b44 <xPortStartScheduler+0x134>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	4a2d      	ldr	r2, [pc, #180]	; (8007b44 <xPortStartScheduler+0x134>)
 8007a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a9a:	78fb      	ldrb	r3, [r7, #3]
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa2:	2b80      	cmp	r3, #128	; 0x80
 8007aa4:	d0ef      	beq.n	8007a86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007aa6:	4b27      	ldr	r3, [pc, #156]	; (8007b44 <xPortStartScheduler+0x134>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f1c3 0307 	rsb	r3, r3, #7
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	d00a      	beq.n	8007ac8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	60bb      	str	r3, [r7, #8]
}
 8007ac4:	bf00      	nop
 8007ac6:	e7fe      	b.n	8007ac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ac8:	4b1e      	ldr	r3, [pc, #120]	; (8007b44 <xPortStartScheduler+0x134>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	021b      	lsls	r3, r3, #8
 8007ace:	4a1d      	ldr	r2, [pc, #116]	; (8007b44 <xPortStartScheduler+0x134>)
 8007ad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ad2:	4b1c      	ldr	r3, [pc, #112]	; (8007b44 <xPortStartScheduler+0x134>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ada:	4a1a      	ldr	r2, [pc, #104]	; (8007b44 <xPortStartScheduler+0x134>)
 8007adc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ae6:	4b18      	ldr	r3, [pc, #96]	; (8007b48 <xPortStartScheduler+0x138>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a17      	ldr	r2, [pc, #92]	; (8007b48 <xPortStartScheduler+0x138>)
 8007aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007af2:	4b15      	ldr	r3, [pc, #84]	; (8007b48 <xPortStartScheduler+0x138>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a14      	ldr	r2, [pc, #80]	; (8007b48 <xPortStartScheduler+0x138>)
 8007af8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007afc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007afe:	f000 f8dd 	bl	8007cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b02:	4b12      	ldr	r3, [pc, #72]	; (8007b4c <xPortStartScheduler+0x13c>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b08:	f000 f8fc 	bl	8007d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b0c:	4b10      	ldr	r3, [pc, #64]	; (8007b50 <xPortStartScheduler+0x140>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a0f      	ldr	r2, [pc, #60]	; (8007b50 <xPortStartScheduler+0x140>)
 8007b12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b18:	f7ff ff66 	bl	80079e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b1c:	f7fe fe22 	bl	8006764 <vTaskSwitchContext>
	prvTaskExitError();
 8007b20:	f7ff ff1c 	bl	800795c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	e000ed00 	.word	0xe000ed00
 8007b34:	410fc271 	.word	0x410fc271
 8007b38:	410fc270 	.word	0x410fc270
 8007b3c:	e000e400 	.word	0xe000e400
 8007b40:	20000f2c 	.word	0x20000f2c
 8007b44:	20000f30 	.word	0x20000f30
 8007b48:	e000ed20 	.word	0xe000ed20
 8007b4c:	20000018 	.word	0x20000018
 8007b50:	e000ef34 	.word	0xe000ef34

08007b54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	607b      	str	r3, [r7, #4]
}
 8007b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b6e:	4b0f      	ldr	r3, [pc, #60]	; (8007bac <vPortEnterCritical+0x58>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3301      	adds	r3, #1
 8007b74:	4a0d      	ldr	r2, [pc, #52]	; (8007bac <vPortEnterCritical+0x58>)
 8007b76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b78:	4b0c      	ldr	r3, [pc, #48]	; (8007bac <vPortEnterCritical+0x58>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d10f      	bne.n	8007ba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b80:	4b0b      	ldr	r3, [pc, #44]	; (8007bb0 <vPortEnterCritical+0x5c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	603b      	str	r3, [r7, #0]
}
 8007b9c:	bf00      	nop
 8007b9e:	e7fe      	b.n	8007b9e <vPortEnterCritical+0x4a>
	}
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	20000018 	.word	0x20000018
 8007bb0:	e000ed04 	.word	0xe000ed04

08007bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bba:	4b12      	ldr	r3, [pc, #72]	; (8007c04 <vPortExitCritical+0x50>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10a      	bne.n	8007bd8 <vPortExitCritical+0x24>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	607b      	str	r3, [r7, #4]
}
 8007bd4:	bf00      	nop
 8007bd6:	e7fe      	b.n	8007bd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007bd8:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <vPortExitCritical+0x50>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	4a09      	ldr	r2, [pc, #36]	; (8007c04 <vPortExitCritical+0x50>)
 8007be0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007be2:	4b08      	ldr	r3, [pc, #32]	; (8007c04 <vPortExitCritical+0x50>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d105      	bne.n	8007bf6 <vPortExitCritical+0x42>
 8007bea:	2300      	movs	r3, #0
 8007bec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	f383 8811 	msr	BASEPRI, r3
}
 8007bf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	20000018 	.word	0x20000018
	...

08007c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c10:	f3ef 8009 	mrs	r0, PSP
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	4b15      	ldr	r3, [pc, #84]	; (8007c70 <pxCurrentTCBConst>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	f01e 0f10 	tst.w	lr, #16
 8007c20:	bf08      	it	eq
 8007c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2a:	6010      	str	r0, [r2, #0]
 8007c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c34:	f380 8811 	msr	BASEPRI, r0
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f7fe fd90 	bl	8006764 <vTaskSwitchContext>
 8007c44:	f04f 0000 	mov.w	r0, #0
 8007c48:	f380 8811 	msr	BASEPRI, r0
 8007c4c:	bc09      	pop	{r0, r3}
 8007c4e:	6819      	ldr	r1, [r3, #0]
 8007c50:	6808      	ldr	r0, [r1, #0]
 8007c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c56:	f01e 0f10 	tst.w	lr, #16
 8007c5a:	bf08      	it	eq
 8007c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c60:	f380 8809 	msr	PSP, r0
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	f3af 8000 	nop.w

08007c70 <pxCurrentTCBConst>:
 8007c70:	20000d04 	.word	0x20000d04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop

08007c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	607b      	str	r3, [r7, #4]
}
 8007c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c92:	f7fe fca9 	bl	80065e8 <xTaskIncrementTick>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c9c:	4b06      	ldr	r3, [pc, #24]	; (8007cb8 <SysTick_Handler+0x40>)
 8007c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f383 8811 	msr	BASEPRI, r3
}
 8007cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	e000ed04 	.word	0xe000ed04

08007cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <vPortSetupTimerInterrupt+0x34>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cc6:	4b0b      	ldr	r3, [pc, #44]	; (8007cf4 <vPortSetupTimerInterrupt+0x38>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ccc:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <vPortSetupTimerInterrupt+0x3c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a0a      	ldr	r2, [pc, #40]	; (8007cfc <vPortSetupTimerInterrupt+0x40>)
 8007cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd6:	099b      	lsrs	r3, r3, #6
 8007cd8:	4a09      	ldr	r2, [pc, #36]	; (8007d00 <vPortSetupTimerInterrupt+0x44>)
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cde:	4b04      	ldr	r3, [pc, #16]	; (8007cf0 <vPortSetupTimerInterrupt+0x34>)
 8007ce0:	2207      	movs	r2, #7
 8007ce2:	601a      	str	r2, [r3, #0]
}
 8007ce4:	bf00      	nop
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	e000e010 	.word	0xe000e010
 8007cf4:	e000e018 	.word	0xe000e018
 8007cf8:	20000008 	.word	0x20000008
 8007cfc:	10624dd3 	.word	0x10624dd3
 8007d00:	e000e014 	.word	0xe000e014

08007d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d14 <vPortEnableVFP+0x10>
 8007d08:	6801      	ldr	r1, [r0, #0]
 8007d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d0e:	6001      	str	r1, [r0, #0]
 8007d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d12:	bf00      	nop
 8007d14:	e000ed88 	.word	0xe000ed88

08007d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d1e:	f3ef 8305 	mrs	r3, IPSR
 8007d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b0f      	cmp	r3, #15
 8007d28:	d914      	bls.n	8007d54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d2a:	4a17      	ldr	r2, [pc, #92]	; (8007d88 <vPortValidateInterruptPriority+0x70>)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4413      	add	r3, r2
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d34:	4b15      	ldr	r3, [pc, #84]	; (8007d8c <vPortValidateInterruptPriority+0x74>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	7afa      	ldrb	r2, [r7, #11]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d20a      	bcs.n	8007d54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	607b      	str	r3, [r7, #4]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d54:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <vPortValidateInterruptPriority+0x78>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d5c:	4b0d      	ldr	r3, [pc, #52]	; (8007d94 <vPortValidateInterruptPriority+0x7c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d90a      	bls.n	8007d7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	603b      	str	r3, [r7, #0]
}
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <vPortValidateInterruptPriority+0x60>
	}
 8007d7a:	bf00      	nop
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	e000e3f0 	.word	0xe000e3f0
 8007d8c:	20000f2c 	.word	0x20000f2c
 8007d90:	e000ed0c 	.word	0xe000ed0c
 8007d94:	20000f30 	.word	0x20000f30

08007d98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08a      	sub	sp, #40	; 0x28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007da0:	2300      	movs	r3, #0
 8007da2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007da4:	f7fe fb66 	bl	8006474 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007da8:	4b58      	ldr	r3, [pc, #352]	; (8007f0c <pvPortMalloc+0x174>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007db0:	f000 f910 	bl	8007fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007db4:	4b56      	ldr	r3, [pc, #344]	; (8007f10 <pvPortMalloc+0x178>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4013      	ands	r3, r2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f040 808e 	bne.w	8007ede <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d01d      	beq.n	8007e04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007dc8:	2208      	movs	r2, #8
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4413      	add	r3, r2
 8007dce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d014      	beq.n	8007e04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f023 0307 	bic.w	r3, r3, #7
 8007de0:	3308      	adds	r3, #8
 8007de2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f003 0307 	and.w	r3, r3, #7
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00a      	beq.n	8007e04 <pvPortMalloc+0x6c>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	617b      	str	r3, [r7, #20]
}
 8007e00:	bf00      	nop
 8007e02:	e7fe      	b.n	8007e02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d069      	beq.n	8007ede <pvPortMalloc+0x146>
 8007e0a:	4b42      	ldr	r3, [pc, #264]	; (8007f14 <pvPortMalloc+0x17c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d864      	bhi.n	8007ede <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e14:	4b40      	ldr	r3, [pc, #256]	; (8007f18 <pvPortMalloc+0x180>)
 8007e16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e18:	4b3f      	ldr	r3, [pc, #252]	; (8007f18 <pvPortMalloc+0x180>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e1e:	e004      	b.n	8007e2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d903      	bls.n	8007e3c <pvPortMalloc+0xa4>
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1f1      	bne.n	8007e20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e3c:	4b33      	ldr	r3, [pc, #204]	; (8007f0c <pvPortMalloc+0x174>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d04b      	beq.n	8007ede <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2208      	movs	r2, #8
 8007e4c:	4413      	add	r3, r2
 8007e4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	1ad2      	subs	r2, r2, r3
 8007e60:	2308      	movs	r3, #8
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d91f      	bls.n	8007ea8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <pvPortMalloc+0xf8>
	__asm volatile
 8007e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	613b      	str	r3, [r7, #16]
}
 8007e8c:	bf00      	nop
 8007e8e:	e7fe      	b.n	8007e8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	1ad2      	subs	r2, r2, r3
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ea2:	69b8      	ldr	r0, [r7, #24]
 8007ea4:	f000 f8f8 	bl	8008098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ea8:	4b1a      	ldr	r3, [pc, #104]	; (8007f14 <pvPortMalloc+0x17c>)
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	4a18      	ldr	r2, [pc, #96]	; (8007f14 <pvPortMalloc+0x17c>)
 8007eb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007eb6:	4b17      	ldr	r3, [pc, #92]	; (8007f14 <pvPortMalloc+0x17c>)
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	4b18      	ldr	r3, [pc, #96]	; (8007f1c <pvPortMalloc+0x184>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d203      	bcs.n	8007eca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ec2:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <pvPortMalloc+0x17c>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a15      	ldr	r2, [pc, #84]	; (8007f1c <pvPortMalloc+0x184>)
 8007ec8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	4b10      	ldr	r3, [pc, #64]	; (8007f10 <pvPortMalloc+0x178>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	2200      	movs	r2, #0
 8007edc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ede:	f7fe fad7 	bl	8006490 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	f003 0307 	and.w	r3, r3, #7
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00a      	beq.n	8007f02 <pvPortMalloc+0x16a>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	60fb      	str	r3, [r7, #12]
}
 8007efe:	bf00      	nop
 8007f00:	e7fe      	b.n	8007f00 <pvPortMalloc+0x168>
	return pvReturn;
 8007f02:	69fb      	ldr	r3, [r7, #28]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3728      	adds	r7, #40	; 0x28
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	2000273c 	.word	0x2000273c
 8007f10:	20002748 	.word	0x20002748
 8007f14:	20002740 	.word	0x20002740
 8007f18:	20002734 	.word	0x20002734
 8007f1c:	20002744 	.word	0x20002744

08007f20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d048      	beq.n	8007fc4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f32:	2308      	movs	r3, #8
 8007f34:	425b      	negs	r3, r3
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	4413      	add	r3, r2
 8007f3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	4b21      	ldr	r3, [pc, #132]	; (8007fcc <vPortFree+0xac>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4013      	ands	r3, r2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10a      	bne.n	8007f64 <vPortFree+0x44>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	60fb      	str	r3, [r7, #12]
}
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00a      	beq.n	8007f82 <vPortFree+0x62>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	60bb      	str	r3, [r7, #8]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	4b11      	ldr	r3, [pc, #68]	; (8007fcc <vPortFree+0xac>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d019      	beq.n	8007fc4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d115      	bne.n	8007fc4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	4b0b      	ldr	r3, [pc, #44]	; (8007fcc <vPortFree+0xac>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	401a      	ands	r2, r3
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fa8:	f7fe fa64 	bl	8006474 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <vPortFree+0xb0>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	4a06      	ldr	r2, [pc, #24]	; (8007fd0 <vPortFree+0xb0>)
 8007fb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fba:	6938      	ldr	r0, [r7, #16]
 8007fbc:	f000 f86c 	bl	8008098 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007fc0:	f7fe fa66 	bl	8006490 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fc4:	bf00      	nop
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	20002748 	.word	0x20002748
 8007fd0:	20002740 	.word	0x20002740

08007fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007fda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fe0:	4b27      	ldr	r3, [pc, #156]	; (8008080 <prvHeapInit+0xac>)
 8007fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00c      	beq.n	8008008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3307      	adds	r3, #7
 8007ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 0307 	bic.w	r3, r3, #7
 8007ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	4a1f      	ldr	r2, [pc, #124]	; (8008080 <prvHeapInit+0xac>)
 8008004:	4413      	add	r3, r2
 8008006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800800c:	4a1d      	ldr	r2, [pc, #116]	; (8008084 <prvHeapInit+0xb0>)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008012:	4b1c      	ldr	r3, [pc, #112]	; (8008084 <prvHeapInit+0xb0>)
 8008014:	2200      	movs	r2, #0
 8008016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	4413      	add	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008020:	2208      	movs	r2, #8
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	1a9b      	subs	r3, r3, r2
 8008026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 0307 	bic.w	r3, r3, #7
 800802e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4a15      	ldr	r2, [pc, #84]	; (8008088 <prvHeapInit+0xb4>)
 8008034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008036:	4b14      	ldr	r3, [pc, #80]	; (8008088 <prvHeapInit+0xb4>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2200      	movs	r2, #0
 800803c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800803e:	4b12      	ldr	r3, [pc, #72]	; (8008088 <prvHeapInit+0xb4>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2200      	movs	r2, #0
 8008044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008054:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <prvHeapInit+0xb4>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	4a0a      	ldr	r2, [pc, #40]	; (800808c <prvHeapInit+0xb8>)
 8008062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	4a09      	ldr	r2, [pc, #36]	; (8008090 <prvHeapInit+0xbc>)
 800806a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800806c:	4b09      	ldr	r3, [pc, #36]	; (8008094 <prvHeapInit+0xc0>)
 800806e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008072:	601a      	str	r2, [r3, #0]
}
 8008074:	bf00      	nop
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	20000f34 	.word	0x20000f34
 8008084:	20002734 	.word	0x20002734
 8008088:	2000273c 	.word	0x2000273c
 800808c:	20002744 	.word	0x20002744
 8008090:	20002740 	.word	0x20002740
 8008094:	20002748 	.word	0x20002748

08008098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080a0:	4b28      	ldr	r3, [pc, #160]	; (8008144 <prvInsertBlockIntoFreeList+0xac>)
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	e002      	b.n	80080ac <prvInsertBlockIntoFreeList+0x14>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d8f7      	bhi.n	80080a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	4413      	add	r3, r2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d108      	bne.n	80080da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	441a      	add	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	441a      	add	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d118      	bne.n	8008120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	4b15      	ldr	r3, [pc, #84]	; (8008148 <prvInsertBlockIntoFreeList+0xb0>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d00d      	beq.n	8008116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	441a      	add	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	e008      	b.n	8008128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008116:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <prvInsertBlockIntoFreeList+0xb0>)
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	e003      	b.n	8008128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	429a      	cmp	r2, r3
 800812e:	d002      	beq.n	8008136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008136:	bf00      	nop
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	20002734 	.word	0x20002734
 8008148:	2000273c 	.word	0x2000273c

0800814c <__libc_init_array>:
 800814c:	b570      	push	{r4, r5, r6, lr}
 800814e:	4d0d      	ldr	r5, [pc, #52]	; (8008184 <__libc_init_array+0x38>)
 8008150:	4c0d      	ldr	r4, [pc, #52]	; (8008188 <__libc_init_array+0x3c>)
 8008152:	1b64      	subs	r4, r4, r5
 8008154:	10a4      	asrs	r4, r4, #2
 8008156:	2600      	movs	r6, #0
 8008158:	42a6      	cmp	r6, r4
 800815a:	d109      	bne.n	8008170 <__libc_init_array+0x24>
 800815c:	4d0b      	ldr	r5, [pc, #44]	; (800818c <__libc_init_array+0x40>)
 800815e:	4c0c      	ldr	r4, [pc, #48]	; (8008190 <__libc_init_array+0x44>)
 8008160:	f000 f8f2 	bl	8008348 <_init>
 8008164:	1b64      	subs	r4, r4, r5
 8008166:	10a4      	asrs	r4, r4, #2
 8008168:	2600      	movs	r6, #0
 800816a:	42a6      	cmp	r6, r4
 800816c:	d105      	bne.n	800817a <__libc_init_array+0x2e>
 800816e:	bd70      	pop	{r4, r5, r6, pc}
 8008170:	f855 3b04 	ldr.w	r3, [r5], #4
 8008174:	4798      	blx	r3
 8008176:	3601      	adds	r6, #1
 8008178:	e7ee      	b.n	8008158 <__libc_init_array+0xc>
 800817a:	f855 3b04 	ldr.w	r3, [r5], #4
 800817e:	4798      	blx	r3
 8008180:	3601      	adds	r6, #1
 8008182:	e7f2      	b.n	800816a <__libc_init_array+0x1e>
 8008184:	0800859c 	.word	0x0800859c
 8008188:	0800859c 	.word	0x0800859c
 800818c:	0800859c 	.word	0x0800859c
 8008190:	080085a0 	.word	0x080085a0

08008194 <__retarget_lock_acquire_recursive>:
 8008194:	4770      	bx	lr

08008196 <__retarget_lock_release_recursive>:
 8008196:	4770      	bx	lr

08008198 <memcpy>:
 8008198:	440a      	add	r2, r1
 800819a:	4291      	cmp	r1, r2
 800819c:	f100 33ff 	add.w	r3, r0, #4294967295
 80081a0:	d100      	bne.n	80081a4 <memcpy+0xc>
 80081a2:	4770      	bx	lr
 80081a4:	b510      	push	{r4, lr}
 80081a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ae:	4291      	cmp	r1, r2
 80081b0:	d1f9      	bne.n	80081a6 <memcpy+0xe>
 80081b2:	bd10      	pop	{r4, pc}

080081b4 <memset>:
 80081b4:	4402      	add	r2, r0
 80081b6:	4603      	mov	r3, r0
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d100      	bne.n	80081be <memset+0xa>
 80081bc:	4770      	bx	lr
 80081be:	f803 1b01 	strb.w	r1, [r3], #1
 80081c2:	e7f9      	b.n	80081b8 <memset+0x4>

080081c4 <cleanup_glue>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	460c      	mov	r4, r1
 80081c8:	6809      	ldr	r1, [r1, #0]
 80081ca:	4605      	mov	r5, r0
 80081cc:	b109      	cbz	r1, 80081d2 <cleanup_glue+0xe>
 80081ce:	f7ff fff9 	bl	80081c4 <cleanup_glue>
 80081d2:	4621      	mov	r1, r4
 80081d4:	4628      	mov	r0, r5
 80081d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081da:	f000 b869 	b.w	80082b0 <_free_r>
	...

080081e0 <_reclaim_reent>:
 80081e0:	4b2c      	ldr	r3, [pc, #176]	; (8008294 <_reclaim_reent+0xb4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4283      	cmp	r3, r0
 80081e6:	b570      	push	{r4, r5, r6, lr}
 80081e8:	4604      	mov	r4, r0
 80081ea:	d051      	beq.n	8008290 <_reclaim_reent+0xb0>
 80081ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80081ee:	b143      	cbz	r3, 8008202 <_reclaim_reent+0x22>
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d14a      	bne.n	800828c <_reclaim_reent+0xac>
 80081f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081f8:	6819      	ldr	r1, [r3, #0]
 80081fa:	b111      	cbz	r1, 8008202 <_reclaim_reent+0x22>
 80081fc:	4620      	mov	r0, r4
 80081fe:	f000 f857 	bl	80082b0 <_free_r>
 8008202:	6961      	ldr	r1, [r4, #20]
 8008204:	b111      	cbz	r1, 800820c <_reclaim_reent+0x2c>
 8008206:	4620      	mov	r0, r4
 8008208:	f000 f852 	bl	80082b0 <_free_r>
 800820c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800820e:	b111      	cbz	r1, 8008216 <_reclaim_reent+0x36>
 8008210:	4620      	mov	r0, r4
 8008212:	f000 f84d 	bl	80082b0 <_free_r>
 8008216:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008218:	b111      	cbz	r1, 8008220 <_reclaim_reent+0x40>
 800821a:	4620      	mov	r0, r4
 800821c:	f000 f848 	bl	80082b0 <_free_r>
 8008220:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008222:	b111      	cbz	r1, 800822a <_reclaim_reent+0x4a>
 8008224:	4620      	mov	r0, r4
 8008226:	f000 f843 	bl	80082b0 <_free_r>
 800822a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800822c:	b111      	cbz	r1, 8008234 <_reclaim_reent+0x54>
 800822e:	4620      	mov	r0, r4
 8008230:	f000 f83e 	bl	80082b0 <_free_r>
 8008234:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008236:	b111      	cbz	r1, 800823e <_reclaim_reent+0x5e>
 8008238:	4620      	mov	r0, r4
 800823a:	f000 f839 	bl	80082b0 <_free_r>
 800823e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008240:	b111      	cbz	r1, 8008248 <_reclaim_reent+0x68>
 8008242:	4620      	mov	r0, r4
 8008244:	f000 f834 	bl	80082b0 <_free_r>
 8008248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800824a:	b111      	cbz	r1, 8008252 <_reclaim_reent+0x72>
 800824c:	4620      	mov	r0, r4
 800824e:	f000 f82f 	bl	80082b0 <_free_r>
 8008252:	69a3      	ldr	r3, [r4, #24]
 8008254:	b1e3      	cbz	r3, 8008290 <_reclaim_reent+0xb0>
 8008256:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008258:	4620      	mov	r0, r4
 800825a:	4798      	blx	r3
 800825c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800825e:	b1b9      	cbz	r1, 8008290 <_reclaim_reent+0xb0>
 8008260:	4620      	mov	r0, r4
 8008262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008266:	f7ff bfad 	b.w	80081c4 <cleanup_glue>
 800826a:	5949      	ldr	r1, [r1, r5]
 800826c:	b941      	cbnz	r1, 8008280 <_reclaim_reent+0xa0>
 800826e:	3504      	adds	r5, #4
 8008270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008272:	2d80      	cmp	r5, #128	; 0x80
 8008274:	68d9      	ldr	r1, [r3, #12]
 8008276:	d1f8      	bne.n	800826a <_reclaim_reent+0x8a>
 8008278:	4620      	mov	r0, r4
 800827a:	f000 f819 	bl	80082b0 <_free_r>
 800827e:	e7ba      	b.n	80081f6 <_reclaim_reent+0x16>
 8008280:	680e      	ldr	r6, [r1, #0]
 8008282:	4620      	mov	r0, r4
 8008284:	f000 f814 	bl	80082b0 <_free_r>
 8008288:	4631      	mov	r1, r6
 800828a:	e7ef      	b.n	800826c <_reclaim_reent+0x8c>
 800828c:	2500      	movs	r5, #0
 800828e:	e7ef      	b.n	8008270 <_reclaim_reent+0x90>
 8008290:	bd70      	pop	{r4, r5, r6, pc}
 8008292:	bf00      	nop
 8008294:	2000001c 	.word	0x2000001c

08008298 <__malloc_lock>:
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <__malloc_lock+0x8>)
 800829a:	f7ff bf7b 	b.w	8008194 <__retarget_lock_acquire_recursive>
 800829e:	bf00      	nop
 80082a0:	2000274c 	.word	0x2000274c

080082a4 <__malloc_unlock>:
 80082a4:	4801      	ldr	r0, [pc, #4]	; (80082ac <__malloc_unlock+0x8>)
 80082a6:	f7ff bf76 	b.w	8008196 <__retarget_lock_release_recursive>
 80082aa:	bf00      	nop
 80082ac:	2000274c 	.word	0x2000274c

080082b0 <_free_r>:
 80082b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082b2:	2900      	cmp	r1, #0
 80082b4:	d044      	beq.n	8008340 <_free_r+0x90>
 80082b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ba:	9001      	str	r0, [sp, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f1a1 0404 	sub.w	r4, r1, #4
 80082c2:	bfb8      	it	lt
 80082c4:	18e4      	addlt	r4, r4, r3
 80082c6:	f7ff ffe7 	bl	8008298 <__malloc_lock>
 80082ca:	4a1e      	ldr	r2, [pc, #120]	; (8008344 <_free_r+0x94>)
 80082cc:	9801      	ldr	r0, [sp, #4]
 80082ce:	6813      	ldr	r3, [r2, #0]
 80082d0:	b933      	cbnz	r3, 80082e0 <_free_r+0x30>
 80082d2:	6063      	str	r3, [r4, #4]
 80082d4:	6014      	str	r4, [r2, #0]
 80082d6:	b003      	add	sp, #12
 80082d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082dc:	f7ff bfe2 	b.w	80082a4 <__malloc_unlock>
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	d908      	bls.n	80082f6 <_free_r+0x46>
 80082e4:	6825      	ldr	r5, [r4, #0]
 80082e6:	1961      	adds	r1, r4, r5
 80082e8:	428b      	cmp	r3, r1
 80082ea:	bf01      	itttt	eq
 80082ec:	6819      	ldreq	r1, [r3, #0]
 80082ee:	685b      	ldreq	r3, [r3, #4]
 80082f0:	1949      	addeq	r1, r1, r5
 80082f2:	6021      	streq	r1, [r4, #0]
 80082f4:	e7ed      	b.n	80082d2 <_free_r+0x22>
 80082f6:	461a      	mov	r2, r3
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	b10b      	cbz	r3, 8008300 <_free_r+0x50>
 80082fc:	42a3      	cmp	r3, r4
 80082fe:	d9fa      	bls.n	80082f6 <_free_r+0x46>
 8008300:	6811      	ldr	r1, [r2, #0]
 8008302:	1855      	adds	r5, r2, r1
 8008304:	42a5      	cmp	r5, r4
 8008306:	d10b      	bne.n	8008320 <_free_r+0x70>
 8008308:	6824      	ldr	r4, [r4, #0]
 800830a:	4421      	add	r1, r4
 800830c:	1854      	adds	r4, r2, r1
 800830e:	42a3      	cmp	r3, r4
 8008310:	6011      	str	r1, [r2, #0]
 8008312:	d1e0      	bne.n	80082d6 <_free_r+0x26>
 8008314:	681c      	ldr	r4, [r3, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	6053      	str	r3, [r2, #4]
 800831a:	4421      	add	r1, r4
 800831c:	6011      	str	r1, [r2, #0]
 800831e:	e7da      	b.n	80082d6 <_free_r+0x26>
 8008320:	d902      	bls.n	8008328 <_free_r+0x78>
 8008322:	230c      	movs	r3, #12
 8008324:	6003      	str	r3, [r0, #0]
 8008326:	e7d6      	b.n	80082d6 <_free_r+0x26>
 8008328:	6825      	ldr	r5, [r4, #0]
 800832a:	1961      	adds	r1, r4, r5
 800832c:	428b      	cmp	r3, r1
 800832e:	bf04      	itt	eq
 8008330:	6819      	ldreq	r1, [r3, #0]
 8008332:	685b      	ldreq	r3, [r3, #4]
 8008334:	6063      	str	r3, [r4, #4]
 8008336:	bf04      	itt	eq
 8008338:	1949      	addeq	r1, r1, r5
 800833a:	6021      	streq	r1, [r4, #0]
 800833c:	6054      	str	r4, [r2, #4]
 800833e:	e7ca      	b.n	80082d6 <_free_r+0x26>
 8008340:	b003      	add	sp, #12
 8008342:	bd30      	pop	{r4, r5, pc}
 8008344:	20002750 	.word	0x20002750

08008348 <_init>:
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834a:	bf00      	nop
 800834c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834e:	bc08      	pop	{r3}
 8008350:	469e      	mov	lr, r3
 8008352:	4770      	bx	lr

08008354 <_fini>:
 8008354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008356:	bf00      	nop
 8008358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800835a:	bc08      	pop	{r3}
 800835c:	469e      	mov	lr, r3
 800835e:	4770      	bx	lr
